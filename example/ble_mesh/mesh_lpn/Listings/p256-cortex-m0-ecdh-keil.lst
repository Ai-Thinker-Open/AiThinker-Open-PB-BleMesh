


ARM Macro Assembler    Page 1 


    1 00000000         ; P-256 ECDH
    2 00000000         ; Author: Emil Lenngren
    3 00000000         ; Licensed under the BSD 2-clause license.
    4 00000000         ; The 256x256->512 multiplication/square code is based o
                       n public domain µNaCl by Ana Helena Sánchez and Björn Ha
                       ase (https://munacl.cryptojedi.org/curve25519-cortexm0.s
                       html)
    5 00000000         
    6 00000000         ; Note on calling conventions: some of the local functio
                       ns in this file use custom calling conventions.
    7 00000000         ; Exported symbols use the standard C calling convention
                       s for ARM, which means that r4-r11 and sp are preserved 
                       and the other registers are clobbered.
    8 00000000         
    9 00000000         ; Stack usage is 1356 bytes.
   10 00000000         
   11 00000000         ; Settings below for optimizing for speed vs size.
   12 00000000         ; When optimizing fully for speed, the run time is 4 456
                        738 cycles and code size is 3708 bytes.
   13 00000000         ; When optimizing fully for size, the run time is 5 764 
                       182 cycles and code size is 2416 bytes.
   14 00000000         ; Get the time taken (in seconds) by dividing the number
                        of cycles with the clock frequency (Hz) of the cpu.
   15 00000000         ; Different optimization levels can be done by setting s
                       ome to 1 and some to 0.
   16 00000000         ; Optimizing all settings for size except use_mul_for_sq
                       r and use_smaller_modinv gives a run time of 4 851 527 c
                       ycles and code size is 2968 bytes.
   17 00000000         
   18 00000000                 gbla             use_mul_for_sqr
   19 00000000 00000000 
                       use_mul_for_sqr
                               seta             0           ; 1 to enable, 0 to
                                                             disable (14% slowe
                                                            r if enabled but sa
                                                            ves 624/460 bytes (
                                                            depending on use_no
                                                            ninlined_sqr64) of 
                                                            compiled code size)
                                                            
   20 00000000         
   21 00000000                 gbla             use_noninlined_mul64
   22 00000000 00000001 
                       use_noninlined_mul64
                               seta             1           ; 1 to enable, 0 to
                                                             disable (2.6%/4.0%
                                                             slower (depending 
                                                            on use_mul_for_sqr)
                                                             if enabled but sav
                                                            es 308 bytes of com
                                                            piled code size)
   23 00000000         
   24 00000000                 gbla             use_noninlined_sqr64
   25 00000000 00000001 
                       use_noninlined_sqr64
                               seta             1           ; 1 to enable, 0 to
                                                             disable (2.4% slow
                                                            er if enabled and u
                                                            se_mul_for_sqr=0 bu



ARM Macro Assembler    Page 2 


                                                            t saves 164 bytes o
                                                            f compiled code siz
                                                            e)
   26 00000000         
   27 00000000                 gbla             use_interpreter
   28 00000000 00000001 
                       use_interpreter
                               seta             1           ; 1 to enable, 0 to
                                                             disable (3.6% slow
                                                            er if enabled but s
                                                            aves 268 bytes of c
                                                            ompiled code size)
   29 00000000         
   30 00000000                 gbla             use_smaller_modinv
   31 00000000 00000000 
                       use_smaller_modinv
                               seta             0           ; 1 to enable, 0 to
                                                             disable (3.6% slow
                                                            er if enabled but s
                                                            aves 88 bytes of co
                                                            mpiled code size)
   32 00000000         
   33 00000000                 area             |.text|,code,readonly
   34 00000000                 align            2
   35 00000000         
   36 00000000                 if               use_noninlined_mul64 == 1
   37 00000000         ; in: (r4,r5) = a[0..1], (r2,r3) = b[0..1]
   38 00000000         ; out: r0-r3
   39 00000000         ; clobbers r4-r9 and lr
   40 00000000         P256_mul64
                               proc
   41 00000000 462E            mov              r6,r5
   42 00000002 4611            mov              r1,r2
   43 00000004 1B2D            subs             r5,r4
   44 00000006 4180            sbcs             r0,r0
   45 00000008 4045            eors             r5,r0
   46 0000000A 1A2D            subs             r5,r0
   47 0000000C 1AC9            subs             r1,r3
   48 0000000E 41BF            sbcs             r7,r7
   49 00000010 4079            eors             r1,r7
   50 00000012 1BC9            subs             r1,r7
   51 00000014 4047            eors             r7,r0
   52 00000016 4689            mov              r9,r1
   53 00000018 46A8            mov              r8,r5
   54 0000001A 0C21            lsrs             r1,r4,#16
   55 0000001C B2A4            uxth             r4,r4
   56 0000001E 4620            mov              r0,r4
   57 00000020 B295            uxth             r5,r2
   58 00000022 0C12            lsrs             r2,#16
   59 00000024 4368            muls             r0,r5,r0    ;//00
   60 00000026 434D            muls             r5,r1,r5    ;//10
   61 00000028 4354            muls             r4,r2,r4    ;//01
   62 0000002A 4351            muls             r1,r2,r1    ;//11
   63 0000002C 0422            lsls             r2,r4,#16
   64 0000002E 0C24            lsrs             r4,r4,#16
   65 00000030 1880            adds             r0,r2
   66 00000032 4161            adcs             r1,r4
   67 00000034 042A            lsls             r2,r5,#16
   68 00000036 0C2C            lsrs             r4,r5,#16



ARM Macro Assembler    Page 3 


   69 00000038 1880            adds             r0,r2
   70 0000003A 4161            adcs             r1,r4
   71 0000003C 0C34            lsrs             r4,r6,#16
   72 0000003E B2B6            uxth             r6,r6
   73 00000040 B29D            uxth             r5,r3
   74 00000042 0C1B            lsrs             r3,r3,#16
   75 00000044 4632            mov              r2,r6
   76 00000046 436A            muls             r2,r5,r2
   77 00000048 4365            muls             r5,r4,r5
   78 0000004A 435E            muls             r6,r3,r6
   79 0000004C 4363            muls             r3,r4,r3
   80 0000004E 042C            lsls             r4,r5,#16
   81 00000050 0C2D            lsrs             r5,r5,#16
   82 00000052 1912            adds             r2,r4
   83 00000054 416B            adcs             r3,r5
   84 00000056 0434            lsls             r4,r6,#16
   85 00000058 0C35            lsrs             r5,r6,#16
   86 0000005A 1912            adds             r2,r4
   87 0000005C 416B            adcs             r3,r5
   88 0000005E 4076            eors             r6,r6
   89 00000060 1852            adds             r2,r1
   90 00000062 4173            adcs             r3,r6
   91 00000064 4649            mov              r1,r9
   92 00000066 4645            mov              r5,r8
   93 00000068 4680            mov              r8,r0
   94 0000006A 0C08            lsrs             r0,r1,#16
   95 0000006C B289            uxth             r1,r1
   96 0000006E 460C            mov              r4,r1
   97 00000070 0C2E            lsrs             r6,r5,#16
   98 00000072 B2AD            uxth             r5,r5
   99 00000074 4369            muls             r1,r5,r1
  100 00000076 4374            muls             r4,r6,r4
  101 00000078 4345            muls             r5,r0,r5
  102 0000007A 4370            muls             r0,r6,r0
  103 0000007C 0426            lsls             r6,r4,#16
  104 0000007E 0C24            lsrs             r4,#16
  105 00000080 1989            adds             r1,r6
  106 00000082 4160            adcs             r0,r4
  107 00000084 042E            lsls             r6,r5,#16
  108 00000086 0C2D            lsrs             r5,#16
  109 00000088 1989            adds             r1,r6
  110 0000008A 4168            adcs             r0,r5
  111 0000008C 4079            eors             r1,r7
  112 0000008E 4078            eors             r0,r7
  113 00000090 4064            eors             r4,r4
  114 00000092 107F            asrs             r7,r7,#1
  115 00000094 4151            adcs             r1,r2
  116 00000096 4142            adcs             r2,r0
  117 00000098 4167            adcs             r7,r4
  118 0000009A 4640            mov              r0,r8
  119 0000009C 1809            adds             r1,r0
  120 0000009E 415A            adcs             r2,r3
  121 000000A0 417B            adcs             r3,r7
  122 000000A2 4770            bx               lr
  123 000000A4                 endp
  124 000000A4                 endif
  125 000000A4         
  126 000000A4         ; in: *r10 = a, *r11 = b, (r4,r5) = a[0..1], (r2,r3) = b
                       [0..1]



ARM Macro Assembler    Page 4 


  127 000000A4         ; out: r8,r9,r2-r7
  128 000000A4         ; clobbers all other registers
  129 000000A4         P256_mul128
                               proc
  130 000000A4                 if               use_noninlined_mul64 == 1
  131 000000A4 B500            push             {lr}
  132 000000A6                 frame            push {lr}
  133 000000A6                 endif
  134 000000A6         ;///////MUL128/////////////
  135 000000A6         ;MUL64
  136 000000A6                 if               use_noninlined_mul64 == 0
  219 000000A6 F7FF FFFE       bl               P256_mul64
  220 000000AA                 endif
  221 000000AA B403            push             {r0,r1}
  222 000000AC                 frame            address sp,8+use_noninlined_mul
64*4
  223 000000AC 4651            mov              r1,r10
  224 000000AE 4692            mov              r10,r2
  225 000000B0 C933            ldm              r1,{r0,r1,r4,r5}
  226 000000B2 4622            mov              r2,r4
  227 000000B4 462F            mov              r7,r5
  228 000000B6 1A12            subs             r2,r0
  229 000000B8 418F            sbcs             r7,r1
  230 000000BA 41B6            sbcs             r6,r6
  231 000000BC 4072            eors             r2,r6
  232 000000BE 4077            eors             r7,r6
  233 000000C0 1B92            subs             r2,r6
  234 000000C2 41B7            sbcs             r7,r6
  235 000000C4 B484            push             {r2,r7}
  236 000000C6                 frame            address sp,16+use_noninlined_mu
l64*4
  237 000000C6 465A            mov              r2,r11
  238 000000C8 469B            mov              r11,r3
  239 000000CA CA0F            ldm              r2,{r0,r1,r2,r3}
  240 000000CC 1A80            subs             r0,r2
  241 000000CE 4199            sbcs             r1,r3
  242 000000D0 41BF            sbcs             r7,r7
  243 000000D2 4078            eors             r0,r7
  244 000000D4 4079            eors             r1,r7
  245 000000D6 1BC0            subs             r0,r7
  246 000000D8 41B9            sbcs             r1,r7
  247 000000DA 4077            eors             r7,r6
  248 000000DC 46BC            mov              r12,r7
  249 000000DE B403            push             {r0,r1}
  250 000000E0                 frame            address sp,24+use_noninlined_mu
l64*4
  251 000000E0         ;MUL64
  252 000000E0                 if               use_noninlined_mul64 == 0
  335 000000E0 F7FF FFFE       bl               P256_mul64
  336 000000E4                 endif
  337 000000E4 4654            mov              r4,r10
  338 000000E6 465D            mov              r5,r11
  339 000000E8 4076            eors             r6,r6
  340 000000EA 1900            adds             r0,r4
  341 000000EC 4169            adcs             r1,r5
  342 000000EE 4172            adcs             r2,r6
  343 000000F0 4173            adcs             r3,r6
  344 000000F2 4692            mov              r10,r2
  345 000000F4 469B            mov              r11,r3



ARM Macro Assembler    Page 5 


  346 000000F6 BC3C            pop              {r2-r5}
  347 000000F8                 frame            address sp,8+use_noninlined_mul
64*4
  348 000000F8 B403            push             {r0,r1}
  349 000000FA                 frame            address sp,16+use_noninlined_mu
l64*4
  350 000000FA                 if               use_noninlined_mul64 == 0
  433 000000FA F7FF FFFE       bl               P256_mul64
  434 000000FE                 endif
  435 000000FE BC30            pop              {r4,r5}
  436 00000100                 frame            address sp,8+use_noninlined_mul
64*4
  437 00000100 4666            mov              r6,r12
  438 00000102 4667            mov              r7,r12
  439 00000104 4070            eors             r0,r6
  440 00000106 4071            eors             r1,r6
  441 00000108 4072            eors             r2,r6
  442 0000010A 4073            eors             r3,r6
  443 0000010C 1076            asrs             r6,r6,#1
  444 0000010E 4160            adcs             r0,r4
  445 00000110 4169            adcs             r1,r5
  446 00000112 4154            adcs             r4,r2
  447 00000114 415D            adcs             r5,r3
  448 00000116 4052            eors             r2,r2
  449 00000118 4156            adcs             r6,r2       ;//0,1
  450 0000011A 4157            adcs             r7,r2
  451 0000011C BC0C            pop              {r2,r3}
  452 0000011E                 frame            address sp,0+use_noninlined_mul
64*4
  453 0000011E 4690            mov              r8,r2
  454 00000120 4699            mov              r9,r3
  455 00000122 1812            adds             r2,r0
  456 00000124 414B            adcs             r3,r1
  457 00000126 4650            mov              r0,r10
  458 00000128 4659            mov              r1,r11
  459 0000012A 4144            adcs             r4,r0
  460 0000012C 414D            adcs             r5,r1
  461 0000012E 4146            adcs             r6,r0
  462 00000130 414F            adcs             r7,r1
  463 00000132                 if               use_noninlined_mul64 == 1
  464 00000132 BD00            pop              {pc}
  465 00000134                 else
  467                          endif
  468 00000134                 endp
  469 00000134         
  470 00000134                 if               use_mul_for_sqr == 1
  475                          endif
  476 00000134         
  477 00000134         ; *r0 = out, *r1 = a, *r2 = b
  478 00000134         P256_mulmod
                               proc
  479 00000134 B501            push             {r0,lr}
  480 00000136                 frame            push {lr}
  481 00000136                 frame            address sp,8
  482 00000136 B090            sub              sp,#64
  483 00000138                 frame            address sp,72
  484 00000138 B406            push             {r1-r2}
  485 0000013A                 frame            address sp,80
  486 0000013A 4692            mov              r10,r2



ARM Macro Assembler    Page 6 


  487 0000013C 468B            mov              r11,r1
  488 0000013E 4610            mov              r0,r2
  489 00000140 C830            ldm              r0!,{r4,r5}
  490 00000142 3008            adds             r0,#8
  491 00000144 C90C            ldm              r1!,{r2,r3}
  492 00000146 3108            adds             r1,#8
  493 00000148 B403            push             {r0,r1}
  494 0000014A                 frame            address sp,88
  495 0000014A         
  496 0000014A F7FF FFFE       bl               P256_mul128
  497 0000014E A806            add              r0,sp,#24
  498 00000150 C00C            stm              r0!,{r2,r3}
  499 00000152 A804            add              r0,sp,#16
  500 00000154 4642            mov              r2,r8
  501 00000156 464B            mov              r3,r9
  502 00000158 C00C            stm              r0!,{r2,r3}
  503 0000015A         
  504 0000015A         ;pop {r0} ;result+8
  505 0000015A         ;stm r0!,{r2,r3}
  506 0000015A BC06            pop              {r1,r2}     ;a+16 b+16
  507 0000015C                 frame            address sp,80
  508 0000015C         ;push {r0}
  509 0000015C B4F0            push             {r4-r7}
  510 0000015E                 frame            address sp,96
  511 0000015E 468A            mov              r10,r1
  512 00000160 4693            mov              r11,r2
  513 00000162 C930            ldm              r1!,{r4,r5}
  514 00000164 CA0C            ldm              r2,{r2,r3}
  515 00000166         
  516 00000166 F7FF FFFE       bl               P256_mul128
  517 0000016A         
  518 0000016A 4640            mov              r0,r8
  519 0000016C 4649            mov              r1,r9
  520 0000016E 46B0            mov              r8,r6
  521 00000170 46B9            mov              r9,r7
  522 00000172 BCC0            pop              {r6,r7}
  523 00000174                 frame            address sp,88
  524 00000174 1980            adds             r0,r6
  525 00000176 4179            adcs             r1,r7
  526 00000178 BCC0            pop              {r6,r7}
  527 0000017A                 frame            address sp,80
  528 0000017A 4172            adcs             r2,r6
  529 0000017C 417B            adcs             r3,r7
  530 0000017E         ;pop {r7} ;result+16
  531 0000017E AF06            add              r7,sp,#24
  532 00000180 C70F            stm              r7!,{r0-r3}
  533 00000182 46BA            mov              r10,r7
  534 00000184 4040            eors             r0,r0
  535 00000186 4646            mov              r6,r8
  536 00000188 464F            mov              r7,r9
  537 0000018A 4144            adcs             r4,r0
  538 0000018C 4145            adcs             r5,r0
  539 0000018E 4146            adcs             r6,r0
  540 00000190 4147            adcs             r7,r0
  541 00000192 BC06            pop              {r1,r2}     ;b a
  542 00000194                 frame            address sp,72
  543 00000194 4694            mov              r12,r2
  544 00000196 B4F0            push             {r4-r7}
  545 00000198                 frame            address sp,88



ARM Macro Assembler    Page 7 


  546 00000198 C9FF            ldm              r1,{r0-r7}
  547 0000019A 1B00            subs             r0,r4
  548 0000019C 41A9            sbcs             r1,r5
  549 0000019E 41B2            sbcs             r2,r6
  550 000001A0 41BB            sbcs             r3,r7
  551 000001A2 4064            eors             r4,r4
  552 000001A4 41A4            sbcs             r4,r4
  553 000001A6 4060            eors             r0,r4
  554 000001A8 4061            eors             r1,r4
  555 000001AA 4062            eors             r2,r4
  556 000001AC 4063            eors             r3,r4
  557 000001AE 1B00            subs             r0,r4
  558 000001B0 41A1            sbcs             r1,r4
  559 000001B2 41A2            sbcs             r2,r4
  560 000001B4 41A3            sbcs             r3,r4
  561 000001B6 4666            mov              r6,r12
  562 000001B8 46A4            mov              r12,r4      ;//carry
  563 000001BA 4655            mov              r5,r10
  564 000001BC C50F            stm              r5!,{r0-r3}
  565 000001BE 46AB            mov              r11,r5
  566 000001C0 4680            mov              r8,r0
  567 000001C2 4689            mov              r9,r1
  568 000001C4 CEFF            ldm              r6,{r0-r7}
  569 000001C6 1A24            subs             r4,r0
  570 000001C8 418D            sbcs             r5,r1
  571 000001CA 4196            sbcs             r6,r2
  572 000001CC 419F            sbcs             r7,r3
  573 000001CE 4040            eors             r0,r0
  574 000001D0 4180            sbcs             r0,r0
  575 000001D2 4044            eors             r4,r0
  576 000001D4 4045            eors             r5,r0
  577 000001D6 4046            eors             r6,r0
  578 000001D8 4047            eors             r7,r0
  579 000001DA 1A24            subs             r4,r0
  580 000001DC 4185            sbcs             r5,r0
  581 000001DE 4186            sbcs             r6,r0
  582 000001E0 4187            sbcs             r7,r0
  583 000001E2 4661            mov              r1,r12
  584 000001E4 4048            eors             r0,r1
  585 000001E6 4659            mov              r1,r11
  586 000001E8 C1F0            stm              r1!,{r4-r7}
  587 000001EA B401            push             {r0}
  588 000001EC                 frame            address sp,92
  589 000001EC 4642            mov              r2,r8
  590 000001EE 464B            mov              r3,r9
  591 000001F0         
  592 000001F0 F7FF FFFE       bl               P256_mul128
  593 000001F4         
  594 000001F4 BC01            pop              {r0}        ;//r0,r1
  595 000001F6                 frame            address sp,88
  596 000001F6 4684            mov              r12,r0      ;//negative
  597 000001F8 4042            eors             r2,r0
  598 000001FA 4043            eors             r3,r0
  599 000001FC 4044            eors             r4,r0
  600 000001FE 4045            eors             r5,r0
  601 00000200 4046            eors             r6,r0
  602 00000202 4047            eors             r7,r0
  603 00000204 B4F0            push             {r4-r7}
  604 00000206                 frame            address sp,104



ARM Macro Assembler    Page 8 


  605 00000206 A908            add              r1,sp,#32   ;result
  606 00000208 C9F0            ldm              r1!,{r4-r7}
  607 0000020A         ;mov r11,r1 ;//reference
  608 0000020A 4649            mov              r1,r9
  609 0000020C 4041            eors             r1,r0
  610 0000020E 46A2            mov              r10,r4
  611 00000210 4644            mov              r4,r8
  612 00000212 1040            asrs             r0,#1
  613 00000214 4060            eors             r0,r4
  614 00000216 4654            mov              r4,r10
  615 00000218 4160            adcs             r0,r4
  616 0000021A 4169            adcs             r1,r5
  617 0000021C 4172            adcs             r2,r6
  618 0000021E 417B            adcs             r3,r7
  619 00000220 4064            eors             r4,r4
  620 00000222 4164            adcs             r4,r4
  621 00000224 46A2            mov              r10,r4      ;//carry
  622 00000226         ;mov r4,r11
  623 00000226 AC0C            add              r4,sp,#32+16
  624 00000228 CCF0            ldm              r4,{r4-r7}
  625 0000022A 1900            adds             r0,r4
  626 0000022C 4169            adcs             r1,r5
  627 0000022E 4172            adcs             r2,r6
  628 00000230 417B            adcs             r3,r7
  629 00000232 46A1            mov              r9,r4
  630 00000234         ;mov r4,r11
  631 00000234 AC0C            add              r4,sp,#32+16
  632 00000236 C40F            stm              r4!,{r0-r3}
  633 00000238         ;mov r11,r4
  634 00000238 BC0F            pop              {r0-r3}
  635 0000023A                 frame            address sp,88
  636 0000023A 464C            mov              r4,r9
  637 0000023C 4144            adcs             r4,r0
  638 0000023E 414D            adcs             r5,r1
  639 00000240 4156            adcs             r6,r2
  640 00000242 415F            adcs             r7,r3
  641 00000244 2100            movs             r1,#0
  642 00000246 4149            adcs             r1,r1
  643 00000248 4650            mov              r0,r10
  644 0000024A 468A            mov              r10,r1      ;//carry
  645 0000024C 1040            asrs             r0,#1
  646 0000024E BC0F            pop              {r0-r3}
  647 00000250                 frame            address sp,72
  648 00000250 4144            adcs             r4,r0
  649 00000252 414D            adcs             r5,r1
  650 00000254 4156            adcs             r6,r2
  651 00000256 415F            adcs             r7,r3
  652 00000258 4680            mov              r8,r0
  653 0000025A         ;mov r0,r11
  654 0000025A A808            add              r0,sp,#32
  655 0000025C C0F0            stm              r0!,{r4-r7}
  656 0000025E         ;mov r11,r0
  657 0000025E 4640            mov              r0,r8
  658 00000260 4666            mov              r6,r12
  659 00000262 4655            mov              r5,r10
  660 00000264 4064            eors             r4,r4
  661 00000266 4175            adcs             r5,r6
  662 00000268 4166            adcs             r6,r4
  663 0000026A 1940            adds             r0,r5



ARM Macro Assembler    Page 9 


  664 0000026C 4171            adcs             r1,r6
  665 0000026E 4172            adcs             r2,r6
  666 00000270 4173            adcs             r3,r6
  667 00000272         ;mov r7,r11
  668 00000272 AF0C            add              r7,sp,#32+16
  669 00000274 C70F            stm              r7!,{r0-r3}
  670 00000276         
  671 00000276         ; multiplication done, now reducing
  672 00000276         
  673 00000276         reduce                               ;label definition
  674 00000276 BCFF            pop              {r0-r7}
  675 00000278                 frame            address sp,40
  676 00000278 181B            adds             r3,r0
  677 0000027A 414C            adcs             r4,r1
  678 0000027C 4155            adcs             r5,r2
  679 0000027E 4146            adcs             r6,r0
  680 00000280 4690            mov              r8,r2
  681 00000282 4699            mov              r9,r3
  682 00000284 46A2            mov              r10,r4
  683 00000286 46AB            mov              r11,r5
  684 00000288 46B4            mov              r12,r6
  685 0000028A 414F            adcs             r7,r1
  686 0000028C BC3C            pop              {r2-r5}     ;8,9,10,11
  687 0000028E                 frame            address sp,24
  688 0000028E 4142            adcs             r2,r0       ;8+0
  689 00000290 414B            adcs             r3,r1       ;9+1
  690 00000292 2600            movs             r6,#0
  691 00000294 4174            adcs             r4,r6       ;10+#0
  692 00000296 4175            adcs             r5,r6       ;11+#0
  693 00000298 4176            adcs             r6,r6       ;C
  694 0000029A         
  695 0000029A 1A3F            subs             r7,r0       ;7-0
  696 0000029C 418A            sbcs             r2,r1       ;8-1
  697 0000029E         ; r0,r1 dead
  698 0000029E 4640            mov              r0,r8       ;2
  699 000002A0 4649            mov              r1,r9       ;3
  700 000002A2 4183            sbcs             r3,r0       ;9-2
  701 000002A4 418C            sbcs             r4,r1       ;10-3
  702 000002A6 2000            movs             r0,#0
  703 000002A8 4185            sbcs             r5,r0       ;11-#0
  704 000002AA 4186            sbcs             r6,r0       ;C-#0
  705 000002AC         
  706 000002AC 4660            mov              r0,r12      ;6
  707 000002AE 1840            adds             r0,r1       ;6+3
  708 000002B0 4684            mov              r12,r0
  709 000002B2 4650            mov              r0,r10      ;4
  710 000002B4 4147            adcs             r7,r0       ;7+4
  711 000002B6 46BE            mov              lr,r7
  712 000002B8 4640            mov              r0,r8       ;2
  713 000002BA 4142            adcs             r2,r0       ;8+2
  714 000002BC 414B            adcs             r3,r1       ;9+3
  715 000002BE 4144            adcs             r4,r0       ;10+2
  716 000002C0 414D            adcs             r5,r1       ;11+3
  717 000002C2 2700            movs             r7,#0
  718 000002C4 417E            adcs             r6,r7       ;C+#0
  719 000002C6         
  720 000002C6         ;2-3 are now dead (r8,r9)
  721 000002C6         ;4   5   6   7  8  9  10 11 C
  722 000002C6         ;r10 r11 r12 lr r2 r3 r4 r5 r6



ARM Macro Assembler    Page 10 


  723 000002C6         ;r7: 0
  724 000002C6         
  725 000002C6 BC03            pop              {r0,r1}     ;12,13
  726 000002C8                 frame            address sp,16
  727 000002C8         
  728 000002C8 1836            adds             r6,r0       ;12+C
  729 000002CA 4179            adcs             r1,r7       ;13+#0
  730 000002CC 417F            adcs             r7,r7       ;new Carry for 14
  731 000002CE         
  732 000002CE         ;r0 dead
  733 000002CE         
  734 000002CE 4658            mov              r0,r11      ;5
  735 000002D0 1812            adds             r2,r0       ;8+5
  736 000002D2 4690            mov              r8,r2
  737 000002D4 4662            mov              r2,r12      ;6
  738 000002D6 4153            adcs             r3,r2       ;9+6
  739 000002D8 4699            mov              r9,r3
  740 000002DA 4653            mov              r3,r10      ;4
  741 000002DC 415C            adcs             r4,r3       ;10+4
  742 000002DE 46A2            mov              r10,r4
  743 000002E0 4145            adcs             r5,r0       ;11+5
  744 000002E2 415E            adcs             r6,r3       ;12+4
  745 000002E4 4141            adcs             r1,r0       ;13+5
  746 000002E6 BC14            pop              {r2,r4}     ;14,15
  747 000002E8                 frame            address sp,8
  748 000002E8 417A            adcs             r2,r7       ;14+C
  749 000002EA 2700            movs             r7,#0
  750 000002EC 417C            adcs             r4,r7       ;15+#0
  751 000002EE 417F            adcs             r7,r7       ;new Carry for 16
  752 000002F0         
  753 000002F0         ;4  5  6   7  8  9  10  11 12 13 14 15 C
  754 000002F0         ;r3 r0 r12 lr r8 r9 r10 r5 r6 r1 r2 r4 r7
  755 000002F0         ;r11 is available
  756 000002F0         
  757 000002F0 1AED            subs             r5,r3       ;11-4
  758 000002F2 4186            sbcs             r6,r0       ;12-5
  759 000002F4 4663            mov              r3,r12      ;6
  760 000002F6 4670            mov              r0,lr       ;7
  761 000002F8 4199            sbcs             r1,r3       ;13-6
  762 000002FA 4182            sbcs             r2,r0       ;14-7
  763 000002FC 2300            movs             r3,#0
  764 000002FE 419C            sbcs             r4,r3       ;15-#0
  765 00000300 419F            sbcs             r7,r3       ;C-#0
  766 00000302 46A6            mov              lr,r4
  767 00000304 46BB            mov              r11,r7
  768 00000306         
  769 00000306 4654            mov              r4,r10      ;10
  770 00000308 1824            adds             r4,r0       ;10+7
  771 0000030A 415D            adcs             r5,r3       ;11+#0
  772 0000030C 4667            mov              r7,r12      ;6
  773 0000030E 417E            adcs             r6,r7       ;12+6
  774 00000310 4141            adcs             r1,r0       ;13+7
  775 00000312 417A            adcs             r2,r7       ;14+6
  776 00000314 4677            mov              r7,lr       ;15
  777 00000316 4147            adcs             r7,r0       ;15+7
  778 00000318 4658            mov              r0,r11      ;C
  779 0000031A 4158            adcs             r0,r3       ;C+#0
  780 0000031C         
  781 0000031C         ; now (T + mN) / R is



ARM Macro Assembler    Page 11 


  782 0000031C         ; 8 9 4 5 6 1 2 7 6 (lsb -> msb)
  783 0000031C         
  784 0000031C 1ADB            subs             r3,r3       ;set r3 to 0 and C 
                                                            to 1
  785 0000031E 4682            mov              r10,r0
  786 00000320 4640            mov              r0,r8
  787 00000322 4158            adcs             r0,r3
  788 00000324 46BB            mov              r11,r7
  789 00000326 464F            mov              r7,r9
  790 00000328 415F            adcs             r7,r3
  791 0000032A 4684            mov              r12,r0
  792 0000032C 46B9            mov              r9,r7
  793 0000032E 415C            adcs             r4,r3
  794 00000330 419D            sbcs             r5,r3
  795 00000332 419E            sbcs             r6,r3
  796 00000334 4199            sbcs             r1,r3
  797 00000336 2301            movs             r3,#1
  798 00000338 419A            sbcs             r2,r3
  799 0000033A 2300            movs             r3,#0
  800 0000033C 4658            mov              r0,r11
  801 0000033E 4657            mov              r7,r10
  802 00000340 4158            adcs             r0,r3
  803 00000342 419F            sbcs             r7,r3
  804 00000344         
  805 00000344         ; r12 r9 r4 r5 | r6 r1 r2 r0
  806 00000344         
  807 00000344 4690            mov              r8,r2
  808 00000346 4662            mov              r2,r12
  809 00000348 4683            mov              r11,r0
  810 0000034A 464B            mov              r3,r9
  811 0000034C         reduce2                              ;label definition
  812 0000034C 19D2            adds             r2,r7
  813 0000034E 417B            adcs             r3,r7
  814 00000350 417C            adcs             r4,r7
  815 00000352 2000            movs             r0,#0
  816 00000354 4145            adcs             r5,r0
  817 00000356 4146            adcs             r6,r0
  818 00000358 4141            adcs             r1,r0
  819 0000035A BC01            pop              {r0}
  820 0000035C                 frame            address sp,4
  821 0000035C C07C            stm              r0!,{r2-r6}
  822 0000035E 2501            movs             r5,#1
  823 00000360 403D            ands             r5,r7
  824 00000362 4642            mov              r2,r8
  825 00000364 465B            mov              r3,r11
  826 00000366 416A            adcs             r2,r5
  827 00000368 417B            adcs             r3,r7
  828 0000036A C00E            stm              r0!,{r1-r3}
  829 0000036C         
  830 0000036C BD00            pop              {pc}
  831 0000036E         
  832 0000036E                 endp
  833 0000036E         
  834 0000036E         
  835 0000036E                 if               use_mul_for_sqr == 0
  836 0000036E         
  837 0000036E                 if               use_noninlined_sqr64 == 1
  838 0000036E         
  839 0000036E         P256_sqr64



ARM Macro Assembler    Page 12 


                               proc
  840 0000036E         ; START: sqr 64 Refined Karatsuba
  841 0000036E         ; Input operands in r4,r5
  842 0000036E         ; Result in r0,r1,r2,r3
  843 0000036E         ; Clobbers: r4-r6
  844 0000036E         ; START: sqr 32
  845 0000036E         ; Input operand in r4
  846 0000036E         ; Result in r0 ,r1
  847 0000036E         ; Clobbers: r2, r3
  848 0000036E B2A0            uxth             r0,r4
  849 00000370 0C21            lsrs             r1,r4,#16
  850 00000372 4602            mov              r2,r0
  851 00000374 434A            muls             r2,r1,r2
  852 00000376 4340            muls             r0,r0,r0
  853 00000378 4349            muls             r1,r1,r1
  854 0000037A 0BD3            lsrs             r3,r2,#15
  855 0000037C 0452            lsls             r2,r2,#17
  856 0000037E 1880            adds             r0,r2
  857 00000380 4159            adcs             r1,r3
  858 00000382         ; End: sqr 32
  859 00000382         ; Result in r0 ,r1
  860 00000382 1B64            subs             r4,r5
  861 00000384 41B6            sbcs             r6,r6
  862 00000386 4074            eors             r4,r6
  863 00000388 1BA4            subs             r4,r6
  864 0000038A         ; START: sqr 32
  865 0000038A         ; Input operand in r5
  866 0000038A         ; Result in r2 ,r3
  867 0000038A         ; Clobbers: r5, r6
  868 0000038A B2AA            uxth             r2,r5
  869 0000038C 0C2B            lsrs             r3,r5,#16
  870 0000038E 4615            mov              r5,r2
  871 00000390 435D            muls             r5,r3,r5
  872 00000392 4352            muls             r2,r2,r2
  873 00000394 435B            muls             r3,r3,r3
  874 00000396 0BEE            lsrs             r6,r5,#15
  875 00000398 046D            lsls             r5,r5,#17
  876 0000039A 1952            adds             r2,r5
  877 0000039C 4173            adcs             r3,r6
  878 0000039E         ; End: sqr 32
  879 0000039E         ; Result in r2 ,r3
  880 0000039E 2600            movs             r6,#0
  881 000003A0 1852            adds             r2,r1
  882 000003A2 4173            adcs             r3,r6
  883 000003A4         ; START: sqr 32
  884 000003A4         ; Input operand in r4
  885 000003A4         ; Result in r4 ,r5
  886 000003A4         ; Clobbers: r1, r6
  887 000003A4 0C25            lsrs             r5,r4,#16
  888 000003A6 B2A4            uxth             r4,r4
  889 000003A8 4621            mov              r1,r4
  890 000003AA 4369            muls             r1,r5,r1
  891 000003AC 4364            muls             r4,r4,r4
  892 000003AE 436D            muls             r5,r5,r5
  893 000003B0 0BCE            lsrs             r6,r1,#15
  894 000003B2 0449            lsls             r1,r1,#17
  895 000003B4 1864            adds             r4,r1
  896 000003B6 4175            adcs             r5,r6
  897 000003B8         ; End: sqr 32



ARM Macro Assembler    Page 13 


  898 000003B8         ; Result in r4 ,r5
  899 000003B8 4611            mov              r1,r2
  900 000003BA 1B09            subs             r1,r4
  901 000003BC 41AA            sbcs             r2,r5
  902 000003BE 461D            mov              r5,r3
  903 000003C0 2600            movs             r6,#0
  904 000003C2 41B3            sbcs             r3,r6
  905 000003C4 1809            adds             r1,r0
  906 000003C6 416A            adcs             r2,r5
  907 000003C8 4173            adcs             r3,r6
  908 000003CA         ; END: sqr 64 Refined Karatsuba
  909 000003CA         ; Result in r0,r1,r2,r3
  910 000003CA         ; Leaves r6 zero.
  911 000003CA 4770            bx               lr
  912 000003CC                 endp
  913 000003CC         
  914 000003CC         P256_sqr128
                               proc
  915 000003CC B500            push             {lr}
  916 000003CE                 frame            push {lr}
  917 000003CE         ; sqr 128 Refined Karatsuba
  918 000003CE         ; Input in r4 ... r7
  919 000003CE         ; Result in r0 ... r7
  920 000003CE         ; clobbers all registers
  921 000003CE 4620            mov              r0,r4
  922 000003D0 4629            mov              r1,r5
  923 000003D2 1B80            subs             r0,r6
  924 000003D4 41B9            sbcs             r1,r7
  925 000003D6 4192            sbcs             r2,r2
  926 000003D8 4050            eors             r0,r2
  927 000003DA 4051            eors             r1,r2
  928 000003DC 1A80            subs             r0,r2
  929 000003DE 4191            sbcs             r1,r2
  930 000003E0 4680            mov              r8,r0
  931 000003E2 4689            mov              r9,r1
  932 000003E4 46B2            mov              r10,r6
  933 000003E6         
  934 000003E6 F7FF FFFE       bl               P256_sqr64
  935 000003EA         
  936 000003EA 4654            mov              r4,r10
  937 000003EC 463D            mov              r5,r7
  938 000003EE 4682            mov              r10,r0
  939 000003F0 468B            mov              r11,r1
  940 000003F2 4694            mov              r12,r2
  941 000003F4 461F            mov              r7,r3
  942 000003F6         
  943 000003F6 F7FF FFFE       bl               P256_sqr64
  944 000003FA         
  945 000003FA 4664            mov              r4,r12
  946 000003FC 1900            adds             r0,r4
  947 000003FE 4179            adcs             r1,r7
  948 00000400 4172            adcs             r2,r6
  949 00000402 4173            adcs             r3,r6
  950 00000404 461F            mov              r7,r3
  951 00000406 4684            mov              r12,r0
  952 00000408 4644            mov              r4,r8
  953 0000040A 4688            mov              r8,r1
  954 0000040C 464D            mov              r5,r9
  955 0000040E 4691            mov              r9,r2



ARM Macro Assembler    Page 14 


  956 00000410         
  957 00000410 F7FF FFFE       bl               P256_sqr64
  958 00000414         
  959 00000414 4664            mov              r4,r12
  960 00000416 4645            mov              r5,r8
  961 00000418 464E            mov              r6,r9
  962 0000041A 1A24            subs             r4,r0
  963 0000041C 418D            sbcs             r5,r1
  964 0000041E 4630            mov              r0,r6
  965 00000420 4639            mov              r1,r7
  966 00000422 4190            sbcs             r0,r2
  967 00000424 4199            sbcs             r1,r3
  968 00000426 2200            movs             r2,#0
  969 00000428 4196            sbcs             r6,r2
  970 0000042A 4197            sbcs             r7,r2
  971 0000042C 4652            mov              r2,r10
  972 0000042E 1912            adds             r2,r4
  973 00000430 465B            mov              r3,r11
  974 00000432 416B            adcs             r3,r5
  975 00000434 4664            mov              r4,r12
  976 00000436 4144            adcs             r4,r0
  977 00000438 4645            mov              r5,r8
  978 0000043A 414D            adcs             r5,r1
  979 0000043C 2000            movs             r0,#0
  980 0000043E 4146            adcs             r6,r0
  981 00000440 4147            adcs             r7,r0
  982 00000442 4650            mov              r0,r10
  983 00000444 4659            mov              r1,r11
  984 00000446         ; END: sqr 128 Refined Karatsuba
  985 00000446 BD00            pop              {pc}
  986 00000448                 endp
  987 00000448                 else
 1262                          endif
 1263 00000448         
 1264 00000448         ; ######################
 1265 00000448         ; ASM Square 256 refined karatsuba:
 1266 00000448         ; ######################
 1267 00000448         ; sqr 256 Refined Karatsuba
 1268 00000448         ; pInput in r1
 1269 00000448         ; pResult in r0
 1270 00000448         P256_sqrmod
                               proc
 1271 00000448 B501            push             {r0,lr}
 1272 0000044A                 frame            push {lr}
 1273 0000044A                 frame            address sp,8
 1274 0000044A B090            sub              sp,#64
 1275 0000044C                 frame            address sp,72
 1276 0000044C         ;mov lr,sp
 1277 0000044C B402            push             {r1}
 1278 0000044E                 frame            address sp,76
 1279 0000044E C9F0            ldm              r1!,{r4,r5,r6,r7}
 1280 00000450         
 1281 00000450 F7FF FFFE       bl               P256_sqr128
 1282 00000454         
 1283 00000454 B4F0            push             {r4,r5,r6,r7}
 1284 00000456                 frame            address sp,92
 1285 00000456         ;mov r4,lr
 1286 00000456 AC05            add              r4,sp,#20
 1287 00000458 C40F            stm              r4!,{r0,r1,r2,r3}



ARM Macro Assembler    Page 15 


 1288 0000045A 9C04            ldr              r4,[sp,#16]
 1289 0000045C 3410            adds             r4,#16
 1290 0000045E CCF0            ldm              r4,{r4,r5,r6,r7}
 1291 00000460         
 1292 00000460 F7FF FFFE       bl               P256_sqr128
 1293 00000464         
 1294 00000464 46A0            mov              r8,r4
 1295 00000466 46A9            mov              r9,r5
 1296 00000468 46B2            mov              r10,r6
 1297 0000046A 46BB            mov              r11,r7
 1298 0000046C BCF0            pop              {r4,r5,r6,r7}
 1299 0000046E                 frame            address sp,76
 1300 0000046E 1900            adds             r0,r4
 1301 00000470 4169            adcs             r1,r5
 1302 00000472 4172            adcs             r2,r6
 1303 00000474 417B            adcs             r3,r7
 1304 00000476 4644            mov              r4,r8
 1305 00000478 464D            mov              r5,r9
 1306 0000047A 4656            mov              r6,r10
 1307 0000047C 465F            mov              r7,r11
 1308 0000047E 4680            mov              r8,r0
 1309 00000480 2000            movs             r0,#0
 1310 00000482 4144            adcs             r4,r0
 1311 00000484 4145            adcs             r5,r0
 1312 00000486 4146            adcs             r6,r0
 1313 00000488 4147            adcs             r7,r0
 1314 0000048A 4640            mov              r0,r8
 1315 0000048C B4FF            push             {r0,r1,r2,r3,r4,r5,r6,r7}
 1316 0000048E                 frame            address sp,108
 1317 0000048E 9C08            ldr              r4,[sp,#32]
 1318 00000490 CCFF            ldm              r4,{r0,r1,r2,r3,r4,r5,r6,r7}
 1319 00000492 1A24            subs             r4,r0
 1320 00000494 418D            sbcs             r5,r1
 1321 00000496 4196            sbcs             r6,r2
 1322 00000498 419F            sbcs             r7,r3
 1323 0000049A 4180            sbcs             r0,r0
 1324 0000049C 4044            eors             r4,r0
 1325 0000049E 4045            eors             r5,r0
 1326 000004A0 4046            eors             r6,r0
 1327 000004A2 4047            eors             r7,r0
 1328 000004A4 1A24            subs             r4,r0
 1329 000004A6 4185            sbcs             r5,r0
 1330 000004A8 4186            sbcs             r6,r0
 1331 000004AA 4187            sbcs             r7,r0
 1332 000004AC         
 1333 000004AC F7FF FFFE       bl               P256_sqr128
 1334 000004B0         
 1335 000004B0 43C0            mvns             r0,r0
 1336 000004B2 43C9            mvns             r1,r1
 1337 000004B4 43D2            mvns             r2,r2
 1338 000004B6 43DB            mvns             r3,r3
 1339 000004B8 43E4            mvns             r4,r4
 1340 000004BA 43ED            mvns             r5,r5
 1341 000004BC 43F6            mvns             r6,r6
 1342 000004BE 43FF            mvns             r7,r7
 1343 000004C0 46A0            mov              r8,r4
 1344 000004C2 46A9            mov              r9,r5
 1345 000004C4 46B2            mov              r10,r6
 1346 000004C6 46BB            mov              r11,r7



ARM Macro Assembler    Page 16 


 1347 000004C8 1B24            subs             r4,r4
 1348 000004CA BCF0            pop              {r4,r5,r6,r7}
 1349 000004CC                 frame            address sp,92
 1350 000004CC 4160            adcs             r0,r4
 1351 000004CE 4169            adcs             r1,r5
 1352 000004D0 4172            adcs             r2,r6
 1353 000004D2 417B            adcs             r3,r7
 1354 000004D4 46A4            mov              r12,r4
 1355 000004D6         ;movs r4,#16
 1356 000004D6         ;add r4,lr
 1357 000004D6 AC09            add              r4,sp,#20+16
 1358 000004D8 C40F            stm              r4!,{r0,r1,r2,r3}
 1359 000004DA 4664            mov              r4,r12
 1360 000004DC 4640            mov              r0,r8
 1361 000004DE 4160            adcs             r0,r4
 1362 000004E0 4680            mov              r8,r0
 1363 000004E2 4649            mov              r1,r9
 1364 000004E4 4169            adcs             r1,r5
 1365 000004E6 4689            mov              r9,r1
 1366 000004E8 4652            mov              r2,r10
 1367 000004EA 4172            adcs             r2,r6
 1368 000004EC 4692            mov              r10,r2
 1369 000004EE 465B            mov              r3,r11
 1370 000004F0 417B            adcs             r3,r7
 1371 000004F2 469B            mov              r11,r3
 1372 000004F4 2000            movs             r0,#0
 1373 000004F6 4140            adcs             r0,r0
 1374 000004F8 4684            mov              r12,r0
 1375 000004FA         ;mov r0,lr
 1376 000004FA A805            add              r0,sp,#20
 1377 000004FC C8FF            ldm              r0,{r0,r1,r2,r3,r4,r5,r6,r7}
 1378 000004FE 1900            adds             r0,r4
 1379 00000500 4169            adcs             r1,r5
 1380 00000502 4172            adcs             r2,r6
 1381 00000504 417B            adcs             r3,r7
 1382 00000506         ;movs r4,#16
 1383 00000506         ;add r4,lr
 1384 00000506 AC09            add              r4,sp,#20+16
 1385 00000508 C40F            stm              r4!,{r0,r1,r2,r3}
 1386 0000050A         ;mov lr,r4
 1387 0000050A 4668            mov              r0,r13
 1388 0000050C C8F0            ldm              r0!,{r4,r5,r6,r7}
 1389 0000050E 4641            mov              r1,r8
 1390 00000510 414C            adcs             r4,r1
 1391 00000512 4649            mov              r1,r9
 1392 00000514 414D            adcs             r5,r1
 1393 00000516 4651            mov              r1,r10
 1394 00000518 414E            adcs             r6,r1
 1395 0000051A 4659            mov              r1,r11
 1396 0000051C 414F            adcs             r7,r1
 1397 0000051E         ;mov r0,lr
 1398 0000051E A80D            add              r0,sp,#20+32
 1399 00000520 C0F0            stm              r0!,{r4,r5,r6,r7}
 1400 00000522 BCF0            pop              {r4,r5,r6,r7}
 1401 00000524                 frame            address sp,76
 1402 00000524 4661            mov              r1,r12
 1403 00000526 2200            movs             r2,#0
 1404 00000528 43D2            mvns             r2,r2
 1405 0000052A 4151            adcs             r1,r2



ARM Macro Assembler    Page 17 


 1406 0000052C 110A            asrs             r2,r1,#4
 1407 0000052E 1864            adds             r4,r1
 1408 00000530 4155            adcs             r5,r2
 1409 00000532 4156            adcs             r6,r2
 1410 00000534 4157            adcs             r7,r2
 1411 00000536 C0F0            stm              r0!,{r4,r5,r6,r7}
 1412 00000538 B001            add              sp,#4
 1413 0000053A                 frame            address sp,72
 1414 0000053A E69C            b                reduce
 1415 0000053C                 endp
 1416 0000053C                 endif
 1417 0000053C         
 1418 0000053C         ; *r0 = output, *r1 = a, *r2 = b
 1419 0000053C         P256_addmod
                               proc
 1420 0000053C B501            push             {r0,lr}
 1421 0000053E                 frame            push {lr}
 1422 0000053E                 frame            address sp,8
 1423 0000053E C919            ldm              r1!,{r0,r3,r4}
 1424 00000540 CAE0            ldm              r2!,{r5,r6,r7}
 1425 00000542 1940            adds             r0,r5
 1426 00000544 4173            adcs             r3,r6
 1427 00000546 417C            adcs             r4,r7
 1428 00000548 4680            mov              r8,r0
 1429 0000054A 4699            mov              r9,r3
 1430 0000054C 46A2            mov              r10,r4
 1431 0000054E C960            ldm              r1!,{r5,r6}
 1432 00000550 CA18            ldm              r2!,{r3,r4}
 1433 00000552 415D            adcs             r5,r3
 1434 00000554 4166            adcs             r6,r4
 1435 00000556 C91A            ldm              r1,{r1,r3,r4}
 1436 00000558 CA85            ldm              r2,{r0,r2,r7}
 1437 0000055A 4141            adcs             r1,r0
 1438 0000055C 4153            adcs             r3,r2
 1439 0000055E 417C            adcs             r4,r7
 1440 00000560 2700            movs             r7,#0
 1441 00000562 417F            adcs             r7,r7
 1442 00000564         
 1443 00000564 1A00            subs             r0,r0       ;set r0 to 0 and C 
                                                            to 1
 1444 00000566 4642            mov              r2,r8
 1445 00000568 46B8            mov              r8,r7
 1446 0000056A 464F            mov              r7,r9
 1447 0000056C 46A1            mov              r9,r4
 1448 0000056E 4654            mov              r4,r10
 1449 00000570 4142            adcs             r2,r0
 1450 00000572 4692            mov              r10,r2
 1451 00000574 4147            adcs             r7,r0
 1452 00000576 46BB            mov              r11,r7
 1453 00000578 4144            adcs             r4,r0
 1454 0000057A 4185            sbcs             r5,r0
 1455 0000057C 4186            sbcs             r6,r0
 1456 0000057E 4181            sbcs             r1,r0
 1457 00000580 2001            movs             r0,#1
 1458 00000582 4183            sbcs             r3,r0
 1459 00000584 2000            movs             r0,#0
 1460 00000586 464A            mov              r2,r9
 1461 00000588 4142            adcs             r2,r0
 1462 0000058A 4647            mov              r7,r8



ARM Macro Assembler    Page 18 


 1463 0000058C 4187            sbcs             r7,r0
 1464 0000058E         
 1465 0000058E         ; r10 r11 r4 r5 | r6 r1 r3 r2 | r7
 1466 0000058E         
 1467 0000058E 4698            mov              r8,r3
 1468 00000590 465B            mov              r3,r11
 1469 00000592 4693            mov              r11,r2
 1470 00000594 4652            mov              r2,r10
 1471 00000596         
 1472 00000596         ; r2 r3 r4 r5 | r6 r1 r8 r11 | r7
 1473 00000596         
 1474 00000596 E6D9            b                reduce2
 1475 00000598         
 1476 00000598                 endp
 1477 00000598         
 1478 00000598         ; *r0 = output, *r1 = a, *r2 = b
 1479 00000598         P256_submod
                               proc
 1480 00000598 B501            push             {r0,lr}
 1481 0000059A                 frame            push {lr}
 1482 0000059A                 frame            address sp,8
 1483 0000059A C919            ldm              r1!,{r0,r3,r4}
 1484 0000059C CAE0            ldm              r2!,{r5,r6,r7}
 1485 0000059E 1B40            subs             r0,r5
 1486 000005A0 41B3            sbcs             r3,r6
 1487 000005A2 41BC            sbcs             r4,r7
 1488 000005A4 4680            mov              r8,r0
 1489 000005A6 4699            mov              r9,r3
 1490 000005A8 46A2            mov              r10,r4
 1491 000005AA C960            ldm              r1!,{r5,r6}
 1492 000005AC CA18            ldm              r2!,{r3,r4}
 1493 000005AE 419D            sbcs             r5,r3
 1494 000005B0 41A6            sbcs             r6,r4
 1495 000005B2 C91A            ldm              r1,{r1,r3,r4}
 1496 000005B4 CA85            ldm              r2,{r0,r2,r7}
 1497 000005B6 4181            sbcs             r1,r0
 1498 000005B8 4193            sbcs             r3,r2
 1499 000005BA 41BC            sbcs             r4,r7
 1500 000005BC         
 1501 000005BC 41BF            sbcs             r7,r7
 1502 000005BE         
 1503 000005BE 4642            mov              r2,r8
 1504 000005C0 4698            mov              r8,r3
 1505 000005C2 46A3            mov              r11,r4
 1506 000005C4 464B            mov              r3,r9
 1507 000005C6 4654            mov              r4,r10
 1508 000005C8 E6C0            b                reduce2
 1509 000005CA         
 1510 000005CA                 endp
 1511 000005CA         
 1512 000005CA         ; in: *r0 = output (8 words)
 1513 000005CA         ; out: r0 is preserved
 1514 000005CA         P256_load_1
                               proc
 1515 000005CA 2101            movs             r1,#1
 1516 000005CC C002            stm              r0!,{r1}
 1517 000005CE 2100            movs             r1,#0
 1518 000005D0 2200            movs             r2,#0
 1519 000005D2 C006            stm              r0!,{r1-r2}



ARM Macro Assembler    Page 19 


 1520 000005D4 C006            stm              r0!,{r1-r2}
 1521 000005D6 C006            stm              r0!,{r1-r2}
 1522 000005D8 C002            stm              r0!,{r1}
 1523 000005DA 3820            subs             r0,#32
 1524 000005DC 4770            bx               lr
 1525 000005DE                 endp
 1526 000005DE         
 1527 000005DE         ; in: *r1
 1528 000005DE         ; out: *r0
 1529 000005DE         P256_to_montgomery
                               proc
 1530 000005DE B5F0            push             {r4-r7,lr}
 1531 000005E0                 frame            push {r4-r7,lr}
 1532 000005E0 A201            adr              r2,P256_R2_mod_p
 1533 000005E2 F7FF FFFE       bl               P256_mulmod
 1534 000005E6 BDF0            pop              {r4-r7,pc}
 1535 000005E8                 endp
 1536 000005E8         
 1537 000005E8                 align            4
 1538 000005E8         ; (2^256)^2 mod p
 1539 000005E8         P256_R2_mod_p
 1540 000005E8 00000003        dcd              3
 1541 000005EC 00000000        dcd              0
 1542 000005F0 FFFFFFFF        dcd              0xffffffff
 1543 000005F4 FFFFFFFB        dcd              0xfffffffb
 1544 000005F8 FFFFFFFE        dcd              0xfffffffe
 1545 000005FC FFFFFFFF        dcd              0xffffffff
 1546 00000600 FFFFFFFD        dcd              0xfffffffd
 1547 00000604 00000004        dcd              4
 1548 00000608         
 1549 00000608         ; in: *r1
 1550 00000608         ; out: *r0
 1551 00000608         P256_from_montgomery
                               proc
 1552 00000608 B5F0            push             {r4-r7,lr}
 1553 0000060A                 frame            push {r4-r7,lr}
 1554 0000060A 2200            movs             r2,#0
 1555 0000060C 2300            movs             r3,#0
 1556 0000060E B40C            push             {r2-r3}
 1557 00000610                 frame            address sp,28
 1558 00000610 B40C            push             {r2-r3}
 1559 00000612                 frame            address sp,36
 1560 00000612 B40C            push             {r2-r3}
 1561 00000614                 frame            address sp,44
 1562 00000614 2201            movs             r2,#1
 1563 00000616 B40C            push             {r2-r3}
 1564 00000618                 frame            address sp,52
 1565 00000618 466A            mov              r2,sp
 1566 0000061A F7FF FFFE       bl               P256_mulmod
 1567 0000061E B008            add              sp,#32
 1568 00000620                 frame            address sp,20
 1569 00000620 BDF0            pop              {r4-r7,pc}
 1570 00000622                 endp
 1571 00000622         
 1572 00000622         ; Elliptic curve operations on the NIST curve P256
 1573 00000622         
 1574 00000622         ; Checks if a point is on curve
 1575 00000622         ; in: *r0 = x,y(,scratch) in Montgomery form
 1576 00000622         ; out: r0 = 1 if on curve, otherwise 0



ARM Macro Assembler    Page 20 


 1577 00000622         P256_point_is_on_curve
                               proc
 1578 00000622                 if               use_interpreter == 1
 1579 00000622 B501            push             {r0,lr}
 1580 00000624                 frame            push {lr}
 1581 00000624                 frame            address sp,8
 1582 00000624 A20F            adr              r2,P256_point_is_on_curve_progr
am
 1583 00000626 F7FF FFFE       bl               P256_interpreter
 1584 0000062A 9800            ldr              r0,[sp]
 1585 0000062C 3040            adds             r0,#64
 1586 0000062E A105            adr              r1,P256_b_mont
 1587 00000630 F7FF FFFE       bl               P256_greater_or_equal_than
 1588 00000634 D004            beq              %f0
 1589 00000636 A003            adr              r0,P256_b_mont
 1590 00000638 9900            ldr              r1,[sp]
 1591 0000063A 3140            adds             r1,#64
 1592 0000063C F7FF FFFE       bl               P256_greater_or_equal_than
 1593 00000640         0
 1594 00000640 BD02            pop              {r1,pc}
 1595 00000642                 else
 1656                          endif
 1657 00000642         
 1658 00000642                 endp
 1659 00000642         
 1660 00000642 00 00           align            4
 1661 00000644         P256_b_mont
 1662 00000644 29C4BDDF        dcd              0x29c4bddf
 1663 00000648 D89CDF62        dcd              0xd89cdf62
 1664 0000064C 78843090        dcd              0x78843090
 1665 00000650 ACF005CD        dcd              0xacf005cd
 1666 00000654 F7212ED6        dcd              0xf7212ed6
 1667 00000658 E5A220AB        dcd              0xe5a220ab
 1668 0000065C 04874834        dcd              0x04874834
 1669 00000660 DC30061D        dcd              0xdc30061d
 1670 00000664         
 1671 00000664                 if               use_interpreter == 1
 1672 00000664         P256_point_is_on_curve_program
 1673 00000664 40 20           dcw              0x2040
 1674 00000666 30 21           dcw              0x2130
 1675 00000668 13 11           dcw              0x1113
 1676 0000066A 13 41           dcw              0x4113
 1677 0000066C 13 41           dcw              0x4113
 1678 0000066E 13 41           dcw              0x4113
 1679 00000670 01 45           dcw              0x4501
 1680 00000672 00 00           dcw              0x0000
 1681 00000674                 endif
 1682 00000674         
 1683 00000674         ; input: *r0 = value, *r1 = limit
 1684 00000674         ; output: 1 if value >= limit, otherwise 0
 1685 00000674         P256_greater_or_equal_than
                               proc
 1686 00000674 B570            push             {r4-r6,lr}
 1687 00000676                 frame            push {r4-r6,lr}
 1688 00000676 1B6D            subs             r5,r5       ; set r5 to 0 and C
                                                             to 1
 1689 00000678 43EE            mvns             r6,r5       ; set r6 to -1
 1690 0000067A 2208            movs             r2,#8
 1691 0000067C         0



ARM Macro Assembler    Page 21 


 1692 0000067C C808            ldm              r0!,{r3}
 1693 0000067E C910            ldm              r1!,{r4}
 1694 00000680 41A3            sbcs             r3,r4
 1695 00000682 4432            add              r2,r2,r6
 1696 00000684 4212            tst              r2,r2
 1697 00000686 D1F9            bne              %b0
 1698 00000688         
 1699 00000688 416D            adcs             r5,r5
 1700 0000068A 4628            mov              r0,r5
 1701 0000068C BD70            pop              {r4-r6,pc}
 1702 0000068E                 endp
 1703 0000068E         
 1704 0000068E         ; in: *r0 = output location, *r1 = input, *r2 = 0/1, *r3
                        = m
 1705 0000068E         ; if r2 = 0, then *r0 is set to *r1
 1706 0000068E         ; if r2 = 1, then *r0 is set to m - *r1
 1707 0000068E         ; note that *r1 should be in the range [1,m-1]
 1708 0000068E         ; out: r0 and r1 will have advanced 32 bytes, r2 will re
                       main as the input
 1709 0000068E         P256_negate_mod_m_if
                               proc
 1710 0000068E B5F0            push             {r4-r7,lr}
 1711 00000690                 frame            push {r4-r7,lr}
 1712 00000690 2401            movs             r4,#1
 1713 00000692 4265            rsbs             r5,r4,#0    ; r5=-1
 1714 00000694 46A8            mov              r8,r5
 1715 00000696 1AA4            subs             r4,r4,r2    ; r4=!r2, C=1
 1716 00000698 2608            movs             r6,#8
 1717 0000069A         0
 1718 0000069A C920            ldm              r1!,{r5}
 1719 0000069C CB80            ldm              r3!,{r7}
 1720 0000069E 41AF            sbcs             r7,r5
 1721 000006A0 4357            muls             r7,r2,r7
 1722 000006A2 4365            muls             r5,r4,r5
 1723 000006A4 442F            add              r7,r7,r5
 1724 000006A6 C080            stm              r0!,{r7}
 1725 000006A8 4446            add              r6,r6,r8
 1726 000006AA 4236            tst              r6,r6
 1727 000006AC D1F5            bne              %b0
 1728 000006AE         
 1729 000006AE BDF0            pop              {r4-r7,pc}
 1730 000006B0                 endp
 1731 000006B0         
 1732 000006B0         ; copies 8 words
 1733 000006B0         ; in: *r0 = result, *r1 = input
 1734 000006B0         ; out: *r0 = end of result, *r1 = end of input
 1735 000006B0         P256_copy32
                               proc
 1736 000006B0 B530            push             {r4-r5,lr}
 1737 000006B2                 frame            push {r4-r5,lr}
 1738 000006B2 C93C            ldm              r1!,{r2-r5}
 1739 000006B4 C03C            stm              r0!,{r2-r5}
 1740 000006B6 C93C            ldm              r1!,{r2-r5}
 1741 000006B8 C03C            stm              r0!,{r2-r5}
 1742 000006BA BD30            pop              {r4-r5,pc}
 1743 000006BC                 endp
 1744 000006BC         
 1745 000006BC         
 1746 000006BC         ; copies 32 bytes



ARM Macro Assembler    Page 22 


 1747 000006BC         ; in: *r0 = result, *r1 = input
 1748 000006BC         ; out: *r0 = end of result, *r1 = end of input
 1749 000006BC         P256_copy32_unaligned
                               proc
 1750 000006BC 2220            movs             r2,#32
 1751 000006BE 4402            add              r2,r0
 1752 000006C0         0
 1753 000006C0 780B            ldrb             r3,[r1]
 1754 000006C2 7003            strb             r3,[r0]
 1755 000006C4 3101            adds             r1,#1
 1756 000006C6 3001            adds             r0,#1
 1757 000006C8 4290            cmp              r0,r2
 1758 000006CA D1F9            bne              %b0
 1759 000006CC 4770            bx               lr
 1760 000006CE                 endp
 1761 000006CE         
 1762 000006CE         ; Selects one of many values
 1763 000006CE         ; *r0 = output, *r1 = table, r2 = index to choose [0..7]
                       
 1764 000006CE         P256_select
                               proc
 1765 000006CE B5F4            push             {r2,r4-r7,lr}
 1766 000006D0                 frame            push {r4-r7,lr}
 1767 000006D0                 frame            address sp,24
 1768 000006D0         
 1769 000006D0 2604            movs             r6,#4
 1770 000006D2         0
 1771 000006D2 B441            push             {r0,r6}
 1772 000006D4                 frame            address sp,32
 1773 000006D4         
 1774 000006D4 2700            movs             r7,#0
 1775 000006D6 46B8            mov              r8,r7
 1776 000006D8 46B9            mov              r9,r7
 1777 000006DA 46BA            mov              r10,r7
 1778 000006DC 46BB            mov              r11,r7
 1779 000006DE 46BC            mov              r12,r7
 1780 000006E0 46BE            mov              lr,r7
 1781 000006E2         1
 1782 000006E2 9802            ldr              r0,[sp,#8]
 1783 000006E4 4078            eors             r0,r7
 1784 000006E6 F3EF 8000       mrs              r0,apsr
 1785 000006EA 0F80            lsrs             r0,#30
 1786 000006EC         
 1787 000006EC C91C            ldm              r1!,{r2-r4}
 1788 000006EE 4342            muls             r2,r0,r2
 1789 000006F0 4343            muls             r3,r0,r3
 1790 000006F2 4344            muls             r4,r0,r4
 1791 000006F4 4490            add              r8,r2
 1792 000006F6 4499            add              r9,r3
 1793 000006F8 44A2            add              r10,r4
 1794 000006FA C91C            ldm              r1!,{r2-r4}
 1795 000006FC 4342            muls             r2,r0,r2
 1796 000006FE 4343            muls             r3,r0,r3
 1797 00000700 4344            muls             r4,r0,r4
 1798 00000702 4493            add              r11,r2
 1799 00000704 449C            add              r12,r3
 1800 00000706 44A6            add              lr,r4
 1801 00000708         
 1802 00000708 3148            adds             r1,#72



ARM Macro Assembler    Page 23 


 1803 0000070A 3701            adds             r7,#1
 1804 0000070C 2F08            cmp              r7,#8
 1805 0000070E D1E8            bne              %b1
 1806 00000710         
 1807 00000710 BC41            pop              {r0,r6}
 1808 00000712                 frame            address sp,24
 1809 00000712 4642            mov              r2,r8
 1810 00000714 464B            mov              r3,r9
 1811 00000716 4654            mov              r4,r10
 1812 00000718 C01C            stm              r0!,{r2-r4}
 1813 0000071A 465A            mov              r2,r11
 1814 0000071C 4663            mov              r3,r12
 1815 0000071E 4674            mov              r4,lr
 1816 00000720 C01C            stm              r0!,{r2-r4}
 1817 00000722 39F8            subs             r1,#248
 1818 00000724 39F8            subs             r1,#248
 1819 00000726 39F8            subs             r1,#248
 1820 00000728 3E01            subs             r6,#1
 1821 0000072A D1D2            bne              %b0
 1822 0000072C         
 1823 0000072C BDF1            pop              {r0,r4-r7,pc}
 1824 0000072E                 endp
 1825 0000072E         
 1826 0000072E         ; Doubles the point in Jacobian form (integers are in Mo
                       ntgomery form)
 1827 0000072E         ; *r0 = out, *r1 = in
 1828 0000072E         P256_double_j
                               proc
 1829 0000072E                 if               use_interpreter == 1
 1830 0000072E A20E            adr              r2,P256_double_j_prog
 1831 00000730 E7FE            b                P256_interpreter
 1832 00000732                 else
 2000                          endif
 2001 00000732                 endp
 2002 00000732         
 2003 00000732         
 2004 00000732         ; Adds or subtracts points in Jacobian form (integers ar
                       e in Montgomery form)
 2005 00000732         ; The first operand is located in *r0, the second in *r1
                        (may not overlap)
 2006 00000732         ; The result is stored at *r0
 2007 00000732         ;
 2008 00000732         ; Requirements:
 2009 00000732         ; - no operand is the point at infinity
 2010 00000732         ; - both operand must be different
 2011 00000732         ; - one operand must not be the negation of the other
 2012 00000732         ; If requirements are not met, the returned Z point will
                        be 0
 2013 00000732         P256_add_j
                               proc
 2014 00000732                 if               use_interpreter == 1
 2015 00000732 A201            adr              r2,P256_add_j_prog
 2016 00000734 E7FE            b                P256_interpreter
 2017 00000736                 else
 2184                          endif
 2185 00000736                 endp
 2186 00000736         
 2187 00000736                 if               use_interpreter == 1
 2188 00000736 00 00           align            4



ARM Macro Assembler    Page 24 


 2189 00000738         P256_add_j_prog
 2190 00000738 80 20           dcw              0x2080
 2191 0000073A 30 13           dcw              0x1330
 2192 0000073C 80 10           dcw              0x1080
 2193 0000073E 40 14           dcw              0x1440
 2194 00000740 50 21           dcw              0x2150
 2195 00000742 61 10           dcw              0x1061
 2196 00000744 51 11           dcw              0x1151
 2197 00000746 71 11           dcw              0x1171
 2198 00000748 30 43           dcw              0x4330
 2199 0000074A 30 22           dcw              0x2230
 2200 0000074C 53 15           dcw              0x1553
 2201 0000074E 85 15           dcw              0x1585
 2202 00000750 32 13           dcw              0x1332
 2203 00000752 41 44           dcw              0x4441
 2204 00000754 02 10           dcw              0x1002
 2205 00000756 40 22           dcw              0x2240
 2206 00000758 13 11           dcw              0x1113
 2207 0000075A 23 43           dcw              0x4323
 2208 0000075C 00 32           dcw              0x3200
 2209 0000075E 32 43           dcw              0x4332
 2210 00000760 03 42           dcw              0x4203
 2211 00000762 42 12           dcw              0x1242
 2212 00000764 21 44           dcw              0x4421
 2213 00000766 00 00           dcw              0x0000
 2214 00000768         
 2215 00000768                 align            4
 2216 00000768         P256_double_j_prog
 2217 00000768 80 20           dcw              0x2080
 2218 0000076A 78 15           dcw              0x1578
 2219 0000076C 60 31           dcw              0x3160
 2220 0000076E 60 40           dcw              0x4060
 2221 00000770 01 10           dcw              0x1001
 2222 00000772 00 51           dcw              0x5100
 2223 00000774 01 30           dcw              0x3001
 2224 00000776 00 21           dcw              0x2100
 2225 00000778 70 24           dcw              0x2470
 2226 0000077A 40 22           dcw              0x2240
 2227 0000077C 64 14           dcw              0x1464
 2228 0000077E 44 33           dcw              0x3344
 2229 00000780 13 43           dcw              0x4313
 2230 00000782 43 41           dcw              0x4143
 2231 00000784 01 10           dcw              0x1001
 2232 00000786 02 44           dcw              0x4402
 2233 00000788 00 00           dcw              0x0000
 2234 0000078A         
 2235 0000078A         ; in: *r0 = output, *r1 = input
 2236 0000078A         P256_div2mod
                               proc
 2237 0000078A 4681            mov              r9,r0
 2238 0000078C 460F            mov              r7,r1
 2239 0000078E CF0F            ldm              r7!,{r0-r3}
 2240 00000790 07C6            lsls             r6,r0,#31
 2241 00000792 17F5            asrs             r5,r6,#31
 2242 00000794 0FF6            lsrs             r6,#31
 2243 00000796 2400            movs             r4,#0
 2244 00000798 1940            adds             r0,r5
 2245 0000079A 4169            adcs             r1,r5
 2246 0000079C 416A            adcs             r2,r5



ARM Macro Assembler    Page 25 


 2247 0000079E 4163            adcs             r3,r4
 2248 000007A0 B40F            push             {r0-r3}
 2249 000007A2                 frame            address sp,76
 2250 000007A2 CF0F            ldm              r7!,{r0-r3}
 2251 000007A4 4160            adcs             r0,r4
 2252 000007A6 4161            adcs             r1,r4
 2253 000007A8 4172            adcs             r2,r6
 2254 000007AA 416B            adcs             r3,r5
 2255 000007AC 2400            movs             r4,#0
 2256 000007AE 4164            adcs             r4,r4
 2257 000007B0 07E7            lsls             r7,r4,#31
 2258 000007B2 085E            lsrs             r6,r3,#1
 2259 000007B4 4337            orrs             r7,r6
 2260 000007B6 07DE            lsls             r6,r3,#31
 2261 000007B8 0855            lsrs             r5,r2,#1
 2262 000007BA 432E            orrs             r6,r5
 2263 000007BC 07D5            lsls             r5,r2,#31
 2264 000007BE 084C            lsrs             r4,r1,#1
 2265 000007C0 4325            orrs             r5,r4
 2266 000007C2 07CC            lsls             r4,r1,#31
 2267 000007C4 0843            lsrs             r3,r0,#1
 2268 000007C6 431C            orrs             r4,r3
 2269 000007C8 07C3            lsls             r3,r0,#31
 2270 000007CA 4648            mov              r0,r9
 2271 000007CC 3010            adds             r0,#16
 2272 000007CE C0F0            stm              r0!,{r4-r7}
 2273 000007D0 461F            mov              r7,r3
 2274 000007D2 BC0F            pop              {r0-r3}
 2275 000007D4 085E            lsrs             r6,r3,#1
 2276 000007D6 4337            orrs             r7,r6
 2277 000007D8 07DE            lsls             r6,r3,#31
 2278 000007DA 0855            lsrs             r5,r2,#1
 2279 000007DC 432E            orrs             r6,r5
 2280 000007DE 07D5            lsls             r5,r2,#31
 2281 000007E0 084C            lsrs             r4,r1,#1
 2282 000007E2 4325            orrs             r5,r4
 2283 000007E4 07CC            lsls             r4,r1,#31
 2284 000007E6 0843            lsrs             r3,r0,#1
 2285 000007E8 431C            orrs             r4,r3
 2286 000007EA 4648            mov              r0,r9
 2287 000007EC C0F0            stm              r0!,{r4-r7}
 2288 000007EE 4770            bx               lr
 2289 000007F0                 endp
 2290 000007F0         
 2291 000007F0         ; in: *r0 = op1, *r1 = op2, *r2 = program
 2292 000007F0         ; program is an array of 16-bit integers, ending with 0x
                       0000
 2293 000007F0         ; in an opcode, bit 12-15 is function to execute (exit, 
                       mul, sqr, add, sub, div2),
 2294 000007F0         ; bit 8-11 is dest, bit 4-7 is first operand, bit 0-3 is
                        second operand
 2295 000007F0         ; the operand is encoded like this:
 2296 000007F0         ; operand 0-2 is temporary variable 0-2
 2297 000007F0         ; operand 3-5 is op1[0], op1[1], op1[2]
 2298 000007F0         ; operand 6-8 is op2[0], op2[1], op2[2]
 2299 000007F0         ; each variable is 32 bytes
 2300 000007F0         ; for a function taking less than two parameters, the ex
                       tra parameters are ignored
 2301 000007F0         P256_interpreter



ARM Macro Assembler    Page 26 


                               proc
 2302 000007F0 B5F0            push             {r4-r7,lr}
 2303 000007F2                 frame            push {r4-r7,lr}
 2304 000007F2         
 2305 000007F2 B098            sub              sp,#96
 2306 000007F4                 frame            address sp,116
 2307 000007F4         
 2308 000007F4 2320            movs             r3,#32
 2309 000007F6 460C            mov              r4,r1
 2310 000007F8 18CD            adds             r5,r1,r3
 2311 000007FA 18EE            adds             r6,r5,r3
 2312 000007FC B470            push             {r4-r6}
 2313 000007FE                 frame            address sp,128
 2314 000007FE 4604            mov              r4,r0
 2315 00000800 18C5            adds             r5,r0,r3
 2316 00000802 18EE            adds             r6,r5,r3
 2317 00000804 B470            push             {r4-r6}
 2318 00000806                 frame            address sp,140
 2319 00000806 AC06            add              r4,sp,#24
 2320 00000808 18E5            adds             r5,r4,r3
 2321 0000080A 18EE            adds             r6,r5,r3
 2322 0000080C B470            push             {r4-r6}
 2323 0000080E                 frame            address sp,152
 2324 0000080E         
 2325 0000080E         0
 2326 0000080E 243C            movs             r4,#0x3c
 2327 00000810 466D            mov              r5,sp
 2328 00000812 8813            ldrh             r3,[r2]
 2329 00000814 3202            adds             r2,#2
 2330 00000816 B404            push             {r2}
 2331 00000818                 frame            address sp,156
 2332 00000818 009A            lsls             r2,r3,#2
 2333 0000081A 4022            ands             r2,r4
 2334 0000081C 58AA            ldr              r2,[r5,r2]
 2335 0000081E 0899            lsrs             r1,r3,#2
 2336 00000820 4021            ands             r1,r4
 2337 00000822 5869            ldr              r1,[r5,r1]
 2338 00000824 0998            lsrs             r0,r3,#6
 2339 00000826 4020            ands             r0,r4
 2340 00000828 5828            ldr              r0,[r5,r0]
 2341 0000082A A504            adr              r5,P256_functions-4
 2342 0000082C 0A9E            lsrs             r6,r3,#10
 2343 0000082E 4026            ands             r6,r4
 2344 00000830 D003            beq              %f1
 2345 00000832 59AE            ldr              r6,[r5,r6]
 2346 00000834 47B0            blx              r6
 2347 00000836 BC04            pop              {r2}
 2348 00000838                 frame            address sp,152
 2349 00000838 E7E9            b                %b0
 2350 0000083A         1
 2351 0000083A                 frame            address sp,156
 2352 0000083A B022            add              sp,#136
 2353 0000083C                 frame            address sp,20
 2354 0000083C BDF0            pop              {r4-r7,pc}
 2355 0000083E                 endp
 2356 0000083E         
 2357 0000083E 00 00           align            4
 2358 00000840         P256_functions
 2359 00000840 00000000        dcd              P256_mulmod ;1



ARM Macro Assembler    Page 27 


 2360 00000844 00000000        dcd              P256_sqrmod ;2
 2361 00000848 00000000        dcd              P256_addmod ;3
 2362 0000084C 00000000        dcd              P256_submod ;4
 2363 00000850 00000000        dcd              P256_div2mod ;5
 2364 00000854         
 2365 00000854                 endif
 2366 00000854         
 2367 00000854                 if               use_smaller_modinv == 1
 2420 00000854         
 2421 00000854         ; in: *r0 = input/output, r1 = count, *r2 = operand for 
                       final multiplication
 2422 00000854         P256_sqrmod_many_and_mulmod
                               proc
 2423 00000854 B505            push             {r0,r2,lr}
 2424 00000856                 frame            push {lr}
 2425 00000856                 frame            address sp,12
 2426 00000856 2900            cmp              r1,#0
 2427 00000858 D007            beq              %f1
 2428 0000085A         0
 2429 0000085A B402            push             {r1}
 2430 0000085C                 frame            address sp,16
 2431 0000085C 9801            ldr              r0,[sp,#4]
 2432 0000085E 4601            mov              r1,r0
 2433 00000860 F7FF FFFE       bl               P256_sqrmod
 2434 00000864 BC02            pop              {r1}
 2435 00000866                 frame            address sp,12
 2436 00000866 3901            subs             r1,#1
 2437 00000868 D1F7            bne              %b0
 2438 0000086A         1
 2439 0000086A BC03            pop              {r0,r1}
 2440 0000086C                 frame            address sp,4
 2441 0000086C 4602            mov              r2,r0
 2442 0000086E F7FF FFFE       bl               P256_mulmod
 2443 00000872 BD00            pop              {pc}
 2444 00000874                 endp
 2445 00000874         
 2446 00000874         
 2447 00000874         ; in: *r0 = value in/out
 2448 00000874         ; for modinv, call input a, then if a = A * R % p, then 
                       it calculates A^-1 * R % p = (a/R)^-1 * R % p = R^2 / a 
                       % p
 2449 00000874         P256_modinv
                               proc
 2450 00000874 B501            push             {r0,lr}
 2451 00000876                 frame            push {lr}
 2452 00000876                 frame            address sp,8
 2453 00000876         
 2454 00000876 C8FF            ldm              r0,{r0-r7}
 2455 00000878 B4FF            push             {r0-r7}
 2456 0000087A                 frame            address sp,40
 2457 0000087A         
 2458 0000087A         ; t = a^2*a
 2459 0000087A 9808            ldr              r0,[sp,#32]
 2460 0000087C 2101            movs             r1,#1
 2461 0000087E 466A            mov              r2,sp
 2462 00000880 F7FF FFFE       bl               P256_sqrmod_many_and_mulmod
 2463 00000884 9808            ldr              r0,[sp,#32]
 2464 00000886 C8FF            ldm              r0,{r0-r7}
 2465 00000888 B4FF            push             {r0-r7}



ARM Macro Assembler    Page 28 


 2466 0000088A                 frame            address sp,72
 2467 0000088A         
 2468 0000088A         ; a4_2 = a2_0^(2^2)
 2469 0000088A         
 2470 0000088A 9810            ldr              r0,[sp,#64]
 2471 0000088C 4601            mov              r1,r0
 2472 0000088E F7FF FFFE       bl               P256_sqrmod
 2473 00000892 9810            ldr              r0,[sp,#64]
 2474 00000894 4601            mov              r1,r0
 2475 00000896 F7FF FFFE       bl               P256_sqrmod
 2476 0000089A 9810            ldr              r0,[sp,#64]
 2477 0000089C C8FF            ldm              r0,{r0-r7}
 2478 0000089E B4FF            push             {r0-r7}
 2479 000008A0                 frame            address sp,104
 2480 000008A0         
 2481 000008A0         ; a4_0 = a4_2*a2_0
 2482 000008A0 9818            ldr              r0,[sp,#96]
 2483 000008A2 4669            mov              r1,sp
 2484 000008A4 AA08            add              r2,sp,#32
 2485 000008A6 F7FF FFFE       bl               P256_mulmod
 2486 000008AA A808            add              r0,sp,#32
 2487 000008AC 9918            ldr              r1,[sp,#96]
 2488 000008AE F7FF FFFE       bl               P256_copy32
 2489 000008B2         
 2490 000008B2 9F18            ldr              r7,[sp,#96]
 2491 000008B4 2400            movs             r4,#0
 2492 000008B6         0
 2493 000008B6 A20C            adr              r2,P256_invtbl
 2494 000008B8 5710            ldrsb            r0,[r2,r4]
 2495 000008BA 3201            adds             r2,#1
 2496 000008BC 5D15            ldrb             r5,[r2,r4]
 2497 000008BE 0086            lsls             r6,r0,#2
 2498 000008C0 D504            bpl              %f1
 2499 000008C2 B088            sub              sp,#32
 2500 000008C4                 frame            address sp,200 ; not always cor
                                                            rect
 2501 000008C4 4668            mov              r0,sp
 2502 000008C6 4639            mov              r1,r7
 2503 000008C8 F7FF FFFE       bl               P256_copy32
 2504 000008CC         1
 2505 000008CC 4638            mov              r0,r7
 2506 000008CE B2F1            uxtb             r1,r6
 2507 000008D0 462A            mov              r2,r5
 2508 000008D2 446A            add              r2,sp
 2509 000008D4 B490            push             {r4,r7}
 2510 000008D6                 frame            address sp,208 ; not always cor
                                                            rect
 2511 000008D6 F7FF FFFE       bl               P256_sqrmod_many_and_mulmod
 2512 000008DA BC90            pop              {r4,r7}
 2513 000008DC                 frame            address sp,200 ; not always cor
                                                            rect
 2514 000008DC 3402            adds             r4,#2
 2515 000008DE 2C16            cmp              r4,#22
 2516 000008E0 D1E9            bne              %b0
 2517 000008E2         
 2518 000008E2 B031            add              sp,#6*32+4
 2519 000008E4                 frame            address sp,4
 2520 000008E4         
 2521 000008E4 BD00            pop              {pc}



ARM Macro Assembler    Page 29 


 2522 000008E6         
 2523 000008E6                 endp
 2524 000008E6         
 2525 000008E6 00 00           align            4
 2526 000008E8         P256_invtbl
 2527 000008E8 01              dcb              ((8-4)>>2)
 2528 000008E9 20              dcb              32
 2529 000008EA         
 2530 000008EA 82              dcb              ((16-8)>>2)+128
 2531 000008EB 00              dcb              0
 2532 000008EC         
 2533 000008EC 84              dcb              (16>>2)+128
 2534 000008ED 00              dcb              0
 2535 000008EE         
 2536 000008EE 88              dcb              (32>>2)+128
 2537 000008EF A0              dcb              5*32
 2538 000008F0         
 2539 000008F0 20              dcb              (192-64)>>2
 2540 000008F1 00              dcb              0
 2541 000008F2         
 2542 000008F2 08              dcb              (224-192)>>2
 2543 000008F3 00              dcb              0
 2544 000008F4         
 2545 000008F4 04              dcb              (240-224)>>2
 2546 000008F5 20              dcb              32
 2547 000008F6         
 2548 000008F6 02              dcb              (248-240)>>2
 2549 000008F7 40              dcb              64
 2550 000008F8         
 2551 000008F8 01              dcb              (252-248)>>2
 2552 000008F9 80              dcb              128
 2553 000008FA         
 2554 000008FA 01              dcb              (256-252)>>2
 2555 000008FB 60              dcb              96
 2556 000008FC         
 2557 000008FC 00              dcb              0
 2558 000008FD A0              dcb              5*32
 2559 000008FE         
 2560 000008FE                 endif
 2561 000008FE         
 2562 000008FE         
 2563 000008FE         ; *r0 = output affine montgomery/input jacobian montgome
                       ry
 2564 000008FE         P256_jacobian_to_affine
                               proc
 2565 000008FE B5F1            push             {r0,r4-r7,lr}
 2566 00000900                 frame            push {r4-r7,lr}
 2567 00000900                 frame            address sp,24
 2568 00000900         
 2569 00000900 3040            adds             r0,#64
 2570 00000902 C8FF            ldm              r0,{r0-r7}
 2571 00000904                 if               use_smaller_modinv == 0
 2572 00000904 B4FF            push             {r0-r7}
 2573 00000906                 frame            address sp,56
 2574 00000906 4668            mov              r0,sp
 2575 00000908 F7FF FFFE       bl               P256_modinv
 2576 0000090C                 else
 2580                          endif
 2581 0000090C         



ARM Macro Assembler    Page 30 


 2582 0000090C 4669            mov              r1,sp
 2583 0000090E B088            sub              sp,#32
 2584 00000910                 frame            address sp,88
 2585 00000910 4668            mov              r0,sp
 2586 00000912 F7FF FFFE       bl               P256_sqrmod
 2587 00000916         
 2588 00000916 A908            add              r1,sp,#32
 2589 00000918 466A            mov              r2,sp
 2590 0000091A 4608            mov              r0,r1
 2591 0000091C F7FF FFFE       bl               P256_mulmod
 2592 00000920         
 2593 00000920 4669            mov              r1,sp
 2594 00000922 9810            ldr              r0,[sp,#64]
 2595 00000924 4602            mov              r2,r0
 2596 00000926 F7FF FFFE       bl               P256_mulmod
 2597 0000092A         
 2598 0000092A A908            add              r1,sp,#32
 2599 0000092C 9810            ldr              r0,[sp,#64]
 2600 0000092E 3020            adds             r0,#32
 2601 00000930 4602            mov              r2,r0
 2602 00000932 F7FF FFFE       bl               P256_mulmod
 2603 00000936         
 2604 00000936 B011            add              sp,#68
 2605 00000938                 frame            address sp,20
 2606 00000938         
 2607 00000938 BDF0            pop              {r4-r7,pc}
 2608 0000093A                 endp
 2609 0000093A         
 2610 0000093A         ; performs r0 := abs(r0)
 2611 0000093A         P256_abs_int
                               proc
 2612 0000093A 4242            rsbs             r2,r0,#0
 2613 0000093C 17C3            asrs             r3,r0,#31
 2614 0000093E 4013            ands             r3,r2
 2615 00000940 17D2            asrs             r2,#31
 2616 00000942 4010            ands             r0,r2
 2617 00000944 4318            orrs             r0,r0,r3
 2618 00000946 4770            bx               lr
 2619 00000948                 endp
 2620 00000948         
 2621 00000948         ; in: *r0 = output, *r1 = point, *r2 = scalar, r3 = incl
                       ude y in result (1/0)
 2622 00000948         ; out: r0 = 1 on success, 0 if invalid point or scalar
 2623 00000948         P256_pointmult
                               proc
 2624 00000948                 export           P256_pointmult
 2625 00000948 B5F0            push             {r4-r7,lr}
 2626 0000094A                 frame            push {r4-r7,lr}
 2627 0000094A 4644            mov              r4,r8
 2628 0000094C 464D            mov              r5,r9
 2629 0000094E 4656            mov              r6,r10
 2630 00000950 465F            mov              r7,r11
 2631 00000952 B4F3            push             {r0-r1,r4-r7}
 2632 00000954                 frame            address sp,44
 2633 00000954                 frame            save {r8-r11},-36
 2634 00000954 B0C0            sub              sp,#256
 2635 00000956                 frame            address sp,300
 2636 00000956         
 2637 00000956 041E            lsls             r6,r3,#16



ARM Macro Assembler    Page 31 


 2638 00000958         
 2639 00000958         ; load scalar into an aligned position
 2640 00000958 A808            add              r0,sp,#32
 2641 0000095A 4611            mov              r1,r2
 2642 0000095C F7FF FFFE       bl               P256_copy32_unaligned
 2643 00000960         
 2644 00000960         ; fail if scalar == 0
 2645 00000960 4668            mov              r0,sp
 2646 00000962 F7FF FFFE       bl               P256_load_1
 2647 00000966 A808            add              r0,sp,#32
 2648 00000968 4669            mov              r1,sp
 2649 0000096A F7FF FFFE       bl               P256_greater_or_equal_than
 2650 0000096E D101            bne              %f1
 2651 00000970         0
 2652 00000970 B042            add              sp,#256+8
 2653 00000972                 frame            address sp,36
 2654 00000972 E0C4            b                %f10
 2655 00000974                 frame            address sp,300
 2656 00000974         1
 2657 00000974         ; fail if not (scalar < n)
 2658 00000974 A808            add              r0,sp,#32
 2659 00000976 A170            adr              r1,P256_order
 2660 00000978 F7FF FFFE       bl               P256_greater_or_equal_than
 2661 0000097C 3801            subs             r0,#1
 2662 0000097E D0F7            beq              %b0
 2663 00000980         
 2664 00000980         ; select scalar if scalar is odd and -scalar mod n if sc
                       alar is even
 2665 00000980 4668            mov              r0,sp
 2666 00000982 A908            add              r1,sp,#32
 2667 00000984 680A            ldr              r2,[r1]
 2668 00000986 2301            movs             r3,#1
 2669 00000988 401A            ands             r2,r3
 2670 0000098A 405A            eors             r2,r3
 2671 0000098C 4416            add              r6,r2       ; save original par
                                                            ity of scalar
 2672 0000098E A36A            adr              r3,P256_order
 2673 00000990 F7FF FFFE       bl               P256_negate_mod_m_if
 2674 00000994         
 2675 00000994         ; stack layout (initially offset 768):
 2676 00000994         ; 0-767: table of jacobian points P, 3P, 5P, ..., 15P
 2677 00000994         ; 768-863: current point (in jacobian form)
 2678 00000994         ; 864-927: scalar rewritten into 4-bit window, each elem
                       ent having an odd signed value
 2679 00000994         ; 928-1023: extracted selected point from the table
 2680 00000994         ; 1024-1027: output pointer
 2681 00000994         ; 1028-1031: input point
 2682 00000994         
 2683 00000994         ; rewrite scalar into 4-bit window where every value is 
                       odd
 2684 00000994 A918            add              r1,sp,#864-768
 2685 00000996 9800            ldr              r0,[sp]
 2686 00000998 0700            lsls             r0,#28
 2687 0000099A 0F00            lsrs             r0,#28
 2688 0000099C 2201            movs             r2,#1
 2689 0000099E 466C            mov              r4,sp
 2690 000009A0 2501            movs             r5,#1
 2691 000009A2         2
 2692 000009A2 0853            lsrs             r3,r2,#1



ARM Macro Assembler    Page 32 


 2693 000009A4 5CE3            ldrb             r3,[r4,r3]
 2694 000009A6 07D7            lsls             r7,r2,#31
 2695 000009A8 0F7F            lsrs             r7,#29
 2696 000009AA 40FB            lsrs             r3,r7
 2697 000009AC 071B            lsls             r3,#28
 2698 000009AE 0F1B            lsrs             r3,#28
 2699 000009B0 2701            movs             r7,#1
 2700 000009B2 401F            ands             r7,r3
 2701 000009B4 406F            eors             r7,r5
 2702 000009B6 013F            lsls             r7,#4
 2703 000009B8 1BC0            subs             r0,r7
 2704 000009BA 7008            strb             r0,[r1]
 2705 000009BC 3101            adds             r1,#1
 2706 000009BE 432B            orrs             r3,r5
 2707 000009C0 4618            mov              r0,r3
 2708 000009C2 3201            adds             r2,#1
 2709 000009C4 2A40            cmp              r2,#64
 2710 000009C6 D1EC            bne              %b2
 2711 000009C8 7008            strb             r0,[r1]
 2712 000009CA         
 2713 000009CA         ; load point into an aligned position
 2714 000009CA 9941            ldr              r1,[sp,#1028-768]
 2715 000009CC B0E0            sub              sp,#384
 2716 000009CE                 frame            address sp,684
 2717 000009CE B0E0            sub              sp,#384
 2718 000009D0                 frame            address sp,1068
 2719 000009D0 4668            mov              r0,sp
 2720 000009D2 F7FF FFFE       bl               P256_copy32_unaligned
 2721 000009D6 F7FF FFFE       bl               P256_copy32_unaligned
 2722 000009DA         
 2723 000009DA         ; fail if not x, y < p
 2724 000009DA 4668            mov              r0,sp
 2725 000009DC A14E            adr              r1,P256_p
 2726 000009DE F7FF FFFE       bl               P256_greater_or_equal_than
 2727 000009E2 3801            subs             r0,#1
 2728 000009E4 D102            bne              %f4
 2729 000009E6         3
 2730 000009E6 B060            add              sp,#384
 2731 000009E8                 frame            address sp,684
 2732 000009E8 B060            add              sp,#384
 2733 000009EA                 frame            address sp,300
 2734 000009EA E7C1            b                %b0
 2735 000009EC                 frame            address sp,1068
 2736 000009EC         4
 2737 000009EC A808            add              r0,sp,#32
 2738 000009EE A14A            adr              r1,P256_p
 2739 000009F0 F7FF FFFE       bl               P256_greater_or_equal_than
 2740 000009F4 3801            subs             r0,#1
 2741 000009F6 D0F6            beq              %b3
 2742 000009F8         
 2743 000009F8         ; convert basepoint x, y to montgomery form,
 2744 000009F8         ; and place result as first element in table of Jacobian
                        points
 2745 000009F8         
 2746 000009F8 4668            mov              r0,sp
 2747 000009FA 4669            mov              r1,sp
 2748 000009FC F7FF FFFE       bl               P256_to_montgomery
 2749 00000A00 A808            add              r0,sp,#32
 2750 00000A02 A908            add              r1,sp,#32



ARM Macro Assembler    Page 33 


 2751 00000A04 F7FF FFFE       bl               P256_to_montgomery
 2752 00000A08         
 2753 00000A08         ; check that the basepoint lies on the curve
 2754 00000A08 4668            mov              r0,sp
 2755 00000A0A F7FF FFFE       bl               P256_point_is_on_curve
 2756 00000A0E 2800            cmp              r0,#0
 2757 00000A10 D0E9            beq              %b3
 2758 00000A12         
 2759 00000A12         ; load montgomery 1 for Z
 2760 00000A12 A810            add              r0,sp,#64
 2761 00000A14 F7FF FFFE       bl               P256_load_1
 2762 00000A18 4601            mov              r1,r0
 2763 00000A1A F7FF FFFE       bl               P256_to_montgomery
 2764 00000A1E         
 2765 00000A1E         ; temporarily calculate 2P
 2766 00000A1E A8A8            add              r0,sp,#7*96
 2767 00000A20 4669            mov              r1,sp
 2768 00000A22 F7FF FFFE       bl               P256_double_j
 2769 00000A26         
 2770 00000A26         ; calculate rest of the table (3P, 5P, ..., 15P)
 2771 00000A26 AC18            add              r4,sp,#96
 2772 00000A28 2507            movs             r5,#7
 2773 00000A2A         5
 2774 00000A2A 4620            mov              r0,r4
 2775 00000A2C A9A8            add              r1,sp,#7*96
 2776 00000A2E F7FF FFFE       bl               P256_copy32
 2777 00000A32 F7FF FFFE       bl               P256_copy32
 2778 00000A36 F7FF FFFE       bl               P256_copy32
 2779 00000A3A 4620            mov              r0,r4
 2780 00000A3C 4601            mov              r1,r0
 2781 00000A3E 3960            subs             r1,#96
 2782 00000A40 F7FF FFFE       bl               P256_add_j
 2783 00000A44 3460            adds             r4,#96
 2784 00000A46 3D01            subs             r5,#1
 2785 00000A48 D1EF            bne              %b5
 2786 00000A4A         
 2787 00000A4A         ; select the initial current point based on the first hi
                       ghest 4 scalar bits
 2788 00000A4A AFE8            add              r7,sp,#928
 2789 00000A4C 3F01            subs             r7,#1
 2790 00000A4E 7838            ldrb             r0,[r7]
 2791 00000A50 3F01            subs             r7,#1
 2792 00000A52 B240            sxtb             r0,r0
 2793 00000A54 F7FF FFFE       bl               P256_abs_int
 2794 00000A58 0842            lsrs             r2,r0,#1
 2795 00000A5A A8C0            add              r0,sp,#768
 2796 00000A5C 4669            mov              r1,sp
 2797 00000A5E F7FF FFFE       bl               P256_select
 2798 00000A62         
 2799 00000A62         ; main loop iterating from index 62 to 0 of the windowed
                        scalar
 2800 00000A62 ADD8            add              r5,sp,#864
 2801 00000A64         6
 2802 00000A64 2404            movs             r4,#4
 2803 00000A66         7
 2804 00000A66 A8C0            add              r0,sp,#768
 2805 00000A68 4601            mov              r1,r0
 2806 00000A6A F7FF FFFE       bl               P256_double_j
 2807 00000A6E 3C01            subs             r4,#1



ARM Macro Assembler    Page 34 


 2808 00000A70 D1F9            bne              %b7
 2809 00000A72         
 2810 00000A72         ; select the point to add, and then add to the current p
                       oint
 2811 00000A72 7838            ldrb             r0,[r7]
 2812 00000A74 3F01            subs             r7,#1
 2813 00000A76 B240            sxtb             r0,r0
 2814 00000A78 0FC4            lsrs             r4,r0,#31
 2815 00000A7A F7FF FFFE       bl               P256_abs_int
 2816 00000A7E 0842            lsrs             r2,r0,#1
 2817 00000A80 A8E8            add              r0,sp,#928
 2818 00000A82 4669            mov              r1,sp
 2819 00000A84 F7FF FFFE       bl               P256_select
 2820 00000A88 A8F0            add              r0,sp,#960
 2821 00000A8A 4601            mov              r1,r0
 2822 00000A8C 4622            mov              r2,r4
 2823 00000A8E A322            adr              r3,P256_p
 2824 00000A90 F7FF FFFE       bl               P256_negate_mod_m_if
 2825 00000A94 42AF            cmp              r7,r5
 2826 00000A96 DA03            bge              %f8
 2827 00000A98         ; see note below
 2828 00000A98 A8A8            add              r0,sp,#672
 2829 00000A9A A9C0            add              r1,sp,#768
 2830 00000A9C F7FF FFFE       bl               P256_double_j
 2831 00000AA0         8
 2832 00000AA0 A8C0            add              r0,sp,#768
 2833 00000AA2 A9E8            add              r1,sp,#928
 2834 00000AA4 F7FF FFFE       bl               P256_add_j
 2835 00000AA8 42AF            cmp              r7,r5
 2836 00000AAA DADB            bge              %b6
 2837 00000AAC         
 2838 00000AAC         ; Note: ONLY for the scalars 2 and -2 mod n, the last ad
                       dition will
 2839 00000AAC         ; be an addition where both input values are equal. The 
                       addition algorithm
 2840 00000AAC         ; fails for such a case (returns Z=0) and we must theref
                       ore use the doubling
 2841 00000AAC         ; formula. Both values are computed and then the correct
                        value is selected
 2842 00000AAC         ; in constant time based on whether the addition formula
                        returned Z=0.
 2843 00000AAC         ; Obviously if the scalar (private key) is properly rand
                       omized, this would
 2844 00000AAC         ; (with extremely high probability), never occur.
 2845 00000AAC 4668            mov              r0,sp
 2846 00000AAE F7FF FFFE       bl               P256_load_1
 2847 00000AB2 A8D0            add              r0,sp,#768+64
 2848 00000AB4 4669            mov              r1,sp
 2849 00000AB6 F7FF FFFE       bl               P256_greater_or_equal_than
 2850 00000ABA 1D82            adds             r2,r0,#6
 2851 00000ABC A8E8            add              r0,sp,#928
 2852 00000ABE A918            add              r1,sp,#96
 2853 00000AC0 F7FF FFFE       bl               P256_select
 2854 00000AC4         
 2855 00000AC4 B074            add              sp,#464     ;928/2
 2856 00000AC6                 frame            address sp,604
 2857 00000AC6 B074            add              sp,#464
 2858 00000AC8                 frame            address sp,140
 2859 00000AC8         



ARM Macro Assembler    Page 35 


 2860 00000AC8 4668            mov              r0,sp
 2861 00000ACA F7FF FFFE       bl               P256_jacobian_to_affine
 2862 00000ACE         
 2863 00000ACE 4668            mov              r0,sp
 2864 00000AD0 4669            mov              r1,sp
 2865 00000AD2 F7FF FFFE       bl               P256_from_montgomery
 2866 00000AD6 A808            add              r0,sp,#32
 2867 00000AD8 A908            add              r1,sp,#32
 2868 00000ADA F7FF FFFE       bl               P256_from_montgomery
 2869 00000ADE         
 2870 00000ADE A808            add              r0,sp,#32
 2871 00000AE0 A908            add              r1,sp,#32
 2872 00000AE2 B2F2            uxtb             r2,r6
 2873 00000AE4 A30C            adr              r3,P256_p
 2874 00000AE6 F7FF FFFE       bl               P256_negate_mod_m_if
 2875 00000AEA         
 2876 00000AEA 9818            ldr              r0,[sp,#96]
 2877 00000AEC 4669            mov              r1,sp
 2878 00000AEE F7FF FFFE       bl               P256_copy32_unaligned
 2879 00000AF2 0C36            lsrs             r6,#16
 2880 00000AF4 D001            beq              %f9
 2881 00000AF6 F7FF FFFE       bl               P256_copy32_unaligned
 2882 00000AFA         9
 2883 00000AFA         
 2884 00000AFA 2001            movs             r0,#1
 2885 00000AFC B01A            add              sp,#96+8
 2886 00000AFE                 frame            address sp,36
 2887 00000AFE         10
 2888 00000AFE BCF0            pop              {r4-r7}
 2889 00000B00                 frame            address sp,20
 2890 00000B00 46A0            mov              r8,r4
 2891 00000B02 46A9            mov              r9,r5
 2892 00000B04 46B2            mov              r10,r6
 2893 00000B06 46BB            mov              r11,r7
 2894 00000B08 BDF0            pop              {r4-r7,pc}
 2895 00000B0A                 endp
 2896 00000B0A         
 2897 00000B0A         ; in: *r0 = output, *r1 = private key scalar
 2898 00000B0A         ; out: r0 = 1 on success, 0 if scalar is out of range
 2899 00000B0A         P256_ecdh_keygen
                               proc
 2900 00000B0A                 export           P256_ecdh_keygen
 2901 00000B0A 460A            mov              r2,r1
 2902 00000B0C A112            adr              r1,P256_basepoint
 2903 00000B0E 2301            movs             r3,#1
 2904 00000B10 E7FE            b                P256_pointmult
 2905 00000B12                 endp
 2906 00000B12         
 2907 00000B12         ; in: *r0 = output, *r1 = other's public point, *r2 = pr
                       ivate key scalar
 2908 00000B12         ; out: r0 = 1 on success, 0 if invalid public point or p
                       rivate key scalar
 2909 00000B12         P256_ecdh_shared_secret
                               proc
 2910 00000B12                 export           P256_ecdh_shared_secret
 2911 00000B12 2300            movs             r3,#0
 2912 00000B14 E7FE            b                P256_pointmult
 2913 00000B16                 endp
 2914 00000B16         



ARM Macro Assembler    Page 36 


 2915 00000B16 00 00           align            4
 2916 00000B18         P256_p
 2917 00000B18 FFFFFFFF        dcd              0xffffffff
 2918 00000B1C FFFFFFFF        dcd              0xffffffff
 2919 00000B20 FFFFFFFF        dcd              0xffffffff
 2920 00000B24 00000000        dcd              0
 2921 00000B28 00000000        dcd              0
 2922 00000B2C 00000000        dcd              0
 2923 00000B30 00000001        dcd              1
 2924 00000B34 FFFFFFFF        dcd              0xffffffff
 2925 00000B38         
 2926 00000B38         P256_order
 2927 00000B38 FC632551        dcd              0xFC632551
 2928 00000B3C F3B9CAC2        dcd              0xF3B9CAC2
 2929 00000B40 A7179E84        dcd              0xA7179E84
 2930 00000B44 BCE6FAAD        dcd              0xBCE6FAAD
 2931 00000B48 FFFFFFFF        dcd              0xFFFFFFFF
 2932 00000B4C FFFFFFFF        dcd              0xFFFFFFFF
 2933 00000B50 00000000        dcd              0
 2934 00000B54 FFFFFFFF        dcd              0xFFFFFFFF
 2935 00000B58         
 2936 00000B58         P256_basepoint
 2937 00000B58 D898C296        dcd              0xD898C296
 2938 00000B5C F4A13945        dcd              0xF4A13945
 2939 00000B60 2DEB33A0        dcd              0x2DEB33A0
 2940 00000B64 77037D81        dcd              0x77037D81
 2941 00000B68 63A440F2        dcd              0x63A440F2
 2942 00000B6C F8BCE6E5        dcd              0xF8BCE6E5
 2943 00000B70 E12C4247        dcd              0xE12C4247
 2944 00000B74 6B17D1F2        dcd              0x6B17D1F2
 2945 00000B78 37BF51F5        dcd              0x37BF51F5
 2946 00000B7C CBB64068        dcd              0xCBB64068
 2947 00000B80 6B315ECE        dcd              0x6B315ECE
 2948 00000B84 2BCE3357        dcd              0x2BCE3357
 2949 00000B88 7C0F9E16        dcd              0x7C0F9E16
 2950 00000B8C 8EE7EB4A        dcd              0x8EE7EB4A
 2951 00000B90 FE1A7F9B        dcd              0xFE1A7F9B
 2952 00000B94 4FE342E2        dcd              0x4FE342E2
 2953 00000B98         
 2954 00000B98                 end
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --apcs=interw
ork --depend=.\objects\p256-cortex-m0-ecdh-keil.d -o.\objects\p256-cortex-m0-ec
dh-keil.o -IE:\project\Verify\newSDK_A2\Trunk\example\ble_mesh\mesh_lpn\RTE\_Ta
rget_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil_v5\ARM\PAC
K\ARM\CMSIS\5.0.0\Device\ARM\ARMCM0\Include --predefine="__MICROLIB SETA 1" --p
redefine="__UVISION_VERSION SETA 522" --predefine="_RTE_ SETA 1" --predefine="A
RMCM0 SETA 1" --list=.\listings\p256-cortex-m0-ecdh-keil.lst ..\..\..\component
s\ethermind\external\crypto\asm_ecdh_p256\P256-cortex-m0-ecdh-keil.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

 00000640

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 0000067C

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 0000069A

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 000006C0

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 000006D2

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 0000080E

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 0000085A

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 000008B6

Symbol: 



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 00000970

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 000006E2

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 0000083A

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 0000086A

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 000008CC

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 00000974

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 000009A2

Symbol: 
   Definitions
      None
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      None
Warning:  undefinedComment:  unused
 000009E6

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 000009EC

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 00000A2A

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 00000A64

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 00000A66

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 00000AA0

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 00000AFA

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 00000AFE



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
.text 00000000

Symbol: .text
   Definitions
      At line 33 in file ..\..\..\components\ethermind\external\crypto\asm_ecdh
_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      None
Comment: .text unused
P256_R2_mod_p 000005E8

Symbol: P256_R2_mod_p
   Definitions
      At line 1539 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 1532 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_R2_mod_p used once
P256_abs_int 0000093A

Symbol: P256_abs_int
   Definitions
      At line 2611 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2793 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2815 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_add_j 00000732

Symbol: P256_add_j
   Definitions
      At line 2013 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2782 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2834 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_add_j_prog 00000738

Symbol: P256_add_j_prog
   Definitions
      At line 2189 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2015 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Comment: P256_add_j_prog used once
P256_addmod 0000053C

Symbol: P256_addmod
   Definitions
      At line 1419 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2361 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_addmod used once
P256_b_mont 00000644

Symbol: P256_b_mont
   Definitions
      At line 1661 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 1586 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 1589 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_basepoint 00000B58

Symbol: P256_basepoint
   Definitions
      At line 2936 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2902 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_basepoint used once
P256_copy32 000006B0

Symbol: P256_copy32
   Definitions
      At line 1735 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2488 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2503 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2776 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2777 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2778 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_copy32_unaligned 000006BC

Symbol: P256_copy32_unaligned
   Definitions
      At line 1749 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2642 in file ..\..\..\components\ethermind\external\crypto\asm_ec



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2720 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2721 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2878 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2881 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_div2mod 0000078A

Symbol: P256_div2mod
   Definitions
      At line 2236 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2363 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_div2mod used once
P256_double_j 0000072E

Symbol: P256_double_j
   Definitions
      At line 1828 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2768 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2806 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2830 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_double_j_prog 00000768

Symbol: P256_double_j_prog
   Definitions
      At line 2216 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 1830 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_double_j_prog used once
P256_ecdh_keygen 00000B0A

Symbol: P256_ecdh_keygen
   Definitions
      At line 2899 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2900 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_ecdh_keygen used once
P256_ecdh_shared_secret 00000B12

Symbol: P256_ecdh_shared_secret
   Definitions
      At line 2909 in file ..\..\..\components\ethermind\external\crypto\asm_ec



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2910 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_ecdh_shared_secret used once
P256_from_montgomery 00000608

Symbol: P256_from_montgomery
   Definitions
      At line 1551 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2865 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2868 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_functions 00000840

Symbol: P256_functions
   Definitions
      At line 2358 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2341 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_functions used once
P256_greater_or_equal_than 00000674

Symbol: P256_greater_or_equal_than
   Definitions
      At line 1685 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 1587 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 1592 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2649 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2660 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2726 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2739 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2849 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_interpreter 000007F0

Symbol: P256_interpreter
   Definitions
      At line 2301 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 1583 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 1831 in file ..\..\..\components\ethermind\external\crypto\asm_ec



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2016 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_invtbl 000008E8

Symbol: P256_invtbl
   Definitions
      At line 2526 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2493 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_invtbl used once
P256_jacobian_to_affine 000008FE

Symbol: P256_jacobian_to_affine
   Definitions
      At line 2564 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2861 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_jacobian_to_affine used once
P256_load_1 000005CA

Symbol: P256_load_1
   Definitions
      At line 1514 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2646 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2761 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2846 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_modinv 00000874

Symbol: P256_modinv
   Definitions
      At line 2449 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2575 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_modinv used once
P256_mul128 000000A4

Symbol: P256_mul128
   Definitions
      At line 129 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 496 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s
      At line 516 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

      At line 592 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s

P256_mul64 00000000

Symbol: P256_mul64
   Definitions
      At line 40 in file ..\..\..\components\ethermind\external\crypto\asm_ecdh
_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 219 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s
      At line 335 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s
      At line 433 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s

P256_mulmod 00000134

Symbol: P256_mulmod
   Definitions
      At line 478 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 1533 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 1566 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2359 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2442 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2485 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2591 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2596 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2602 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_negate_mod_m_if 0000068E

Symbol: P256_negate_mod_m_if
   Definitions
      At line 1709 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2673 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2824 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2874 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_order 00000B38

Symbol: P256_order
   Definitions



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

      At line 2926 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2659 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2672 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_p 00000B18

Symbol: P256_p
   Definitions
      At line 2916 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2725 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2738 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2823 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2873 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_point_is_on_curve 00000622

Symbol: P256_point_is_on_curve
   Definitions
      At line 1577 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2755 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_point_is_on_curve used once
P256_point_is_on_curve_program 00000664

Symbol: P256_point_is_on_curve_program
   Definitions
      At line 1672 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 1582 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_point_is_on_curve_program used once
P256_pointmult 00000948

Symbol: P256_pointmult
   Definitions
      At line 2623 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2624 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2904 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2912 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_select 000006CE



ARM Macro Assembler    Page 11 Alphabetic symbol ordering
Relocatable symbols


Symbol: P256_select
   Definitions
      At line 1764 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2797 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2819 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2853 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_sqr128 000003CC

Symbol: P256_sqr128
   Definitions
      At line 914 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 1281 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 1292 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 1333 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_sqr64 0000036E

Symbol: P256_sqr64
   Definitions
      At line 839 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 934 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s
      At line 943 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s
      At line 957 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s

P256_sqrmod 00000448

Symbol: P256_sqrmod
   Definitions
      At line 1270 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2360 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2433 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2472 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2475 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2586 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s




ARM Macro Assembler    Page 12 Alphabetic symbol ordering
Relocatable symbols

P256_sqrmod_many_and_mulmod 00000854

Symbol: P256_sqrmod_many_and_mulmod
   Definitions
      At line 2422 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2462 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2511 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

P256_submod 00000598

Symbol: P256_submod
   Definitions
      At line 1479 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2362 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: P256_submod used once
P256_to_montgomery 000005DE

Symbol: P256_to_montgomery
   Definitions
      At line 1529 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 2748 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2751 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 2763 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

reduce 00000276

Symbol: reduce
   Definitions
      At line 673 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 1414 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
Comment: reduce used once
reduce2 0000034C

Symbol: reduce2
   Definitions
      At line 811 in file ..\..\..\components\ethermind\external\crypto\asm_ecd
h_p256\P256-cortex-m0-ecdh-keil.s
   Uses
      At line 1474 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s
      At line 1508 in file ..\..\..\components\ethermind\external\crypto\asm_ec
dh_p256\P256-cortex-m0-ecdh-keil.s

64 symbols



ARM Macro Assembler    Page 13 Alphabetic symbol ordering
Relocatable symbols

403 symbols in table
