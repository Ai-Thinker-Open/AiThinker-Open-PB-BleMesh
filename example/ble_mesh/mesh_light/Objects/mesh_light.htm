<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mesh_light.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mesh_light.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Mar 03 14:21:25 2020
<BR><P>
<H3>Maximum Stack Usage =       2024 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
health_server_cb &rArr; MS_access_reply &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5c]">GAPRole_ProcessEvent</a> from peripheral.o(i.GAPRole_ProcessEvent) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[59]">GAP_ProcessEvent</a> from rom1Sym.txt(ABSOLUTE) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[5d]">GATTServApp_ProcessEvent</a> from gattservapp.o(i.GATTServApp_ProcessEvent) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[5b]">GATT_ProcessEvent</a> from rom1Sym.txt(ABSOLUTE) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[56]">HCI_ProcessEvent</a> from rom1Sym.txt(ABSOLUTE) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[65]">HardFault_IRQHandler</a> from main.o(i.HardFault_IRQHandler) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[58]">L2CAP_ProcessEvent</a> from rom1Sym.txt(ABSOLUTE) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[55]">LL_ProcessEvent</a> from rom1Sym.txt(ABSOLUTE) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[45]">LL_SetScanControl1</a> from patch.o(i.LL_SetScanControl1) referenced from patch.o(i.init_config)
 <LI><a href="#[24]">P256_addmod</a> from p256-cortex-m0-ecdh-keil.o(.text) referenced from p256-cortex-m0-ecdh-keil.o(.text)
 <LI><a href="#[26]">P256_div2mod</a> from p256-cortex-m0-ecdh-keil.o(.text) referenced from p256-cortex-m0-ecdh-keil.o(.text)
 <LI><a href="#[22]">P256_mulmod</a> from p256-cortex-m0-ecdh-keil.o(.text) referenced from p256-cortex-m0-ecdh-keil.o(.text)
 <LI><a href="#[23]">P256_sqrmod</a> from p256-cortex-m0-ecdh-keil.o(.text) referenced from p256-cortex-m0-ecdh-keil.o(.text)
 <LI><a href="#[25]">P256_submod</a> from p256-cortex-m0-ecdh-keil.o(.text) referenced from p256-cortex-m0-ecdh-keil.o(.text)
 <LI><a href="#[54]">ProcessUartData</a> from blemesh.o(i.ProcessUartData) referenced from blemesh.o(.constdata)
 <LI><a href="#[20]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[5a]">SM_ProcessEvent</a> from rom1Sym.txt(ABSOLUTE) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[27]">SystemInit</a> from system_armcm0.o(i.SystemInit) referenced from startup_armcm0.o(.text)
 <LI><a href="#[38]">UI_app_config_server_callback</a> from appl_sample_example_phylight.o(i.UI_app_config_server_callback) referenced from appl_sample_example_phylight.o(i.appl_mesh_sample)
 <LI><a href="#[37]">UI_gatt_iface_event_pl_cb</a> from appl_sample_example_phylight.o(i.UI_gatt_iface_event_pl_cb) referenced from appl_sample_example_phylight.o(i.appl_mesh_sample)
 <LI><a href="#[2f]">UI_generic_onoff_server_cb</a> from appl_sample_example_phylight.o(i.UI_generic_onoff_server_cb) referenced from appl_sample_example_phylight.o(i.UI_register_generic_onoff_model_server)
 <LI><a href="#[1d]">UI_health_self_test_00</a> from appl_sample_example_phylight.o(i.UI_health_self_test_00) referenced 2 times from appl_sample_example_phylight.o(.data)
 <LI><a href="#[1e]">UI_health_self_test_01</a> from appl_sample_example_phylight.o(i.UI_health_self_test_01) referenced 2 times from appl_sample_example_phylight.o(.data)
 <LI><a href="#[1f]">UI_health_self_test_FF</a> from appl_sample_example_phylight.o(i.UI_health_self_test_FF) referenced 2 times from appl_sample_example_phylight.o(.data)
 <LI><a href="#[2e]">UI_health_server_cb</a> from appl_sample_example_phylight.o(i.UI_health_server_cb) referenced from appl_sample_example_phylight.o(i.UI_register_foundation_model_servers)
 <LI><a href="#[30]">UI_light_hsl_server_cb</a> from appl_sample_example_phylight.o(i.UI_light_hsl_server_cb) referenced from appl_sample_example_phylight.o(i.UI_register_light_hsl_model_server)
 <LI><a href="#[31]">UI_prov_callback</a> from appl_sample_example_phylight.o(i.UI_prov_callback) referenced from appl_sample_example_phylight.o(i.UI_register_prov)
 <LI><a href="#[32]">UI_proxy_callback</a> from appl_sample_example_phylight.o(i.UI_proxy_callback) referenced from appl_sample_example_phylight.o(i.UI_register_proxy)
 <LI><a href="#[33]">UI_scene_server_cb</a> from appl_sample_example_phylight.o(i.UI_scene_server_cb) referenced from appl_sample_example_phylight.o(i.UI_register_scene_model_server)
 <LI><a href="#[34]">UI_vendor_example_server_cb</a> from appl_sample_example_phylight.o(i.UI_vendor_example_server_cb) referenced from appl_sample_example_phylight.o(i.UI_register_vendor_defined_model_server)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_armcm0.o(.text)
 <LI><a href="#[36]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[7b]">access_pkt_in</a> from libethermind_mesh_core.lib(i.access_pkt_in) referenced from libethermind_mesh_core.lib(i.ms_access_init)
 <LI><a href="#[48]">app_sleep_process</a> from main.o(i.app_sleep_process) referenced from main.o(i.main)
 <LI><a href="#[47]">app_wakeup_process</a> from main.o(i.app_wakeup_process) referenced from main.o(i.main)
 <LI><a href="#[1]">appl_mesh_prov_data_in_wt_cb</a> from blebrr_pl.o(i.appl_mesh_prov_data_in_wt_cb) referenced 2 times from blebrr_pl.o(.data)
 <LI><a href="#[2]">appl_mesh_prov_data_out_ccd_cb</a> from blebrr_pl.o(i.appl_mesh_prov_data_out_ccd_cb) referenced 2 times from blebrr_pl.o(.data)
 <LI><a href="#[5]">appl_mesh_prov_data_out_notif_cb</a> from blebrr_pl.o(i.appl_mesh_prov_data_out_notif_cb) referenced 2 times from blebrr_pl.o(.data)
 <LI><a href="#[6]">appl_mesh_prov_notif_config_status_cb</a> from blebrr_pl.o(i.appl_mesh_prov_notif_config_status_cb) referenced 2 times from blebrr_pl.o(.data)
 <LI><a href="#[3]">appl_mesh_proxy_data_in_wt_cb</a> from blebrr_pl.o(i.appl_mesh_proxy_data_in_wt_cb) referenced 2 times from blebrr_pl.o(.data)
 <LI><a href="#[4]">appl_mesh_proxy_data_out_ccd_cb</a> from blebrr_pl.o(i.appl_mesh_proxy_data_out_ccd_cb) referenced 2 times from blebrr_pl.o(.data)
 <LI><a href="#[7]">appl_mesh_proxy_data_out_notif_cb</a> from blebrr_pl.o(i.appl_mesh_proxy_data_out_notif_cb) referenced 2 times from blebrr_pl.o(.data)
 <LI><a href="#[8]">appl_mesh_proxy_notif_config_status_cb</a> from blebrr_pl.o(i.appl_mesh_proxy_notif_config_status_cb) referenced 2 times from blebrr_pl.o(.data)
 <LI><a href="#[39]">appl_prov_callback</a> from appl_prov.o(i.appl_prov_callback) referenced from appl_prov.o(i.appl_prov_register)
 <LI><a href="#[5e]">bleMesh_ProcessEvent</a> from blemesh.o(i.bleMesh_ProcessEvent) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[3b]">blebrr_adv_send</a> from blebrr.o(i.blebrr_adv_send) referenced from blebrr.o(i.blebrr_register)
 <LI><a href="#[3c]">blebrr_adv_sleep</a> from blebrr.o(i.blebrr_adv_sleep) referenced from blebrr.o(i.blebrr_register)
 <LI><a href="#[3d]">blebrr_adv_wakeup</a> from blebrr.o(i.blebrr_adv_wakeup) referenced from blebrr.o(i.blebrr_register)
 <LI><a href="#[3e]">blebrr_advscan_timeout_handler</a> from blebrr.o(i.blebrr_advscan_timeout_handler) referenced from blebrr.o(i.blebrr_timer_start)
 <LI><a href="#[3a]">blebrr_gatt_send</a> from blebrr_gatt.o(i.blebrr_gatt_send) referenced from blebrr_gatt.o(i.blebrr_pl_gatt_connection)
 <LI><a href="#[67]">brr_read_data_ind</a> from libethermind_mesh_core.lib(i.brr_read_data_ind) referenced from libethermind_mesh_core.lib(i.MS_brr_add_bearer)
 <LI><a href="#[51]">cli_demo_reset</a> from blemesh.o(i.cli_demo_reset) referenced from blemesh.o(.constdata)
 <LI><a href="#[53]">cli_disp_key</a> from blemesh.o(i.cli_disp_key) referenced from blemesh.o(.constdata)
 <LI><a href="#[52]">cli_internal_status</a> from blemesh.o(i.cli_internal_status) referenced from blemesh.o(.constdata)
 <LI><a href="#[69]">config_server_cb</a> from libethermind_mesh_core.lib(i.config_server_cb) referenced from libethermind_mesh_core.lib(i.MS_config_server_init)
 <LI><a href="#[4b]">cry_generate_random_bytes</a> from cry.o(i.cry_generate_random_bytes) referenced from cry.o(i.phyplus_ecdh_init)
 <LI><a href="#[4d]">devInfo_ReadAttrCB</a> from devinfoservice.o(i.devInfo_ReadAttrCB) referenced from devinfoservice.o(.constdata)
 <LI><a href="#[35]">fputc</a> from em_platform.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[35]">fputc</a> from em_platform.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[29]">gattServApp_HandleConnStatusCB</a> from gattservapp.o(i.gattServApp_HandleConnStatusCB) referenced from gattservapp.o(i.GATTServApp_Init)
 <LI><a href="#[4e]">gattServApp_WriteAttrCB</a> from gattservapp.o(i.gattServApp_WriteAttrCB) referenced from gattservapp.o(.constdata)
 <LI><a href="#[6a]">generic_onoff_server_cb</a> from libethermind_mesh_models.lib(i.generic_onoff_server_cb) referenced from libethermind_mesh_models.lib(i.MS_generic_onoff_server_init)
 <LI><a href="#[6b]">generic_onoff_server_publish_timout_cb</a> from libethermind_mesh_models.lib(i.generic_onoff_server_publish_timout_cb) referenced from libethermind_mesh_models.lib(i.MS_generic_onoff_server_init)
 <LI><a href="#[4f]">ggs_ReadAttrCB</a> from gapgattserver.o(i.ggs_ReadAttrCB) referenced from gapgattserver.o(.constdata)
 <LI><a href="#[50]">ggs_WriteAttrCB</a> from gapgattserver.o(i.ggs_WriteAttrCB) referenced from gapgattserver.o(.constdata)
 <LI><a href="#[40]">gpio_sleep_handler</a> from gpio.o(i.gpio_sleep_handler) referenced from gpio.o(i.hal_gpio_init)
 <LI><a href="#[3f]">gpio_wakeup_handler</a> from gpio.o(i.gpio_wakeup_handler) referenced from gpio.o(i.hal_gpio_init)
 <LI><a href="#[66]">hal_UART0_IRQHandler</a> from uart.o(i.hal_UART0_IRQHandler) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[62]">hal_pwrmgr_sleep_process</a> from pwrmgr.o(i.hal_pwrmgr_sleep_process) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[63]">hal_pwrmgr_wakeup_process</a> from pwrmgr.o(i.hal_pwrmgr_wakeup_process) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[76]">health_server_attention_timeout_handler</a> from libethermind_mesh_core.lib(i.health_server_attention_timeout_handler) referenced from libethermind_mesh_core.lib(i.health_server_attention_timeout_handler)
 <LI><a href="#[76]">health_server_attention_timeout_handler</a> from libethermind_mesh_core.lib(i.health_server_attention_timeout_handler) referenced from libethermind_mesh_core.lib(i.health_server_set_attention)
 <LI><a href="#[6c]">health_server_cb</a> from libethermind_mesh_core.lib(i.health_server_cb) referenced from libethermind_mesh_core.lib(i.MS_health_server_init)
 <LI><a href="#[6d]">health_server_publish_timout_cb</a> from libethermind_mesh_core.lib(i.health_server_publish_timout_cb) referenced from libethermind_mesh_core.lib(i.MS_health_server_init)
 <LI><a href="#[6e]">light_hsl_server_cb</a> from libethermind_mesh_models.lib(i.light_hsl_server_cb) referenced from libethermind_mesh_models.lib(i.MS_light_hsl_server_init)
 <LI><a href="#[6f]">light_hsl_server_publish_timout_cb</a> from libethermind_mesh_models.lib(i.light_hsl_server_publish_timout_cb) referenced from libethermind_mesh_models.lib(i.MS_light_hsl_server_init)
 <LI><a href="#[46]">llSetupAdv1</a> from patch.o(i.llSetupAdv1) referenced from patch.o(i.init_config)
 <LI><a href="#[43]">ll_hw_go1</a> from patch.o(i.ll_hw_go1) referenced from patch.o(i.init_config)
 <LI><a href="#[78]">ltrn_ack_timeout_handler</a> from libethermind_mesh_core.lib(i.ltrn_ack_timeout_handler) referenced from libethermind_mesh_core.lib(i.ltrn_sar_start_ack_timer)
 <LI><a href="#[77]">ltrn_incomplete_timeout_handler</a> from libethermind_mesh_core.lib(i.ltrn_incomplete_timeout_handler) referenced from libethermind_mesh_core.lib(i.ltrn_sar_restart_incomplete_timer)
 <LI><a href="#[7c]">ltrn_pkt_in</a> from libethermind_mesh_core.lib(i.ltrn_pkt_in) referenced from libethermind_mesh_core.lib(i.ms_ltrn_init)
 <LI><a href="#[79]">ltrn_rtx_timeout_handler</a> from libethermind_mesh_core.lib(i.ltrn_rtx_timeout_handler) referenced from libethermind_mesh_core.lib(i.ltrn_sar_transmit_segments)
 <LI><a href="#[21]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[49]">mesh_prov_handle_conn</a> from mesh_services.o(i.mesh_prov_handle_conn) referenced from mesh_services.o(i.mesh_prov_init)
 <LI><a href="#[5f]">mesh_prov_write_cb</a> from mesh_services.o(i.mesh_prov_write_cb) referenced from mesh_services.o(.constdata)
 <LI><a href="#[4a]">mesh_proxy_handle_conn</a> from mesh_services.o(i.mesh_proxy_handle_conn) referenced from mesh_services.o(i.mesh_proxy_init)
 <LI><a href="#[60]">mesh_proxy_write_cb</a> from mesh_services.o(i.mesh_proxy_write_cb) referenced from mesh_services.o(.constdata)
 <LI><a href="#[7a]">ms_access_period_step_timer_handler</a> from libethermind_mesh_core.lib(i.ms_access_period_step_timer_handler) referenced from libethermind_mesh_core.lib(i.ms_access_add_periodic_step_timer_entity)
 <LI><a href="#[12]">ms_load_appkeys</a> from libethermind_mesh_core.lib(i.ms_load_appkeys) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[10]">ms_load_dev_key</a> from libethermind_mesh_core.lib(i.ms_load_dev_key) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[14]">ms_load_element_addresses</a> from libethermind_mesh_core.lib(i.ms_load_element_addresses) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[a]">ms_load_elements</a> from libethermind_mesh_core.lib(i.ms_load_elements) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[c]">ms_load_models</a> from libethermind_mesh_core.lib(i.ms_load_models) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[18]">ms_load_non_virtual_addresses</a> from libethermind_mesh_core.lib(i.ms_load_non_virtual_addresses) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[1a]">ms_load_seq_number</a> from libethermind_mesh_core.lib(i.ms_load_seq_number) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[e]">ms_load_subnets</a> from libethermind_mesh_core.lib(i.ms_load_subnets) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[1c]">ms_load_tx_states_and_features</a> from libethermind_mesh_core.lib(i.ms_load_tx_states_and_features) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[16]">ms_load_virtual_addresses</a> from libethermind_mesh_core.lib(i.ms_load_virtual_addresses) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[68]">ms_model_state_transition_timer_handler</a> from libethermind_mesh_core.lib(i.ms_model_state_transition_timer_handler) referenced from libethermind_mesh_core.lib(i.MS_common_start_transition_timer)
 <LI><a href="#[68]">ms_model_state_transition_timer_handler</a> from libethermind_mesh_core.lib(i.ms_model_state_transition_timer_handler) referenced from libethermind_mesh_core.lib(i.ms_model_state_transition_timer_handler)
 <LI><a href="#[82]">ms_scene_transition_complete_cb</a> from libethermind_mesh_models.lib(i.ms_scene_transition_complete_cb) referenced from libethermind_mesh_models.lib(i.ms_scene_recall)
 <LI><a href="#[81]">ms_scene_transition_start_cb</a> from libethermind_mesh_models.lib(i.ms_scene_transition_start_cb) referenced from libethermind_mesh_models.lib(i.ms_scene_recall)
 <LI><a href="#[11]">ms_store_appkeys</a> from libethermind_mesh_core.lib(i.ms_store_appkeys) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[f]">ms_store_dev_key</a> from libethermind_mesh_core.lib(i.ms_store_dev_key) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[13]">ms_store_element_addresses</a> from libethermind_mesh_core.lib(i.ms_store_element_addresses) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[9]">ms_store_elements</a> from libethermind_mesh_core.lib(i.ms_store_elements) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[b]">ms_store_models</a> from libethermind_mesh_core.lib(i.ms_store_models) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[17]">ms_store_non_virtual_addresses</a> from libethermind_mesh_core.lib(i.ms_store_non_virtual_addresses) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[19]">ms_store_seq_number</a> from libethermind_mesh_core.lib(i.ms_store_seq_number) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[d]">ms_store_subnets</a> from libethermind_mesh_core.lib(i.ms_store_subnets) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[1b]">ms_store_tx_states_and_features</a> from libethermind_mesh_core.lib(i.ms_store_tx_states_and_features) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[15]">ms_store_virtual_addresses</a> from libethermind_mesh_core.lib(i.ms_store_virtual_addresses) referenced 2 times from libethermind_mesh_core.lib(.data)
 <LI><a href="#[7d]">net_handle_secure_beacon</a> from libethermind_mesh_core.lib(i.net_handle_secure_beacon) referenced from libethermind_mesh_core.lib(i.ms_net_init)
 <LI><a href="#[71]">net_proxy_netid_timeout_handler</a> from libethermind_mesh_core.lib(i.net_proxy_netid_timeout_handler) referenced from libethermind_mesh_core.lib(i.MS_proxy_server_adv_start)
 <LI><a href="#[71]">net_proxy_netid_timeout_handler</a> from libethermind_mesh_core.lib(i.net_proxy_netid_timeout_handler) referenced from libethermind_mesh_core.lib(i.net_proxy_netid_timeout_handler)
 <LI><a href="#[70]">net_proxy_nodeid_timeout_handler</a> from libethermind_mesh_core.lib(i.net_proxy_nodeid_timeout_handler) referenced from libethermind_mesh_core.lib(i.MS_proxy_server_adv_start)
 <LI><a href="#[70]">net_proxy_nodeid_timeout_handler</a> from libethermind_mesh_core.lib(i.net_proxy_nodeid_timeout_handler) referenced from libethermind_mesh_core.lib(i.net_proxy_nodeid_timeout_handler)
 <LI><a href="#[84]">net_tx_timeout_handler</a> from libethermind_mesh_core.lib(i.net_tx_timeout_handler) referenced from libethermind_mesh_core.lib(i.net_trigger_tx)
 <LI><a href="#[85]">netif_adv_recv_cb</a> from libethermind_mesh_core.lib(i.netif_adv_recv_cb) referenced from libethermind_mesh_core.lib(i.netif_init)
 <LI><a href="#[86]">netif_gatt_recv_cb</a> from libethermind_mesh_core.lib(i.netif_gatt_recv_cb) referenced from libethermind_mesh_core.lib(i.netif_init)
 <LI><a href="#[61]">osalInitTasks</a> from osal_blemesh.o(i.osalInitTasks) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[57]">osal_CbTimerProcessEvent_new</a> from osal_blemesh.o(i.osal_CbTimerProcessEvent_new) referenced from osal_blemesh.o(.constdata)
 <LI><a href="#[93]">prov_access_state_handler</a> from libethermind_mesh_core.lib(i.prov_access_state_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[7e]">prov_adv_recv_cb</a> from libethermind_mesh_core.lib(i.prov_adv_recv_cb) referenced from libethermind_mesh_core.lib(i.ms_prov_init)
 <LI><a href="#[8a]">prov_complete_timeout_handler</a> from libethermind_mesh_core.lib(i.prov_complete_timeout_handler) referenced from libethermind_mesh_core.lib(i.se_prov_complete_handler)
 <LI><a href="#[7f]">prov_gatt_recv_cb</a> from libethermind_mesh_core.lib(i.prov_gatt_recv_cb) referenced from libethermind_mesh_core.lib(i.ms_prov_init)
 <LI><a href="#[80]">prov_handle_unprovisioned_beacon</a> from libethermind_mesh_core.lib(i.prov_handle_unprovisioned_beacon) referenced from libethermind_mesh_core.lib(i.ms_prov_init)
 <LI><a href="#[88]">prov_link_ack_timeout_handler</a> from libethermind_mesh_core.lib(i.prov_link_ack_timeout_handler) referenced from libethermind_mesh_core.lib(i.prov_link_open)
 <LI><a href="#[87]">prov_pdu_ack_timeout_handler</a> from libethermind_mesh_core.lib(i.prov_pdu_ack_timeout_handler) referenced from libethermind_mesh_core.lib(i.prov_framensend_pb_adv_pdu)
 <LI><a href="#[89]">prov_proc_timeout_handler</a> from libethermind_mesh_core.lib(i.prov_proc_timeout_handler) referenced from libethermind_mesh_core.lib(i.prov_restart_proc_timer)
 <LI><a href="#[2d]">proxy_dly_generic_hsl</a> from appl_sample_example_phylight.o(i.proxy_dly_generic_hsl) referenced from appl_sample_example_phylight.o(i.UI_light_hsl_model_state_set)
 <LI><a href="#[2c]">proxy_dly_generic_onoff</a> from appl_sample_example_phylight.o(i.proxy_dly_generic_onoff) referenced from appl_sample_example_phylight.o(i.UI_generic_onoff_model_state_set)
 <LI><a href="#[44]">rf_calibrate1</a> from patch.o(i.rf_calibrate1) referenced from patch.o(i.init_config)
 <LI><a href="#[64]">rf_phy_ini</a> from rf_phy_driver.o(i.rf_phy_ini) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[41]">rf_wakeup_handler</a> from main.o(i.rf_wakeup_handler) referenced from main.o(i.hal_rfphy_init)
 <LI><a href="#[72]">scene_server_cb</a> from libethermind_mesh_models.lib(i.scene_server_cb) referenced from libethermind_mesh_models.lib(i.MS_scene_server_init)
 <LI><a href="#[73]">scene_server_publish_timout_cb</a> from libethermind_mesh_models.lib(i.scene_server_publish_timout_cb) referenced from libethermind_mesh_models.lib(i.MS_scene_server_init)
 <LI><a href="#[96]">se_prov_capabilities_handler</a> from libethermind_mesh_core.lib(i.se_prov_capabilities_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[9d]">se_prov_complete_handler</a> from libethermind_mesh_core.lib(i.se_prov_complete_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[9a]">se_prov_confirmation_handler</a> from libethermind_mesh_core.lib(i.se_prov_confirmation_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[9c]">se_prov_data_handler</a> from libethermind_mesh_core.lib(i.se_prov_data_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[95]">se_prov_error_handler</a> from libethermind_mesh_core.lib(i.se_prov_error_handler) referenced 9 times from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[99]">se_prov_inputcom_handler</a> from libethermind_mesh_core.lib(i.se_prov_inputcom_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[94]">se_prov_invite_handler</a> from libethermind_mesh_core.lib(i.se_prov_invite_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[98]">se_prov_pubkey_handler</a> from libethermind_mesh_core.lib(i.se_prov_pubkey_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[9b]">se_prov_random_handler</a> from libethermind_mesh_core.lib(i.se_prov_random_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[97]">se_prov_start_handler</a> from libethermind_mesh_core.lib(i.se_prov_start_handler) referenced from libethermind_mesh_core.lib(.constdata)
 <LI><a href="#[75]">snb_timeout_handler</a> from libethermind_mesh_core.lib(i.snb_timeout_handler) referenced from libethermind_mesh_core.lib(i.config_start_snb_timer)
 <LI><a href="#[2b]">timeout_cb</a> from appl_sample_example_phylight.o(i.timeout_cb) referenced from appl_sample_example_phylight.o(i.UI_gatt_iface_event_pl_cb)
 <LI><a href="#[2b]">timeout_cb</a> from appl_sample_example_phylight.o(i.timeout_cb) referenced from appl_sample_example_phylight.o(i.UI_sample_reinit)
 <LI><a href="#[2b]">timeout_cb</a> from appl_sample_example_phylight.o(i.timeout_cb) referenced from appl_sample_example_phylight.o(i.appl_mesh_sample)
 <LI><a href="#[4c]">timer_timeout_handler</a> from em_timer.o(i.timer_timeout_handler) referenced from em_timer.o(i.timer_add_entity)
 <LI><a href="#[8b]">trn_frndclear_retry_timeout_handler</a> from libethermind_mesh_core.lib(i.trn_frndclear_retry_timeout_handler) referenced from libethermind_mesh_core.lib(i.trn_frndclear)
 <LI><a href="#[90]">trn_frndpoll_rsp_handler</a> from libethermind_mesh_core.lib(i.trn_frndpoll_rsp_handler) referenced from libethermind_mesh_core.lib(i.trn_handle_frnd_poll)
 <LI><a href="#[8f]">trn_frndpoll_send_handler</a> from libethermind_mesh_core.lib(i.trn_frndpoll_send_handler) referenced from libethermind_mesh_core.lib(i.trn_frndrx_window_timeout_handler)
 <LI><a href="#[8f]">trn_frndpoll_send_handler</a> from libethermind_mesh_core.lib(i.trn_frndpoll_send_handler) referenced from libethermind_mesh_core.lib(i.trn_handle_frnd_update)
 <LI><a href="#[8d]">trn_frndpoll_timeout_handler</a> from libethermind_mesh_core.lib(i.trn_frndpoll_timeout_handler) referenced from libethermind_mesh_core.lib(i.trn_frndpoll_rsp_handler)
 <LI><a href="#[8d]">trn_frndpoll_timeout_handler</a> from libethermind_mesh_core.lib(i.trn_frndpoll_timeout_handler) referenced from libethermind_mesh_core.lib(i.trn_frndreq_rsp_handler)
 <LI><a href="#[8d]">trn_frndpoll_timeout_handler</a> from libethermind_mesh_core.lib(i.trn_frndpoll_timeout_handler) referenced from libethermind_mesh_core.lib(i.trn_handle_frnd_subscription_list_add_remove)
 <LI><a href="#[91]">trn_frndreq_rsp_handler</a> from libethermind_mesh_core.lib(i.trn_frndreq_rsp_handler) referenced from libethermind_mesh_core.lib(i.trn_handle_frnd_req)
 <LI><a href="#[8c]">trn_frndrx_delay_timeout_handler</a> from libethermind_mesh_core.lib(i.trn_frndrx_delay_timeout_handler) referenced from libethermind_mesh_core.lib(i.trn_frndpoll)
 <LI><a href="#[8e]">trn_frndrx_window_timeout_handler</a> from libethermind_mesh_core.lib(i.trn_frndrx_window_timeout_handler) referenced from libethermind_mesh_core.lib(i.trn_frndrx_delay_timeout_handler)
 <LI><a href="#[83]">trn_pkt_in</a> from libethermind_mesh_core.lib(i.trn_pkt_in) referenced from libethermind_mesh_core.lib(i.ms_trn_init)
 <LI><a href="#[92]">trn_pub_timeout_handler</a> from libethermind_mesh_core.lib(i.trn_pub_timeout_handler) referenced from libethermind_mesh_core.lib(i.trn_start_heartbeat_pub_timer)
 <LI><a href="#[74]">trn_sub_timeout_handler</a> from libethermind_mesh_core.lib(i.trn_sub_timeout_handler) referenced from libethermind_mesh_core.lib(i.MS_trn_set_heartbeat_subscription)
 <LI><a href="#[42]">uart_hw_config</a> from uart.o(i.uart_hw_config) referenced from uart.o(i.hal_uart_init)
 <LI><a href="#[2a]">vendor_example_server_cb</a> from appl_sample_example_phylight.o(i.vendor_example_server_cb) referenced from appl_sample_example_phylight.o(i.MS_vendor_example_server_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[199]"></a>__aeabi_uidivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_system_init (via Veneer)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set (via Veneer)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq (via Veneer)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config (via Veneer)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set (via Veneer)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_tracking_check (via Veneer)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_add_periodic_step_timer_entity (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu (via Veneer)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_verify_request_criteria (via Veneer)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_get_lpn_polltimeout (via Veneer)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_seg_pdu (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_common_get_transition_time_from_ms (via Veneer)
</UL>

<P><STRONG><a name="[164]"></a>strlen</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback (via Veneer)
</UL>

<P><STRONG><a name="[163]"></a>strcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback (via Veneer)
</UL>

<P><STRONG><a name="[12d]"></a>ATT_CompareUUID</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
</UL>

<P><STRONG><a name="[23a]"></a>ATT_ErrorRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg (via Veneer)
</UL>

<P><STRONG><a name="[232]"></a>ATT_ExchangeMTURsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg (via Veneer)
</UL>

<P><STRONG><a name="[22e]"></a>ATT_ExecuteWriteRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq (via Veneer)
</UL>

<P><STRONG><a name="[231]"></a>ATT_FindByTypeValueRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq (via Veneer)
</UL>

<P><STRONG><a name="[2ec]"></a>ATT_GetCurrentMTUSize</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu (via Veneer)
</UL>

<P><STRONG><a name="[23c]"></a>ATT_PrepareWriteRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq (via Veneer)
</UL>

<P><STRONG><a name="[235]"></a>ATT_ReadBlobRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg (via Veneer)
</UL>

<P><STRONG><a name="[23e]"></a>ATT_ReadByGrpTypeRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq (via Veneer)
</UL>

<P><STRONG><a name="[23f]"></a>ATT_ReadByTypeRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq (via Veneer)
</UL>

<P><STRONG><a name="[240]"></a>ATT_ReadMultiRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq (via Veneer)
</UL>

<P><STRONG><a name="[234]"></a>ATT_ReadRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg (via Veneer)
</UL>

<P><STRONG><a name="[241]"></a>ATT_WriteRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq (via Veneer)
</UL>

<P><STRONG><a name="[225]"></a>GAP_Authenticate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate (via Veneer)
</UL>

<P><STRONG><a name="[226]"></a>GAP_Bond</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq (via Veneer)
</UL>

<P><STRONG><a name="[1d4]"></a>GAP_CentConnRegister</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
</UL>

<P><STRONG><a name="[1d2]"></a>GAP_CentDevMgrInit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
</UL>

<P><STRONG><a name="[204]"></a>GAP_ConfigDeviceAddr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_init_pl (via Veneer)
</UL>

<P><STRONG><a name="[e4]"></a>GAP_DeviceDiscoveryCancel</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_scan_enable (via Veneer)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg (via Veneer)
</UL>

<P><STRONG><a name="[e2]"></a>GAP_DeviceDiscoveryRequest</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_scan_enable (via Veneer)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg (via Veneer)
</UL>

<P><STRONG><a name="[db]"></a>GAP_EndDiscoverable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_adv_enable (via Veneer)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg (via Veneer)
</UL>

<P><STRONG><a name="[d8]"></a>GAP_EstablishLinkReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_connect (via Veneer)
</UL>

<P><STRONG><a name="[229]"></a>GAP_GetParamValue</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg (via Veneer)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
</UL>

<P><STRONG><a name="[28b]"></a>GAP_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[da]"></a>GAP_MakeDiscoverable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_adv_enable (via Veneer)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg (via Veneer)
</UL>

<P><STRONG><a name="[1d1]"></a>GAP_ParamsInit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
</UL>

<P><STRONG><a name="[1d3]"></a>GAP_PeriDevMgrInit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
</UL>

<P><STRONG><a name="[59]"></a>GAP_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>GAP_RegisterForHCIMsgs</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_Init (via Veneer)
</UL>

<P><STRONG><a name="[10c]"></a>GAP_ResolvePrivateAddr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
</UL>

<P><STRONG><a name="[109]"></a>GAP_SendSlaveSecurityRequest</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst (via Veneer)
</UL>

<P><STRONG><a name="[dd]"></a>GAP_SetParamValue</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_scan_params (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_adv_params (via Veneer)
</UL>

<P><STRONG><a name="[104]"></a>GAP_Signable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst (via Veneer)
</UL>

<P><STRONG><a name="[119]"></a>GAP_TerminateLinkReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection (via Veneer)
</UL>

<P><STRONG><a name="[e0]"></a>GAP_UpdateAdvertisingData</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_advscanrsp_data (via Veneer)
</UL>

<P><STRONG><a name="[23b]"></a>GATT_AppCompletedMsg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg (via Veneer)
</UL>

<P><STRONG><a name="[11c]"></a>GATT_DeregisterService</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_DeregisterService (via Veneer)
</UL>

<P><STRONG><a name="[279]"></a>GATT_DiscAllCharDescs</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_process_gattMsg (via Veneer)
</UL>

<P><STRONG><a name="[278]"></a>GATT_DiscAllChars</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_process_gattMsg (via Veneer)
</UL>

<P><STRONG><a name="[12b]"></a>GATT_FindHandle</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq (via Veneer)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq (via Veneer)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq (via Veneer)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg (via Veneer)
</UL>

<P><STRONG><a name="[230]"></a>GATT_FindHandleUUID</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq (via Veneer)
</UL>

<P><STRONG><a name="[12c]"></a>GATT_FindNextAttr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq (via Veneer)
</UL>

<P><STRONG><a name="[28d]"></a>GATT_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[1dc]"></a>GATT_InitClient</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[27b]"></a>GATT_Notification</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_notify_data_out (via Veneer)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_notify_data_out (via Veneer)
</UL>

<P><STRONG><a name="[5b]"></a>GATT_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>GATT_RegisterForInd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[120]"></a>GATT_RegisterForReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init (via Veneer)
</UL>

<P><STRONG><a name="[12f]"></a>GATT_RegisterService</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService (via Veneer)
</UL>

<P><STRONG><a name="[132]"></a>GATT_ServiceChangedInd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd (via Veneer)
</UL>

<P><STRONG><a name="[23d]"></a>GATT_VerifyReadPermissions</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq (via Veneer)
</UL>

<P><STRONG><a name="[27a]"></a>GATT_WriteNoRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_send_wwr (via Veneer)
</UL>

<P><STRONG><a name="[288]"></a>HCI_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[1d8]"></a>HCI_LE_SetDefaultPhyMode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
</UL>

<P><STRONG><a name="[56]"></a>HCI_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>HCI_ReadRssiCmd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[22a]"></a>L2CAP_ConnParamUpdateReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate (via Veneer)
</UL>

<P><STRONG><a name="[28a]"></a>L2CAP_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[58]"></a>L2CAP_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[21b]"></a>LL_Encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_encrypt (via Veneer)
</UL>

<P><STRONG><a name="[287]"></a>LL_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[55]"></a>LL_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[20b]"></a>LL_Rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_queue_depth_check (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_rand_generate (via Veneer)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_generate_random_bytes (via Veneer)
</UL>

<P><STRONG><a name="[13c]"></a>LL_evt_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
</UL>

<P><STRONG><a name="[28c]"></a>SM_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[5a]"></a>SM_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>__ARM_common_switch8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_code_ini (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB (via Veneer)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal (via Veneer)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg (via Veneer)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_scene_server_cb (via Veneer)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_server_cb (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_cb (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb (via Veneer)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_control_pdu (via Veneer)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in (via Veneer)
</UL>

<P><STRONG><a name="[264]"></a>boot_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_code_ini (via Veneer)
</UL>

<P><STRONG><a name="[190]"></a>clock_time_rtc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount (via Veneer)
</UL>

<P><STRONG><a name="[25f]"></a>disableSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
</UL>

<P><STRONG><a name="[260]"></a>enableSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
</UL>

<P><STRONG><a name="[121]"></a>linkDB_Register</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init (via Veneer)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_init (via Veneer)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_init (via Veneer)
</UL>

<P><STRONG><a name="[22b]"></a>linkDB_State</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB (via Veneer)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_handle_conn (via Veneer)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_handle_conn (via Veneer)
</UL>

<P><STRONG><a name="[1d6]"></a>llInitFeatureSet2MPHY</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
</UL>

<P><STRONG><a name="[1d7]"></a>llInitFeatureSetDLE</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
</UL>

<P><STRONG><a name="[270]"></a>llSetupDirectedAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
</UL>

<P><STRONG><a name="[272]"></a>llSetupNonConnectableAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
</UL>

<P><STRONG><a name="[273]"></a>llSetupScannableAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
</UL>

<P><STRONG><a name="[271]"></a>llSetupUndirectedAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
</UL>

<P><STRONG><a name="[13d]"></a>ll_debug_output</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
</UL>

<P><STRONG><a name="[274]"></a>ll_hw_get_tr_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
</UL>

<P><STRONG><a name="[26d]"></a>ll_hw_ign_rfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
</UL>

<P><STRONG><a name="[26e]"></a>ll_hw_rst_rfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
</UL>

<P><STRONG><a name="[26f]"></a>ll_hw_rst_tfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
</UL>

<P><STRONG><a name="[13e]"></a>ll_hw_set_rx_timeout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
</UL>

<P><STRONG><a name="[f3]"></a>osalTimeUpdate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
</UL>

<P><STRONG><a name="[289]"></a>osal_CbTimerInit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[29d]"></a>osal_CbTimerStart</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_entity (via Veneer)
</UL>

<P><STRONG><a name="[f8]"></a>osal_CbTimerStop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
</UL>

<P><STRONG><a name="[223]"></a>osal_GetSystemClock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_timer_get_ms_timestamp (via Veneer)
</UL>

<P><STRONG><a name="[228]"></a>osal_get_timeoutEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
</UL>

<P><STRONG><a name="[1ae]"></a>osal_init_system</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[103]"></a>osal_isbufset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
</UL>

<P><STRONG><a name="[eb]"></a>osal_mem_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService (via Veneer)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem (via Veneer)
</UL>

<P><STRONG><a name="[f1]"></a>osal_mem_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_DeregisterService (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem (via Veneer)
</UL>

<P><STRONG><a name="[276]"></a>osal_mem_set_heap</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[10b]"></a>osal_memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindAddr (via Veneer)
</UL>

<P><STRONG><a name="[d7]"></a>osal_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_WriteAttrCB (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB (via Veneer)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq (via Veneer)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq (via Veneer)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq (via Veneer)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq (via Veneer)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devInfo_ReadAttrCB (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_connect (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUartData (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_notify_data_out (via Veneer)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_notify_data_out (via Veneer)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_send_wwr (via Veneer)
</UL>

<P><STRONG><a name="[de]"></a>osal_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_Init (via Veneer)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_SetNumPrepareWrites (via Veneer)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq (via Veneer)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq (via Veneer)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB (via Veneer)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_adv_params (via Veneer)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter (via Veneer)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_init (via Veneer)
</UL>

<P><STRONG><a name="[130]"></a>osal_msg_allocate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent (via Veneer)
</UL>

<P><STRONG><a name="[112]"></a>osal_msg_deallocate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[110]"></a>osal_msg_receive</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[131]"></a>osal_msg_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent (via Veneer)
</UL>

<P><STRONG><a name="[1af]"></a>osal_pwrmgr_device</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[e3]"></a>osal_set_event</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_scan_enable (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUartData (via Veneer)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_set (via Veneer)
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
</UL>

<P><STRONG><a name="[1b0]"></a>osal_start_system</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[114]"></a>osal_start_timerEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg (via Veneer)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_porcess_evt (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback (via Veneer)
</UL>

<P><STRONG><a name="[118]"></a>osal_stop_timerEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SendUpdateParam (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg (via Veneer)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg (via Veneer)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_porcess_evt (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_gatt_iface_event_pl_cb (via Veneer)
</UL>

<P><STRONG><a name="[12e]"></a>osal_strlen</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_WriteAttrCB (via Veneer)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_ReadAttrCB (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr (via Veneer)
</UL>

<P><STRONG><a name="[13f]"></a>read_current_fine_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1 (via Veneer)
</UL>

<P><STRONG><a name="[275]"></a>set_max_length</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1 (via Veneer)
</UL>

<P><STRONG><a name="[265]"></a>wakeup_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_code_ini (via Veneer)
</UL>

<P><STRONG><a name="[1c4]"></a>APP_config_server_CB_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.APP_config_server_CB_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample (via Veneer)
</UL>

<P><STRONG><a name="[17e]"></a>MS_access_bind_model_app</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_bind_model_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MS_access_bind_model_app &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_set_bit (via Veneer)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_binding_app_key (via Veneer)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_unbind_handler
</UL>

<P><STRONG><a name="[2a6]"></a>MS_access_cm_add_appkey</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_access_cm_add_appkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MS_access_cm_add_appkey &rArr; ms_stbx_k4 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k4
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_set_bit (via Veneer)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_add_update_delete_handler
</UL>

<P><STRONG><a name="[2a8]"></a>MS_access_cm_add_device_key</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_cm_add_device_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MS_access_cm_add_device_key &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
</UL>

<P><STRONG><a name="[2a9]"></a>MS_access_cm_add_friend_sec_credential</STRONG> (Thumb, 166 bytes, Stack size 112 bytes, libethermind_mesh_core.lib(i.MS_access_cm_add_friend_sec_credential))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = MS_access_cm_add_friend_sec_credential &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_set_bit (via Veneer)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_netkey
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndreq_rsp_handler
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_offer
</UL>

<P><STRONG><a name="[2a1]"></a>MS_access_cm_add_model_subscription</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_access_cm_add_model_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = MS_access_cm_add_model_subscription &rArr; ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_set_bit (via Veneer)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_virtual_address
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_address
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_subscriptiong_add (via Veneer)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_set_heartbeat_subscription
</UL>

<P><STRONG><a name="[2ad]"></a>MS_access_cm_add_update_netkey</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_cm_add_update_netkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = MS_access_cm_add_update_netkey &rArr; ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_refresh_all_friend_credentials &rArr; ms_access_cm_friend_credentials_refresh &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_all (via Veneer)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_save_netkey_at_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[2b0]"></a>MS_access_cm_delete_all_model_subscription</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_delete_all_model_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MS_access_cm_delete_all_model_subscription &rArr; ms_delete_address &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_all (via Veneer)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_lowest_bit_set (via Veneer)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delete_address
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_all_handler
</UL>

<P><STRONG><a name="[2b2]"></a>MS_access_cm_delete_friend_sec_credential</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_delete_friend_sec_credential))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MS_access_cm_delete_friend_sec_credential &rArr; MS_access_cm_delete_netkey &rArr; bitarray_get_lowest_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_bit (via Veneer)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_netkey
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_lpn_element
</UL>

<P><STRONG><a name="[2a3]"></a>MS_access_cm_delete_model_subscription</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_cm_delete_model_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MS_access_cm_delete_model_subscription &rArr; ms_delete_address &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_bit (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_virtual_address_on_label
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delete_address
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_address
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_subscriptiong_delete (via Veneer)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler
</UL>

<P><STRONG><a name="[2b4]"></a>MS_access_cm_delete_netkey</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_delete_netkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MS_access_cm_delete_netkey &rArr; bitarray_get_lowest_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_lowest_bit_set (via Veneer)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delete_appkey
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_friend_sec_credential
</UL>

<P><STRONG><a name="[389]"></a>MS_access_cm_find_master_subnet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_find_master_subnet))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[1c9]"></a>MS_access_cm_find_subnet</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_find_subnet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MS_access_cm_find_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_set_handler
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_get_handler
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_key_refresh_phase_set_handler
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_key_refresh_phase_get_handler
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_get_handler
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_add_update_delete_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_set_heartbeat_publication
</UL>

<P><STRONG><a name="[17c]"></a>MS_access_cm_get_app_key</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_app_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MS_access_cm_get_app_key
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_check_app_key (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_binding_app_key (via Veneer)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_access_pdu
</UL>

<P><STRONG><a name="[2b8]"></a>MS_access_cm_get_appkey_handle</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_appkey_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MS_access_cm_get_appkey_handle &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_add_update_delete_handler
</UL>

<P><STRONG><a name="[323]"></a>MS_access_cm_get_appkey_index_list</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_appkey_index_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MS_access_cm_get_appkey_index_list
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_get_handler
</UL>

<P><STRONG><a name="[33c]"></a>MS_access_cm_get_default_ttl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_default_ttl))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[180]"></a>MS_access_cm_get_device_key</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_device_key))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_get_device_key (via Veneer)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_access_pdu
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_decrypt_pdu
</UL>

<P><STRONG><a name="[1cb]"></a>MS_access_cm_get_element_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_element_count))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_register (via Veneer)
</UL>

<P><STRONG><a name="[31c]"></a>MS_access_cm_get_features</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_features))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_trigger_heartbeat
</UL>

<P><STRONG><a name="[185]"></a>MS_access_cm_get_features_field</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_features_field))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_reinit (via Veneer)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_get_set_handler
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_get_set_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_node_identity
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_node_identity
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[31d]"></a>MS_access_cm_get_friendship_role</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_friendship_role))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_trigger_heartbeat
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_clear_cnf
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_ack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
</UL>

<P><STRONG><a name="[301]"></a>MS_access_cm_get_iv_index</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_iv_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_rsp_handler
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_secure_pdu
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_send_pdu
</UL>

<P><STRONG><a name="[382]"></a>MS_access_cm_get_iv_index_by_ivi</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_iv_index_by_ivi))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_decrypt_pdu
</UL>

<P><STRONG><a name="[302]"></a>MS_access_cm_get_key_refresh_phase</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_key_refresh_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MS_access_cm_get_key_refresh_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_key_refresh_phase_get_handler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_rsp_handler
</UL>

<P><STRONG><a name="[2b9]"></a>MS_access_cm_get_model_app_list</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_model_app_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MS_access_cm_get_model_app_list &rArr; bitarray_get_lowest_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_lowest_bit_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_get_handler
</UL>

<P><STRONG><a name="[2ba]"></a>MS_access_cm_get_model_publication</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_model_publication))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MS_access_cm_get_model_publication &rArr; ms_get_address
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_get_address
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_get_handler
</UL>

<P><STRONG><a name="[2bc]"></a>MS_access_cm_get_model_subscription_list</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_model_subscription_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MS_access_cm_get_model_subscription_list &rArr; bitarray_get_lowest_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_lowest_bit_set (via Veneer)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_get_address
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_get_handler
</UL>

<P><STRONG><a name="[182]"></a>MS_access_cm_get_netkey</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_netkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MS_access_cm_get_netkey
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_get_net_key (via Veneer)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_friend_credentials_refresh
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_friend_sec_credential
</UL>

<P><STRONG><a name="[33e]"></a>MS_access_cm_get_netkey_index_list</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_netkey_index_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MS_access_cm_get_netkey_index_list
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[2bd]"></a>MS_access_cm_get_node_identity</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_node_identity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MS_access_cm_get_node_identity
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features_field
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_get_handler
</UL>

<P><STRONG><a name="[184]"></a>MS_access_cm_get_primary_unicast_address</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_primary_unicast_address))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_reinit (via Veneer)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_send
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_nodeid_adv
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndreq_rsp_handler
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_send
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_lpn_clear_friendship
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_trigger_heartbeat
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_set_heartbeat_subscription
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_offer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_ack_timeout_handler
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[1cc]"></a>MS_access_cm_get_prov_devices_list</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_prov_devices_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MS_access_cm_get_prov_devices_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_register (via Veneer)
</UL>

<P><STRONG><a name="[2be]"></a>MS_access_cm_get_subnet_beacon_key</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_subnet_beacon_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_subnet_beacon_key
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
</UL>

<P><STRONG><a name="[2bf]"></a>MS_access_cm_get_subnet_encryption_key</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_subnet_encryption_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_subnet_encryption_key
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
</UL>

<P><STRONG><a name="[2c0]"></a>MS_access_cm_get_subnet_identity_key</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_subnet_identity_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_subnet_identity_key
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_nodeid_adv
</UL>

<P><STRONG><a name="[2c1]"></a>MS_access_cm_get_subnet_network_id</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_subnet_network_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_subnet_network_id
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_netid_timeout_handler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_start
</UL>

<P><STRONG><a name="[38a]"></a>MS_access_cm_get_subnet_nid</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_subnet_nid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_subnet_nid
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
</UL>

<P><STRONG><a name="[2c2]"></a>MS_access_cm_get_subnet_privacy_key</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_subnet_privacy_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_subnet_privacy_key
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
</UL>

<P><STRONG><a name="[14f]"></a>MS_access_cm_get_transmit_state</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_get_transmit_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_access_cm_get_transmit_state
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_app_config_server_callback (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_enqueue
</UL>

<P><STRONG><a name="[2c3]"></a>MS_access_cm_lookup_aid</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_cm_lookup_aid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS_access_cm_lookup_aid
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_decrypt_pdu
</UL>

<P><STRONG><a name="[2c4]"></a>MS_access_cm_lookup_network_id</STRONG> (Thumb, 236 bytes, Stack size 112 bytes, libethermind_mesh_core.lib(i.MS_access_cm_lookup_network_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = MS_access_cm_lookup_network_id &rArr; ms_stbx_k3 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k3
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k1
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_handle_secure_beacon
</UL>

<P><STRONG><a name="[2c8]"></a>MS_access_cm_lookup_nid</STRONG> (Thumb, 424 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.MS_access_cm_lookup_nid))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = MS_access_cm_lookup_nid &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_get_frndship_info
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
</UL>

<P><STRONG><a name="[2ca]"></a>MS_access_cm_reset</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_access_cm_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MS_access_cm_reset &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_set_seq_num_state
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[33d]"></a>MS_access_cm_set_default_ttl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_default_ttl))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[187]"></a>MS_access_cm_set_features_field</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_features_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = MS_access_cm_set_features_field &rArr; MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_trigger_heartbeat
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_subscriptiong_binding_cb (via Veneer)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_reinit (via Veneer)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_get_set_handler
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_get_set_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[2cd]"></a>MS_access_cm_set_friendship_role</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_friendship_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = MS_access_cm_set_friendship_role &rArr; MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_trigger_heartbeat
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_timeout_handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_send_handler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_rsp_handler
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_lpn_clear_friendship
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_update
</UL>

<P><STRONG><a name="[2ce]"></a>MS_access_cm_set_iv_index</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_iv_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MS_access_cm_set_iv_index &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_get_current_time (via Veneer)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_handle_secure_beacon
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_update
</UL>

<P><STRONG><a name="[2d0]"></a>MS_access_cm_set_key_refresh_phase</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_key_refresh_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = MS_access_cm_set_key_refresh_phase &rArr; ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_refresh_all_friend_credentials &rArr; ms_access_cm_friend_credentials_refresh &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_key_refresh_phase_set_handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_handle_secure_beacon
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_update
</UL>

<P><STRONG><a name="[2d1]"></a>MS_access_cm_set_model_publication</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_model_publication))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = MS_access_cm_set_model_publication &rArr; ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_virtual_address
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_address
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delete_address
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_stop_periodic_step_timer
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_start_periodic_step_timer
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_set_handler
</UL>

<P><STRONG><a name="[2d4]"></a>MS_access_cm_set_model_publication_period_divisor</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_model_publication_period_divisor))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MS_access_cm_set_model_publication_period_divisor &rArr; ms_access_start_periodic_step_timer &rArr; ms_access_add_periodic_step_timer_entity &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_stop_periodic_step_timer
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_start_periodic_step_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_set_period_divisor
</UL>

<P><STRONG><a name="[2d5]"></a>MS_access_cm_set_node_identity</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_node_identity))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MS_access_cm_set_node_identity &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features_field
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_set_handler
</UL>

<P><STRONG><a name="[2d9]"></a>MS_access_cm_set_primary_unicast_address</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_primary_unicast_address))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data
</UL>

<P><STRONG><a name="[166]"></a>MS_access_cm_set_prov_data</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_prov_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = MS_access_cm_set_prov_data &rArr; MS_access_cm_add_update_netkey &rArr; ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_refresh_all_friend_credentials &rArr; ms_access_cm_friend_credentials_refresh &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_subnet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init_subnet_table
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init_appkey_table
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_primary_unicast_address
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_key_refresh_phase
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_iv_index
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_init_replay_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback (via Veneer)
</UL>

<P><STRONG><a name="[2a2]"></a>MS_access_cm_set_transmit_state</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_access_cm_set_transmit_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MS_access_cm_set_transmit_state &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_subscriptiong_binding_cb (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[2da]"></a>MS_access_cm_update_delete_appkey</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_access_cm_update_delete_appkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = MS_access_cm_update_delete_appkey &rArr; ms_stbx_k4 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k4
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_bit (via Veneer)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delete_appkey
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_add_update_delete_handler
</UL>

<P><STRONG><a name="[1c1]"></a>MS_access_create_node</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_create_node))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample (via Veneer)
</UL>

<P><STRONG><a name="[2db]"></a>MS_access_get_composition_data</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_access_get_composition_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MS_access_get_composition_data &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem (via Veneer)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_get_element_models
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[330]"></a>MS_access_get_element_handle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_access_get_element_handle))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_get_handler
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_all_handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_set_handler
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_get_handler
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_get_handler
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_unbind_handler
</UL>

<P><STRONG><a name="[331]"></a>MS_access_get_model_handle</STRONG> (Thumb, 74 bytes, Stack size 36 bytes, libethermind_mesh_core.lib(i.MS_access_get_model_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MS_access_get_model_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_get_handler
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_all_handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_set_handler
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_get_handler
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_get_handler
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_unbind_handler
</UL>

<P><STRONG><a name="[35d]"></a>MS_access_is_fixed_group_addr_to_be_processed</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.MS_access_is_fixed_group_addr_to_be_processed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MS_access_is_fixed_group_addr_to_be_processed
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
</UL>

<P><STRONG><a name="[359]"></a>MS_access_is_valid_element_address</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.MS_access_is_valid_element_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MS_access_is_valid_element_address
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
</UL>

<P><STRONG><a name="[2dd]"></a>MS_access_is_valid_subscription_address</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.MS_access_is_valid_subscription_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MS_access_is_valid_subscription_address &rArr; ms_search_virtual_address
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_virtual_address
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_address
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
</UL>

<P><STRONG><a name="[2df]"></a>MS_access_publish</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_access_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = MS_access_publish &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_publish_ex
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_get_publish_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scene_server_cb
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_scene_transition_complete_cb
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_publish_timout_cb
</UL>

<P><STRONG><a name="[1c2]"></a>MS_access_register_element</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_access_register_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MS_access_register_element &rArr; ms_access_allocate_element
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_allocate_element
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample (via Veneer)
</UL>

<P><STRONG><a name="[141]"></a>MS_access_register_model</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_register_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_search_and_allocate_model
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendor_example_server_init (via Veneer)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_scene_server_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_light_hsl_server_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_generic_onoff_server_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_health_server_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_server_init
</UL>

<P><STRONG><a name="[143]"></a>MS_access_reply</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, libethermind_mesh_core.lib(i.MS_access_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = MS_access_reply &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_publish_ex
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_get_publish_addr
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendor_example_server_state_update (via Veneer)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_light_hsl_server_state_update
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_generic_onoff_server_state_update
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_cb
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply_and_publish
</UL>

<P><STRONG><a name="[2e5]"></a>MS_access_reply_and_publish</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_access_reply_and_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = MS_access_reply_and_publish &rArr; MS_access_reply &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_send_pdu
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scene_server_cb
</UL>

<P><STRONG><a name="[2e4]"></a>MS_access_send_pdu</STRONG> (Thumb, 154 bytes, Stack size 448 bytes, libethermind_mesh_core.lib(i.MS_access_send_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_access_pdu
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_publish_ex
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply_and_publish
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply
</UL>

<P><STRONG><a name="[2e8]"></a>MS_access_unbind_model_app</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_access_unbind_model_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MS_access_unbind_model_app &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_bit (via Veneer)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_unbind_handler
</UL>

<P><STRONG><a name="[206]"></a>MS_brr_add_bearer</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_brr_add_bearer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MS_brr_add_bearer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register (via Veneer)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_connection (via Veneer)
</UL>

<P><STRONG><a name="[153]"></a>MS_brr_bcast_end</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_brr_bcast_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS_brr_bcast_end
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_gatt_iface_event_pl_cb (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_gatt_recv_cb
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_nodeid_adv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_netid_timeout_handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_stop
</UL>

<P><STRONG><a name="[2e9]"></a>MS_brr_bcast_unprovisioned_beacon</STRONG> (Thumb, 138 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.MS_brr_bcast_unprovisioned_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MS_brr_bcast_unprovisioned_beacon &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup
</UL>

<P><STRONG><a name="[2ea]"></a>MS_brr_broadcast_beacon</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.MS_brr_broadcast_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MS_brr_broadcast_beacon &rArr; MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
</UL>

<P><STRONG><a name="[3b9]"></a>MS_brr_get_packet_rssi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_brr_get_packet_rssi))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_req
</UL>

<P><STRONG><a name="[30a]"></a>MS_brr_observe_beacon</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_brr_observe_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS_brr_observe_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup
</UL>

<P><STRONG><a name="[378]"></a>MS_brr_register</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_brr_register))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_init
</UL>

<P><STRONG><a name="[377]"></a>MS_brr_register_beacon_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_brr_register_beacon_handler))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
</UL>

<P><STRONG><a name="[207]"></a>MS_brr_remove_bearer</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_brr_remove_bearer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MS_brr_remove_bearer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_disconnection (via Veneer)
</UL>

<P><STRONG><a name="[2eb]"></a>MS_brr_send_pdu</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.MS_brr_send_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_GetCurrentMTUSize (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_accept
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_gatt_pdu
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_ack
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_open
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_close
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_send
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_broadcast_beacon
</UL>

<P><STRONG><a name="[3b0]"></a>MS_brr_sleep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_brr_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_brr_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndrx_window_timeout_handler
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_update
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_subscription_list_cnf
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_handle_segment_ack
</UL>

<P><STRONG><a name="[2ed]"></a>MS_brr_start_proxy_adv</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, libethermind_mesh_core.lib(i.MS_brr_start_proxy_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MS_brr_start_proxy_adv
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_nodeid_adv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_netid_timeout_handler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_start
</UL>

<P><STRONG><a name="[312]"></a>MS_brr_wakeup</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_brr_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_brr_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndrx_delay_timeout_handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_send_handler
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_lpn_clear_friendship
</UL>

<P><STRONG><a name="[2ee]"></a>MS_common_get_remaining_transition_time_with_offset</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_common_get_remaining_transition_time_with_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MS_common_get_remaining_transition_time_with_offset &rArr; MS_common_get_transition_time_from_ms &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_timer_get_remaining_time (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_common_get_transition_time_from_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_scene_frame_status_response
</UL>

<P><STRONG><a name="[2ef]"></a>MS_common_get_transition_time_from_ms</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_common_get_transition_time_from_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MS_common_get_transition_time_from_ms &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_common_get_remaining_transition_time_with_offset
</UL>

<P><STRONG><a name="[2f1]"></a>MS_common_start_transition_timer</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_common_start_transition_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MS_common_start_transition_timer &rArr; ms_model_state_transition_timer_handler &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_model_state_transition_timer_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_scene_recall
</UL>

<P><STRONG><a name="[16f]"></a>MS_config_server_init</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_config_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MS_config_server_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_model
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_foundation_model_servers (via Veneer)
</UL>

<P><STRONG><a name="[37c]"></a>MS_generic_default_transition_time_server_get_time</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_mesh_models.lib(i.MS_generic_default_transition_time_server_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_scene_recall
</UL>

<P><STRONG><a name="[172]"></a>MS_generic_onoff_server_init</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, libethermind_mesh_models.lib(i.MS_generic_onoff_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MS_generic_onoff_server_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_model
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_generic_onoff_model_server (via Veneer)
</UL>

<P><STRONG><a name="[158]"></a>MS_generic_onoff_server_state_update</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, libethermind_mesh_models.lib(i.MS_generic_onoff_server_state_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = MS_generic_onoff_server_state_update &rArr; MS_access_reply &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_generic_onoff_server_cb (via Veneer)
</UL>

<P><STRONG><a name="[170]"></a>MS_health_server_init</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, libethermind_mesh_core.lib(i.MS_health_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MS_health_server_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_model
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_foundation_model_servers (via Veneer)
</UL>

<P><STRONG><a name="[1bc]"></a>MS_init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = MS_init &rArr; cry_ecdh_init &rArr; phyplus_ecdh_init &rArr; P256_ecdh_keygen &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_init_pl (via Veneer)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_init (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_trn_init
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_ltrn_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_common_init_transition_timer
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_brr_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample (via Veneer)
</UL>

<P><STRONG><a name="[174]"></a>MS_light_hsl_server_init</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, libethermind_mesh_models.lib(i.MS_light_hsl_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MS_light_hsl_server_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_model
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_light_hsl_model_server (via Veneer)
</UL>

<P><STRONG><a name="[15d]"></a>MS_light_hsl_server_state_update</STRONG> (Thumb, 358 bytes, Stack size 72 bytes, libethermind_mesh_models.lib(i.MS_light_hsl_server_state_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = MS_light_hsl_server_state_update &rArr; MS_access_reply &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_server_cb (via Veneer)
</UL>

<P><STRONG><a name="[2fb]"></a>MS_ltrn_clear_sar_contexts</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_ltrn_clear_sar_contexts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MS_ltrn_clear_sar_contexts &rArr; ltrn_sar_free_ctx &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[37f]"></a>MS_ltrn_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_ltrn_register))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_trn_init
</UL>

<P><STRONG><a name="[2fd]"></a>MS_ltrn_send_pdu</STRONG> (Thumb, 264 bytes, Stack size 104 bytes, libethermind_mesh_core.lib(i.MS_ltrn_send_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_send_pdu
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_seg_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_control_pdu
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_access_pdu
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_ack
</UL>

<P><STRONG><a name="[300]"></a>MS_net_alloc_seq_num</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_net_alloc_seq_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MS_net_alloc_seq_num &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_send
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_control_pdu
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_access_pdu
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segment
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_ack
</UL>

<P><STRONG><a name="[1ca]"></a>MS_net_broadcast_secure_beacon</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, libethermind_mesh_core.lib(i.MS_net_broadcast_secure_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = MS_net_broadcast_secure_beacon &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac (via Veneer)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_network_id
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_beacon_key
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_key_refresh_phase
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_broadcast_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snb_timeout_handler
</UL>

<P><STRONG><a name="[2e6]"></a>MS_net_get_address_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_net_get_address_type))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_low_power_node_polltimeout_get_handler
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_send_pdu
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_set_heartbeat_subscription
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_seg_pdu
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_ack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[37e]"></a>MS_net_get_seq_num_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_net_get_seq_num_state))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_seq_number
</UL>

<P><STRONG><a name="[372]"></a>MS_net_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_net_register))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_ltrn_init
</UL>

<P><STRONG><a name="[2fe]"></a>MS_net_send_pdu</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.MS_net_send_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_rsp_handler
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segment
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_send_pdu
</UL>

<P><STRONG><a name="[2cb]"></a>MS_net_set_seq_num_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_net_set_seq_num_state))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_seq_number
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset
</UL>

<P><STRONG><a name="[15f]"></a>MS_prov_bind</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_prov_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MS_prov_bind &rArr; prov_link_open &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_rand_generate (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_open
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_free_context
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_alloc_context
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_bind (via Veneer)
</UL>

<P><STRONG><a name="[176]"></a>MS_prov_register</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_prov_register))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_register (via Veneer)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_prov (via Veneer)
</UL>

<P><STRONG><a name="[1c6]"></a>MS_prov_send_pdu</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.MS_prov_send_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MS_prov_send_pdu &rArr; prov_process_event &rArr; prov_fsm_post_event &rArr; ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_process_event
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback (via Veneer)
</UL>

<P><STRONG><a name="[162]"></a>MS_prov_set_authval</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_prov_set_authval))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MS_prov_set_authval
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback (via Veneer)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback (via Veneer)
</UL>

<P><STRONG><a name="[18a]"></a>MS_prov_setup</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_prov_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = MS_prov_setup &rArr; cry_ecdh_init &rArr; phyplus_ecdh_init &rArr; P256_ecdh_keygen &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_init (via Veneer)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_get_public_key (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_observe_beacon
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_unprovisioned_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_setup (via Veneer)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_setup_prov (via Veneer)
</UL>

<P><STRONG><a name="[156]"></a>MS_proxy_fetch_state</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_proxy_fetch_state))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_model_state_set (via Veneer)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_generic_onoff_model_state_set (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_set_handler
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_get_set_handler
</UL>

<P><STRONG><a name="[177]"></a>MS_proxy_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_proxy_register))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_proxy (via Veneer)
</UL>

<P><STRONG><a name="[16d]"></a>MS_proxy_server_adv_start</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_proxy_server_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MS_proxy_server_adv_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_nodeid_adv
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_network_id
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_start_proxy_adv
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_proxy_start_adv (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_set_handler
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_get_set_handler
</UL>

<P><STRONG><a name="[152]"></a>MS_proxy_server_adv_stop</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_proxy_server_adv_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MS_proxy_server_adv_stop &rArr; MS_brr_bcast_end
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_end
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_gatt_iface_event_pl_cb (via Veneer)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_set_handler
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_get_set_handler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_gatt_recv_cb
</UL>

<P><STRONG><a name="[179]"></a>MS_scene_server_init</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, libethermind_mesh_models.lib(i.MS_scene_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MS_scene_server_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_model
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_scene_model_server (via Veneer)
</UL>

<P><STRONG><a name="[30c]"></a>MS_trn_clear_all_lpn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_trn_clear_all_lpn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MS_trn_clear_all_lpn &rArr; frnd_clear_lpn_element &rArr; MS_access_cm_delete_friend_sec_credential &rArr; MS_access_cm_delete_netkey &rArr; bitarray_get_lowest_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_lpn_element
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[2c9]"></a>MS_trn_get_frndship_info</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.MS_trn_get_frndship_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MS_trn_get_frndship_info
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_friend_credentials_refresh
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_nid
</UL>

<P><STRONG><a name="[329]"></a>MS_trn_get_heartbeat_publication</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_trn_get_heartbeat_publication))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_heartbeat_publication_get_set_handler
</UL>

<P><STRONG><a name="[32b]"></a>MS_trn_get_heartbeat_subscription</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_trn_get_heartbeat_subscription))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_heartbeat_subscription_get_set_handler
</UL>

<P><STRONG><a name="[30e]"></a>MS_trn_get_lpn_polltimeout</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_trn_get_lpn_polltimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MS_trn_get_lpn_polltimeout &rArr; frnd_search_lpn_element
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_search_lpn_element
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_low_power_node_polltimeout_get_handler
</UL>

<P><STRONG><a name="[35c]"></a>MS_trn_is_valid_lpn_element_address</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.MS_trn_is_valid_lpn_element_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MS_trn_is_valid_lpn_element_address
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
</UL>

<P><STRONG><a name="[354]"></a>MS_trn_is_valid_lpn_subscription_address</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.MS_trn_is_valid_lpn_subscription_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MS_trn_is_valid_lpn_subscription_address
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[310]"></a>MS_trn_is_valid_lpn_uincast_address</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.MS_trn_is_valid_lpn_uincast_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MS_trn_is_valid_lpn_uincast_address &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
</UL>

<P><STRONG><a name="[311]"></a>MS_trn_lpn_clear_friendship</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_trn_lpn_clear_friendship))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = MS_trn_lpn_clear_friendship &rArr; MS_access_cm_set_friendship_role &rArr; MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_friendship_role
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_send
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[314]"></a>MS_trn_lpn_register_security_update</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, libethermind_mesh_core.lib(i.MS_trn_lpn_register_security_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MS_trn_lpn_register_security_update &rArr; trn_add_to_queue &rArr; trn_update_lpn_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_add_to_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_handle_secure_beacon
</UL>

<P><STRONG><a name="[36d]"></a>MS_trn_register</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.MS_trn_register))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init
</UL>

<P><STRONG><a name="[2e7]"></a>MS_trn_send_access_pdu</STRONG> (Thumb, 134 bytes, Stack size 464 bytes, libethermind_mesh_core.lib(i.MS_trn_send_access_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_app_key
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_secure_pdu
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_device_key
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_send_pdu
</UL>

<P><STRONG><a name="[317]"></a>MS_trn_send_control_pdu</STRONG> (Thumb, 386 bytes, Stack size 328 bytes, libethermind_mesh_core.lib(i.MS_trn_send_control_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_send
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_trigger_heartbeat
</UL>

<P><STRONG><a name="[318]"></a>MS_trn_set_heartbeat_publication</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.MS_trn_set_heartbeat_publication))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MS_trn_set_heartbeat_publication &rArr; trn_start_heartbeat_pub_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_stop_heartbeat_pub_timer
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_start_heartbeat_pub_timer
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_subnet
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_heartbeat_publication_get_set_handler
</UL>

<P><STRONG><a name="[31b]"></a>MS_trn_set_heartbeat_subscription</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, libethermind_mesh_core.lib(i.MS_trn_set_heartbeat_subscription))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = MS_trn_set_heartbeat_subscription &rArr; MS_access_cm_add_model_subscription &rArr; ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_model_subscription
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_heartbeat_subscription_get_set_handler
</UL>

<P><STRONG><a name="[2cc]"></a>MS_trn_trigger_heartbeat</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.MS_trn_trigger_heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_control_pdu
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_friendship_role
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pub_timeout_handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_features_field
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_friendship_role
</UL>

<P><STRONG><a name="[7b]"></a>access_pkt_in</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.access_pkt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = access_pkt_in &rArr; ms_access_handle_rx_opcode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_access_init)
</UL>
<P><STRONG><a name="[31f]"></a>access_ps_init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.access_ps_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = access_ps_init &rArr; nvsto_register
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_register (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init
</UL>

<P><STRONG><a name="[67]"></a>brr_read_data_ind</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.brr_read_data_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = brr_read_data_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.MS_brr_add_bearer)
</UL>
<P><STRONG><a name="[69]"></a>config_server_cb</STRONG> (Thumb, 1334 bytes, Stack size 120 bytes, libethermind_mesh_core.lib(i.config_server_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888<LI>Call Chain = config_server_cb &rArr; MS_access_reply &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_subnet
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_pack_key_indices
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_set_handler
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_node_identity_get_handler
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_get_handler
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_all_handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_set_handler
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_get_handler
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_get_handler
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_unbind_handler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_low_power_node_polltimeout_get_handler
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_key_refresh_phase_set_handler
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_key_refresh_phase_get_handler
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_heartbeat_subscription_get_set_handler
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_heartbeat_publication_get_set_handler
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_gatt_proxy_get_set_handler
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_get_set_handler
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_get_handler
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_add_update_delete_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_transmit_state
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_features_field
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_default_ttl
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_netkey_index_list
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_default_ttl
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_netkey
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_composition_data
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_transmit_state
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_lpn_clear_friendship
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_clear_all_lpn
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features_field
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_clear_sar_contexts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.MS_config_server_init)
</UL>
<P><STRONG><a name="[33f]"></a>frnd_alloc_lpn_element</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.frnd_alloc_lpn_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = frnd_alloc_lpn_element &rArr; frnd_clear_lpn_element &rArr; MS_access_cm_delete_friend_sec_credential &rArr; MS_access_cm_delete_netkey &rArr; bitarray_get_lowest_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_search_lpn_element
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_lpn_element
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_req
</UL>

<P><STRONG><a name="[30d]"></a>frnd_clear_lpn_element</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.frnd_clear_lpn_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = frnd_clear_lpn_element &rArr; MS_access_cm_delete_friend_sec_credential &rArr; MS_access_cm_delete_netkey &rArr; bitarray_get_lowest_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_friend_sec_credential
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_timeout_handler
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_alloc_lpn_element
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_clear_all_lpn
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_clear
</UL>

<P><STRONG><a name="[30f]"></a>frnd_search_lpn_element</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.frnd_search_lpn_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = frnd_search_lpn_element
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_alloc_lpn_element
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_get_lpn_polltimeout
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_clear
</UL>

<P><STRONG><a name="[340]"></a>frnd_verify_request_criteria</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.frnd_verify_request_criteria))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = frnd_verify_request_criteria
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_req
</UL>

<P><STRONG><a name="[6a]"></a>generic_onoff_server_cb</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, libethermind_mesh_models.lib(i.generic_onoff_server_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = generic_onoff_server_cb &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_models.lib(i.MS_generic_onoff_server_init)
</UL>
<P><STRONG><a name="[6b]"></a>generic_onoff_server_publish_timout_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, libethermind_mesh_models.lib(i.generic_onoff_server_publish_timout_cb))
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_models.lib(i.MS_generic_onoff_server_init)
</UL>
<P><STRONG><a name="[6c]"></a>health_server_cb</STRONG> (Thumb, 476 bytes, Stack size 256 bytes, libethermind_mesh_core.lib(i.health_server_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = health_server_cb &rArr; MS_access_reply &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_set_period_divisor
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_set_attention
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_search_entity
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_run_self_test
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_get_period_divisor
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_get_fault_status
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_get_attention
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_clear_fault
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.MS_health_server_init)
</UL>
<P><STRONG><a name="[6d]"></a>health_server_publish_timout_cb</STRONG> (Thumb, 88 bytes, Stack size 208 bytes, libethermind_mesh_core.lib(i.health_server_publish_timout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = health_server_publish_timout_cb &rArr; MS_access_publish &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_get_fault_status
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.MS_health_server_init)
</UL>
<P><STRONG><a name="[6e]"></a>light_hsl_server_cb</STRONG> (Thumb, 514 bytes, Stack size 104 bytes, libethermind_mesh_models.lib(i.light_hsl_server_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = light_hsl_server_cb &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_models.lib(i.MS_light_hsl_server_init)
</UL>
<P><STRONG><a name="[6f]"></a>light_hsl_server_publish_timout_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, libethermind_mesh_models.lib(i.light_hsl_server_publish_timout_cb))
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_models.lib(i.MS_light_hsl_server_init)
</UL>
<P><STRONG><a name="[34e]"></a>ltran_calculate_seq_auth</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.ltran_calculate_seq_auth))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[78]"></a>ltrn_ack_timeout_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.ltrn_ack_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = ltrn_ack_timeout_handler &rArr; ltrn_send_ack &rArr; trn_frnd_handle_segment_ack &rArr; trn_frndpoll &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ltrn_sar_start_ack_timer)
</UL>
<P><STRONG><a name="[34d]"></a>ltrn_add_to_reassembled_cache</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ltrn_add_to_reassembled_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ltrn_add_to_reassembled_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_incomplete_timeout_handler
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[34a]"></a>ltrn_alloc_replay_cache</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_alloc_replay_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ltrn_alloc_replay_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_ltrn_init
</UL>

<P><STRONG><a name="[35a]"></a>ltrn_check_if_replayed</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ltrn_check_if_replayed))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ltrn_check_if_replayed
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
</UL>

<P><STRONG><a name="[34c]"></a>ltrn_get_current_sar_ctx</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ltrn_get_current_sar_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ltrn_get_current_sar_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[34b]"></a>ltrn_handle_seg_pdu</STRONG> (Thumb, 754 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.ltrn_handle_seg_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = ltrn_handle_seg_pdu &rArr; ltrn_send_ack &rArr; trn_frnd_handle_segment_ack &rArr; trn_frndpoll &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_add_to_queue
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_stop_ack_timer
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_start_ack_timer
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_search_and_alloc_ctx
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_restart_incomplete_timer
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_is_in_reassembled_cache
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_get_current_sar_ctx
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_add_to_reassembled_cache
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_is_valid_lpn_subscription_address
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_ack
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltran_calculate_seq_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
</UL>

<P><STRONG><a name="[355]"></a>ltrn_handle_segment_ack</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.ltrn_handle_segment_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = ltrn_handle_segment_ack &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_search_and_alloc_ctx
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
</UL>

<P><STRONG><a name="[77]"></a>ltrn_incomplete_timeout_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_incomplete_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ltrn_incomplete_timeout_handler &rArr; ltrn_sar_free_ctx &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_add_to_reassembled_cache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ltrn_sar_restart_incomplete_timer)
</UL>
<P><STRONG><a name="[2d8]"></a>ltrn_init_replay_cache</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_init_replay_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ltrn_init_replay_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_ltrn_init
</UL>

<P><STRONG><a name="[357]"></a>ltrn_init_sar_contexts</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_init_sar_contexts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ltrn_init_sar_contexts
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_ltrn_init
</UL>

<P><STRONG><a name="[34f]"></a>ltrn_is_in_reassembled_cache</STRONG> (Thumb, 92 bytes, Stack size 36 bytes, libethermind_mesh_core.lib(i.ltrn_is_in_reassembled_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ltrn_is_in_reassembled_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[358]"></a>ltrn_pkt_first_process</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.ltrn_pkt_first_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ltrn_pkt_first_process &rArr; MS_access_is_valid_subscription_address &rArr; ms_search_virtual_address
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_update_replay_cache
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_check_if_replayed
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_is_valid_lpn_subscription_address
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_is_valid_lpn_element_address
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_valid_subscription_address
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_valid_element_address
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[7c]"></a>ltrn_pkt_in</STRONG> (Thumb, 498 bytes, Stack size 72 bytes, libethermind_mesh_core.lib(i.ltrn_pkt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = ltrn_pkt_in &rArr; ltrn_handle_seg_pdu &rArr; ltrn_send_ack &rArr; trn_frnd_handle_segment_ack &rArr; trn_frndpoll &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_handle_segment_ack
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_add_to_queue
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_is_valid_lpn_uincast_address
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_is_valid_lpn_subscription_address
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_is_valid_lpn_element_address
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_valid_subscription_address
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_valid_element_address
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_fixed_group_addr_to_be_processed
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_friendship_role
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_ltrn_init)
</UL>
<P><STRONG><a name="[79]"></a>ltrn_rtx_timeout_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_rtx_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ltrn_rtx_timeout_handler &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ltrn_sar_transmit_segments)
</UL>
<P><STRONG><a name="[35f]"></a>ltrn_sar_alloc_ctx</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ltrn_sar_alloc_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ltrn_sar_alloc_ctx &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_seg_pdu
</UL>

<P><STRONG><a name="[2fc]"></a>ltrn_sar_free_ctx</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ltrn_sar_free_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ltrn_sar_free_ctx &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_incomplete_timeout_handler
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_clear_sar_contexts
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[352]"></a>ltrn_sar_restart_incomplete_timer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ltrn_sar_restart_incomplete_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ltrn_sar_restart_incomplete_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[350]"></a>ltrn_sar_search_and_alloc_ctx</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ltrn_sar_search_and_alloc_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ltrn_sar_search_and_alloc_ctx &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[351]"></a>ltrn_sar_start_ack_timer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ltrn_sar_start_ack_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ltrn_sar_start_ack_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[353]"></a>ltrn_sar_stop_ack_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ltrn_sar_stop_ack_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ltrn_sar_stop_ack_timer &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[360]"></a>ltrn_sar_transmit_segment</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, libethermind_mesh_core.lib(i.ltrn_sar_transmit_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_send_pdu
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments
</UL>

<P><STRONG><a name="[356]"></a>ltrn_sar_transmit_segments</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ltrn_sar_transmit_segments))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segment
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_rtx_timeout_handler
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_seg_pdu
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack
</UL>

<P><STRONG><a name="[349]"></a>ltrn_send_ack</STRONG> (Thumb, 140 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.ltrn_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = ltrn_send_ack &rArr; trn_frnd_handle_segment_ack &rArr; trn_frndpoll &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_handle_segment_ack
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_send_pdu
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_friendship_role
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_ack_timeout_handler
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[2ff]"></a>ltrn_send_seg_pdu</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ltrn_send_seg_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_alloc_ctx
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_send_pdu
</UL>

<P><STRONG><a name="[35b]"></a>ltrn_update_replay_cache</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ltrn_update_replay_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ltrn_update_replay_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
</UL>

<P><STRONG><a name="[2e2]"></a>ms_access_allocate_element</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.ms_access_allocate_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ms_access_allocate_element
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_element
</UL>

<P><STRONG><a name="[362]"></a>ms_access_cm_appkey_refresh</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, libethermind_mesh_core.lib(i.ms_access_cm_appkey_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ms_access_cm_appkey_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_refresh_all_appkeys
</UL>

<P><STRONG><a name="[363]"></a>ms_access_cm_create_keys_from_netkey</STRONG> (Thumb, 190 bytes, Stack size 104 bytes, libethermind_mesh_core.lib(i.ms_access_cm_create_keys_from_netkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ms_access_cm_create_keys_from_netkey &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k3
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k1
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
</UL>

<P><STRONG><a name="[364]"></a>ms_access_cm_friend_credentials_refresh</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.ms_access_cm_friend_credentials_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = ms_access_cm_friend_credentials_refresh &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_netkey
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_get_frndship_info
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_refresh_all_friend_credentials
</UL>

<P><STRONG><a name="[365]"></a>ms_access_cm_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_access_cm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ms_access_cm_init &rArr; access_ps_init &rArr; nvsto_register
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_ps_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init_subnet_table
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init_dev_key_table
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init_appkey_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init
</UL>

<P><STRONG><a name="[2d7]"></a>ms_access_cm_init_appkey_table</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.ms_access_cm_init_appkey_table))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init
</UL>

<P><STRONG><a name="[366]"></a>ms_access_cm_init_dev_key_table</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_access_cm_init_dev_key_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ms_access_cm_init_dev_key_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init
</UL>

<P><STRONG><a name="[2d6]"></a>ms_access_cm_init_subnet_table</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.ms_access_cm_init_subnet_table))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init
</UL>

<P><STRONG><a name="[367]"></a>ms_access_cm_refresh_all_appkeys</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_access_cm_refresh_all_appkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_access_cm_refresh_all_appkeys &rArr; ms_access_cm_appkey_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_lowest_bit_set (via Veneer)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_appkey_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
</UL>

<P><STRONG><a name="[368]"></a>ms_access_cm_refresh_all_friend_credentials</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_access_cm_refresh_all_friend_credentials))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = ms_access_cm_refresh_all_friend_credentials &rArr; ms_access_cm_friend_credentials_refresh &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_lowest_bit_set (via Veneer)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_friend_credentials_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
</UL>

<P><STRONG><a name="[2ae]"></a>ms_access_cm_save_netkey_at_offset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_access_cm_save_netkey_at_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ms_access_cm_save_netkey_at_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey
</UL>

<P><STRONG><a name="[2af]"></a>ms_access_cm_update_key_refresh_phase</STRONG> (Thumb, 240 bytes, Stack size 88 bytes, libethermind_mesh_core.lib(i.ms_access_cm_update_key_refresh_phase))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_refresh_all_friend_credentials &rArr; ms_access_cm_friend_credentials_refresh &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_save_netkey_at_offset
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_refresh_all_friend_credentials
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_refresh_all_appkeys
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_key_refresh_phase
</UL>

<P><STRONG><a name="[2dc]"></a>ms_access_get_element_models</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ms_access_get_element_models))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ms_access_get_element_models
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_composition_data
</UL>

<P><STRONG><a name="[2e0]"></a>ms_access_get_publish_addr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_access_get_publish_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ms_access_get_publish_addr &rArr; ms_get_address
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_get_address
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_publish
</UL>

<P><STRONG><a name="[31e]"></a>ms_access_handle_rx_opcode</STRONG> (Thumb, 286 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.ms_access_handle_rx_opcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ms_access_handle_rx_opcode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_virtual_address
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_address
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_bit (via Veneer)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_is_opcode_in_model
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_pkt_in
</UL>

<P><STRONG><a name="[2f7]"></a>ms_access_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_access_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ms_access_init &rArr; ms_access_ps_load &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_load
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init_supported_features
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init_periodic_step_timer
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[36c]"></a>ms_access_init_periodic_step_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_access_init_periodic_step_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ms_access_init_periodic_step_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init
</UL>

<P><STRONG><a name="[36b]"></a>ms_access_init_supported_features</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.ms_access_init_supported_features))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init
</UL>

<P><STRONG><a name="[36a]"></a>ms_access_is_opcode_in_model</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.ms_access_is_opcode_in_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ms_access_is_opcode_in_model
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
</UL>

<P><STRONG><a name="[36e]"></a>ms_access_ps_load</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_access_ps_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ms_access_ps_load &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_open (via Veneer)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_close (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_seek (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init
</UL>

<P><STRONG><a name="[2a5]"></a>ms_access_ps_store</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_access_ps_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_open (via Veneer)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_close (via Veneer)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_seek (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_virtual_address
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_address
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delete_address
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_unbind_model_app
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_update_delete_appkey
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_transmit_state
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_node_identity
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_features_field
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_model_subscription
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_all_model_subscription
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_device_key
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_bind_model_app
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_iv_index
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_friend_sec_credential
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_model_subscription
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
</UL>

<P><STRONG><a name="[2e1]"></a>ms_access_publish_ex</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ms_access_publish_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_publish
</UL>

<P><STRONG><a name="[2e3]"></a>ms_access_search_and_allocate_model</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ms_access_search_and_allocate_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ms_access_search_and_allocate_model
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_model
</UL>

<P><STRONG><a name="[2d3]"></a>ms_access_start_periodic_step_timer</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_access_start_periodic_step_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ms_access_start_periodic_step_timer &rArr; ms_access_add_periodic_step_timer_entity &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_add_periodic_step_timer_entity
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication_period_divisor
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
</UL>

<P><STRONG><a name="[2d2]"></a>ms_access_stop_periodic_step_timer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_access_stop_periodic_step_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_access_stop_periodic_step_timer &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication_period_divisor
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
</UL>

<P><STRONG><a name="[2f3]"></a>ms_brr_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_brr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ms_brr_init &rArr; ms_internal_verificaiton_check &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_internal_verificaiton_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[2fa]"></a>ms_common_init_transition_timer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_common_init_transition_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ms_common_init_transition_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[2b1]"></a>ms_delete_address</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_delete_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ms_delete_address &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_model_subscription
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_all_model_subscription
</UL>

<P><STRONG><a name="[2b7]"></a>ms_delete_appkey</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_delete_appkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ms_delete_appkey &rArr; bitarray_reset_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_bit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_update_delete_appkey
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_netkey
</UL>

<P><STRONG><a name="[2f8]"></a>ms_fsm_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.ms_fsm_init))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[370]"></a>ms_fsm_post_event</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ms_fsm_post_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>

<P><STRONG><a name="[371]"></a>ms_fsm_register_module</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_fsm_register_module))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ms_fsm_register_module &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_register
</UL>

<P><STRONG><a name="[2bb]"></a>ms_get_address</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.ms_get_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ms_get_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_model_subscription_list
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_model_publication
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_get_publish_addr
</UL>

<P><STRONG><a name="[36f]"></a>ms_internal_verificaiton_check</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_internal_verificaiton_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ms_internal_verificaiton_check &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_ltrn_init
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_brr_init
</UL>

<P><STRONG><a name="[2f5]"></a>ms_ltrn_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_ltrn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ms_ltrn_init &rArr; ms_internal_verificaiton_check &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_init_sar_contexts
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_init_replay_cache
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_alloc_replay_cache
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_register
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_internal_verificaiton_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[2f4]"></a>ms_net_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ms_net_init &rArr; ms_internal_verificaiton_check &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_queue_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_init_cache
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_register_beacon_handler
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_internal_verificaiton_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[2f9]"></a>ms_prov_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.ms_prov_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ms_prov_init &rArr; prov_fsm_register &rArr; ms_fsm_register_module &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_register
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_free_context
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_register_beacon_handler
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_register
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_internal_verificaiton_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[3a9]"></a>ms_scene_store</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, libethermind_mesh_models.lib(i.ms_scene_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ms_scene_store
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scene_server_cb
</UL>

<P><STRONG><a name="[2b5]"></a>ms_search_address</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ms_search_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ms_search_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_model_subscription
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_valid_subscription_address
</UL>

<P><STRONG><a name="[2ab]"></a>ms_search_and_add_address</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_search_and_add_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ms_search_and_add_address &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_model_subscription
</UL>

<P><STRONG><a name="[2ac]"></a>ms_search_and_add_virtual_address</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ms_search_and_add_virtual_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_va
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_model_subscription
</UL>

<P><STRONG><a name="[2de]"></a>ms_search_virtual_address</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.ms_search_virtual_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ms_search_virtual_address
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_is_valid_subscription_address
</UL>

<P><STRONG><a name="[2b6]"></a>ms_search_virtual_address_on_label</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ms_search_virtual_address_on_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ms_search_virtual_address_on_label &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_model_subscription
</UL>

<P><STRONG><a name="[2c7]"></a>ms_stbx_k1</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.ms_stbx_k1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ms_stbx_k1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_generate_authkeys
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_network_id
</UL>

<P><STRONG><a name="[2aa]"></a>ms_stbx_k2</STRONG> (Thumb, 218 bytes, Stack size 264 bytes, libethermind_mesh_core.lib(i.ms_stbx_k2))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_friend_credentials_refresh
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_nid
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_friend_sec_credential
</UL>

<P><STRONG><a name="[2c5]"></a>ms_stbx_k3</STRONG> (Thumb, 86 bytes, Stack size 88 bytes, libethermind_mesh_core.lib(i.ms_stbx_k3))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ms_stbx_k3 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_network_id
</UL>

<P><STRONG><a name="[2a7]"></a>ms_stbx_k4</STRONG> (Thumb, 84 bytes, Stack size 88 bytes, libethermind_mesh_core.lib(i.ms_stbx_k4))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ms_stbx_k4 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac (via Veneer)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_update_delete_appkey
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey
</UL>

<P><STRONG><a name="[2c6]"></a>ms_stbx_s1</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.ms_stbx_s1))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_generate_authkeys
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_va
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k4
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k3
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_network_id
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_unprovisioned_beacon
</UL>

<P><STRONG><a name="[37d]"></a>ms_stbx_va</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, libethermind_mesh_core.lib(i.ms_stbx_va))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac (via Veneer)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_virtual_address
</UL>

<P><STRONG><a name="[2f6]"></a>ms_trn_init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_trn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ms_trn_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init
</UL>

<P><STRONG><a name="[387]"></a>net_add_to_cache</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.net_add_to_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_add_to_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[380]"></a>net_create_pecb_input</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_create_pecb_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_create_pecb_input
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
</UL>

<P><STRONG><a name="[381]"></a>net_decode_frame</STRONG> (Thumb, 320 bytes, Stack size 192 bytes, libethermind_mesh_core.lib(i.net_decode_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = net_decode_frame &rArr; MS_access_cm_lookup_nid &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_decrypt (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_is_in_cache
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_nid
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_create_pecb_input
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index_by_ivi
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[7d]"></a>net_handle_secure_beacon</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.net_handle_secure_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = net_handle_secure_beacon &rArr; MS_access_cm_set_key_refresh_phase &rArr; ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_refresh_all_friend_credentials &rArr; ms_access_cm_friend_credentials_refresh &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac (via Veneer)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_network_id
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_key_refresh_phase
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_iv_index
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_lpn_register_security_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_net_init)
</UL>
<P><STRONG><a name="[373]"></a>net_init_cache</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.net_init_cache))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
</UL>

<P><STRONG><a name="[384]"></a>net_is_in_cache</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.net_is_in_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = net_is_in_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
</UL>

<P><STRONG><a name="[383]"></a>net_obfuscate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_obfuscate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_obfuscate &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
</UL>

<P><STRONG><a name="[385]"></a>net_pkt_in</STRONG> (Thumb, 336 bytes, Stack size 112 bytes, libethermind_mesh_core.lib(i.net_pkt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = net_pkt_in &rArr; net_decode_frame &rArr; MS_access_cm_lookup_nid &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_recv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_process_first_pkt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_add_to_cache
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_master_subnet
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features_field
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_gatt_recv_cb
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_adv_recv_cb
</UL>

<P><STRONG><a name="[303]"></a>net_pkt_send</STRONG> (Thumb, 456 bytes, Stack size 240 bytes, libethermind_mesh_core.lib(i.net_pkt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_queue_depth_check (via Veneer)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_encrypt (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_privacy_key
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_nid
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_encryption_key
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_enqueue
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_create_pecb_input
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_send_pdu
</UL>

<P><STRONG><a name="[394]"></a>net_proxy_filter_check_forwarding</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.net_proxy_filter_check_forwarding))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = net_proxy_filter_check_forwarding
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_send
</UL>

<P><STRONG><a name="[393]"></a>net_proxy_iface_down</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.net_proxy_iface_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_proxy_iface_down
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_gatt_recv_cb
</UL>

<P><STRONG><a name="[392]"></a>net_proxy_iface_up</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_iface_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_proxy_iface_up
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_gatt_recv_cb
</UL>

<P><STRONG><a name="[375]"></a>net_proxy_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_proxy_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
</UL>

<P><STRONG><a name="[71]"></a>net_proxy_netid_timeout_handler</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.net_proxy_netid_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = net_proxy_netid_timeout_handler &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_network_id
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_start_proxy_adv
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_end
</UL>
<BR>[Address Reference Count : 2]<UL><LI> libethermind_mesh_core.lib(i.MS_proxy_server_adv_start)
<LI> libethermind_mesh_core.lib(i.net_proxy_netid_timeout_handler)
</UL>
<P><STRONG><a name="[30b]"></a>net_proxy_nodeid_adv</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, libethermind_mesh_core.lib(i.net_proxy_nodeid_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = net_proxy_nodeid_adv &rArr; MS_brr_start_proxy_adv
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_encrypt (via Veneer)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_rand_generate (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_identity_key
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_start_proxy_adv
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_end
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_nodeid_timeout_handler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_start
</UL>

<P><STRONG><a name="[70]"></a>net_proxy_nodeid_timeout_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_nodeid_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = net_proxy_nodeid_timeout_handler &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_nodeid_adv
</UL>
<BR>[Address Reference Count : 2]<UL><LI> libethermind_mesh_core.lib(i.MS_proxy_server_adv_start)
<LI> libethermind_mesh_core.lib(i.net_proxy_nodeid_timeout_handler)
</UL>
<P><STRONG><a name="[386]"></a>net_proxy_process_first_pkt</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.net_proxy_process_first_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_proxy_process_first_pkt &rArr; net_proxy_server_filter_op
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_server_filter_op
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[388]"></a>net_proxy_recv</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = net_proxy_recv &rArr; net_proxy_send_filter_status &rArr; net_proxy_send &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_server_set_filter
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_server_filter_op
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_send_filter_status
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>

<P><STRONG><a name="[38f]"></a>net_proxy_send</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.net_proxy_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = net_proxy_send &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_send_pdu
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_alloc_seq_num
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_send_filter_status
</UL>

<P><STRONG><a name="[38e]"></a>net_proxy_send_filter_status</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_send_filter_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = net_proxy_send_filter_status &rArr; net_proxy_send &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_send
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_recv
</UL>

<P><STRONG><a name="[38c]"></a>net_proxy_server_filter_op</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.net_proxy_server_filter_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = net_proxy_server_filter_op
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_recv
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_process_first_pkt
</UL>

<P><STRONG><a name="[38d]"></a>net_proxy_server_set_filter</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_proxy_server_set_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = net_proxy_server_set_filter
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_recv
</UL>

<P><STRONG><a name="[390]"></a>net_trigger_tx</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_trigger_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = net_trigger_tx &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_send
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_timeout_handler
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_enqueue
</UL>

<P><STRONG><a name="[38b]"></a>net_tx_enqueue</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.net_tx_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = net_tx_enqueue &rArr; net_trigger_tx &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_transmit_state
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_trigger_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send
</UL>

<P><STRONG><a name="[374]"></a>net_tx_queue_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.net_tx_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = net_tx_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
</UL>

<P><STRONG><a name="[84]"></a>net_tx_timeout_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.net_tx_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = net_tx_timeout_handler &rArr; net_trigger_tx &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem (via Veneer)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_trigger_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.net_trigger_tx)
</UL>
<P><STRONG><a name="[85]"></a>netif_adv_recv_cb</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.netif_adv_recv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = netif_adv_recv_cb &rArr; net_pkt_in &rArr; net_decode_frame &rArr; MS_access_cm_lookup_nid &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.netif_init)
</UL>
<P><STRONG><a name="[86]"></a>netif_gatt_recv_cb</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.netif_gatt_recv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = netif_gatt_recv_cb &rArr; net_pkt_in &rArr; net_decode_frame &rArr; MS_access_cm_lookup_nid &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_iface_up
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_iface_down
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_stop
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.netif_init)
</UL>
<P><STRONG><a name="[376]"></a>netif_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.netif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init
</UL>

<P><STRONG><a name="[391]"></a>netif_send</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.netif_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netif_send &rArr; MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_filter_check_forwarding
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_trigger_tx
</UL>

<P><STRONG><a name="[93]"></a>prov_access_state_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.prov_access_state_handler))
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>prov_adv_recv_cb</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_adv_recv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = prov_adv_recv_cb &rArr; prov_handle_adv_message &rArr; prov_handle_ack &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_prov_init)
</UL>
<P><STRONG><a name="[304]"></a>prov_alloc_context</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_alloc_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prov_alloc_context
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind
</UL>

<P><STRONG><a name="[396]"></a>prov_calc_confirm</STRONG> (Thumb, 250 bytes, Stack size 256 bytes, libethermind_mesh_core.lib(i.prov_calc_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = prov_calc_confirm &rArr; ms_stbx_k1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k1
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_confirmation_handler
</UL>

<P><STRONG><a name="[8a]"></a>prov_complete_timeout_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_complete_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = prov_complete_timeout_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.se_prov_complete_handler)
</UL>
<P><STRONG><a name="[398]"></a>prov_findcontext_by_brr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_findcontext_by_brr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prov_findcontext_by_brr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_gatt_message
</UL>

<P><STRONG><a name="[308]"></a>prov_findcontext_by_handle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.prov_findcontext_by_handle))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_set_authval
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_send_pdu
</UL>

<P><STRONG><a name="[3a3]"></a>prov_findcontext_by_linkid</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.prov_findcontext_by_linkid))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[399]"></a>prov_findcontext_by_uuid</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_findcontext_by_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prov_findcontext_by_uuid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[39a]"></a>prov_framensend_ack</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.prov_framensend_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prov_framensend_ack &rArr; MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[39b]"></a>prov_framensend_pb_adv_pdu</STRONG> (Thumb, 264 bytes, Stack size 88 bytes, libethermind_mesh_core.lib(i.prov_framensend_pb_adv_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_restart_proc_timer
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_generate_fcs
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>

<P><STRONG><a name="[39e]"></a>prov_framensend_pb_gatt_pdu</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.prov_framensend_pb_gatt_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prov_framensend_pb_gatt_pdu &rArr; MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>

<P><STRONG><a name="[39f]"></a>prov_framensend_pdu</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.prov_framensend_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_gatt_pdu
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_failure
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pdu_ack_timeout_handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_start_handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_invite_handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_inputcom_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_confirmation_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_complete_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_capabilities_handler
</UL>

<P><STRONG><a name="[305]"></a>prov_free_context</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_free_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prov_free_context
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_init
</UL>

<P><STRONG><a name="[307]"></a>prov_fsm_post_event</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_fsm_post_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prov_fsm_post_event &rArr; ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_post_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_send_pdu
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_pdu
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_ack
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_invite_handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_inputcom_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_confirmation_handler
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_process_event
</UL>

<P><STRONG><a name="[379]"></a>prov_fsm_register</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_fsm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prov_fsm_register &rArr; ms_fsm_register_module &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_register_module
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_prov_init
</UL>

<P><STRONG><a name="[7f]"></a>prov_gatt_recv_cb</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_gatt_recv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prov_gatt_recv_cb &rArr; prov_handle_gatt_message &rArr; prov_handle_pdu &rArr; prov_fsm_post_event &rArr; ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_gatt_message
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_prov_init)
</UL>
<P><STRONG><a name="[3a1]"></a>prov_generate_authkeys</STRONG> (Thumb, 156 bytes, Stack size 120 bytes, libethermind_mesh_core.lib(i.prov_generate_authkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = prov_generate_authkeys &rArr; ms_stbx_k1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k1
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
</UL>

<P><STRONG><a name="[39c]"></a>prov_generate_fcs</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, libethermind_mesh_core.lib(i.prov_generate_fcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prov_generate_fcs
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu
</UL>

<P><STRONG><a name="[3a2]"></a>prov_handle_ack</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = prov_handle_ack &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[395]"></a>prov_handle_adv_message</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.prov_handle_adv_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = prov_handle_adv_message &rArr; prov_handle_ack &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem (via Veneer)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_restart_proc_timer
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_accept
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_pdu
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_ack
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_ack
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_uuid
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_linkid
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_end
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_adv_recv_cb
</UL>

<P><STRONG><a name="[3a0]"></a>prov_handle_gatt_message</STRONG> (Thumb, 56 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.prov_handle_gatt_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prov_handle_gatt_message &rArr; prov_handle_pdu &rArr; prov_fsm_post_event &rArr; ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_pdu
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_brr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_gatt_recv_cb
</UL>

<P><STRONG><a name="[3a4]"></a>prov_handle_pdu</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_handle_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prov_handle_pdu &rArr; prov_fsm_post_event &rArr; ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem (via Veneer)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_gatt_message
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[80]"></a>prov_handle_unprovisioned_beacon</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.prov_handle_unprovisioned_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prov_handle_unprovisioned_beacon &rArr; prov_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_prov_init)
</UL>
<P><STRONG><a name="[3a5]"></a>prov_link_accept</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_link_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prov_link_accept &rArr; MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
</UL>

<P><STRONG><a name="[88]"></a>prov_link_ack_timeout_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_link_ack_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = prov_link_ack_timeout_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.prov_link_open)
</UL>
<P><STRONG><a name="[3a7]"></a>prov_link_close</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.prov_link_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prov_link_close &rArr; MS_brr_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
</UL>

<P><STRONG><a name="[306]"></a>prov_link_open</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, libethermind_mesh_core.lib(i.prov_link_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prov_link_open &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_ack_timeout_handler
</UL>

<P><STRONG><a name="[3a6]"></a>prov_notify</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.prov_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prov_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_unprovisioned_beacon
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_invite_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_capabilities_handler
</UL>

<P><STRONG><a name="[87]"></a>prov_pdu_ack_timeout_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_pdu_ack_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = prov_pdu_ack_timeout_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.prov_framensend_pb_adv_pdu)
</UL>
<P><STRONG><a name="[89]"></a>prov_proc_timeout_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_proc_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = prov_proc_timeout_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.prov_restart_proc_timer)
</UL>
<P><STRONG><a name="[397]"></a>prov_procedure_complete</STRONG> (Thumb, 154 bytes, Stack size 424 bytes, libethermind_mesh_core.lib(i.prov_procedure_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_send_failure
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_close
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_free_context
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_device_key
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_proc_timeout_handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_pdu_ack_timeout_handler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_ack_timeout_handler
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_ack
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_complete_timeout_handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_start_handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_error_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_complete_handler
</UL>

<P><STRONG><a name="[309]"></a>prov_process_event</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.prov_process_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prov_process_event &rArr; prov_fsm_post_event &rArr; ms_fsm_post_event &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_send_pdu
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler
</UL>

<P><STRONG><a name="[39d]"></a>prov_restart_proc_timer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.prov_restart_proc_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu
</UL>

<P><STRONG><a name="[3a8]"></a>prov_send_failure</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.prov_send_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
</UL>

<P><STRONG><a name="[72]"></a>scene_server_cb</STRONG> (Thumb, 448 bytes, Stack size 120 bytes, libethermind_mesh_models.lib(i.scene_server_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = scene_server_cb &rArr; MS_access_reply_and_publish &rArr; MS_access_reply &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_scene_store
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_scene_recall
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_scene_frame_status_response
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_scene_frame_reg_status_response
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_scene_delete
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply_and_publish
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_models.lib(i.MS_scene_server_init)
</UL>
<P><STRONG><a name="[73]"></a>scene_server_publish_timout_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, libethermind_mesh_models.lib(i.scene_server_publish_timout_cb))
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_models.lib(i.MS_scene_server_init)
</UL>
<P><STRONG><a name="[96]"></a>se_prov_capabilities_handler</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.se_prov_capabilities_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = se_prov_capabilities_handler &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>se_prov_complete_handler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.se_prov_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = se_prov_complete_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>se_prov_confirmation_handler</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.se_prov_confirmation_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = se_prov_confirmation_handler &rArr; prov_calc_confirm &rArr; ms_stbx_k1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>se_prov_data_handler</STRONG> (Thumb, 392 bytes, Stack size 152 bytes, libethermind_mesh_core.lib(i.se_prov_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = se_prov_data_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_encrypt (via Veneer)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_decrypt (via Veneer)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>se_prov_error_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.se_prov_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = se_prov_error_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>se_prov_inputcom_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.se_prov_inputcom_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = se_prov_inputcom_handler &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>se_prov_invite_handler</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.se_prov_invite_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = se_prov_invite_handler &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_rand_generate (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>se_prov_pubkey_handler</STRONG> (Thumb, 410 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.se_prov_pubkey_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728<LI>Call Chain = se_prov_pubkey_handler &rArr; cry_ecdh_generate_secret &rArr; phyplus_ecdh_generate_secret &rArr; P256_ecdh_shared_secret &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_read_static_oob_auth_pl (via Veneer)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_read_device_oob_pubkey_pl (via Veneer)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_generate_secret (via Veneer)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_process_event
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>se_prov_random_handler</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.se_prov_random_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = se_prov_random_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_notify
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_generate_authkeys
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_fsm_post_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>se_prov_start_handler</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.se_prov_start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = se_prov_start_handler &rArr; prov_procedure_complete &rArr; prov_send_failure &rArr; prov_framensend_pdu &rArr; prov_framensend_pb_adv_pdu &rArr; prov_restart_proc_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.constdata)
</UL>
<P><STRONG><a name="[315]"></a>trn_add_to_queue</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.trn_add_to_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = trn_add_to_queue &rArr; trn_update_lpn_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_update_lpn_ack
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_dequeue_queue_head
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_add_to_queuelet
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_lpn_register_security_update
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu
</UL>

<P><STRONG><a name="[3ac]"></a>trn_add_to_queuelet</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.trn_add_to_queuelet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = trn_add_to_queuelet
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_add_to_queue
</UL>

<P><STRONG><a name="[3ad]"></a>trn_dequeue_queue_head</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.trn_dequeue_queue_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trn_dequeue_queue_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_poll
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_add_to_queue
</UL>

<P><STRONG><a name="[3af]"></a>trn_frame_decrypt_pdu</STRONG> (Thumb, 228 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.trn_frame_decrypt_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = trn_frame_decrypt_pdu &rArr; cry_aes_128_ccm_decrypt &rArr; aes_ccm_ad &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_decrypt (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_aid
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index_by_ivi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_device_key
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[316]"></a>trn_frame_secure_pdu</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, libethermind_mesh_core.lib(i.trn_frame_secure_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = trn_frame_secure_pdu &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_encrypt (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_access_pdu
</UL>

<P><STRONG><a name="[35e]"></a>trn_frnd_handle_segment_ack</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.trn_frnd_handle_segment_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = trn_frnd_handle_segment_ack &rArr; trn_frndpoll &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_ack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in
</UL>

<P><STRONG><a name="[313]"></a>trn_frnd_send</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.trn_frnd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_control_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndreq_rsp_handler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_rsp_handler
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndclear
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_lpn_clear_friendship
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_subscription_list_add_remove
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_clear
</UL>

<P><STRONG><a name="[3b2]"></a>trn_frndclear</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.trn_frndclear))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = trn_frndclear &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_rsp_handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndclear_retry_timeout_handler
</UL>

<P><STRONG><a name="[8b]"></a>trn_frndclear_retry_timeout_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.trn_frndclear_retry_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = trn_frndclear_retry_timeout_handler &rArr; trn_frndclear &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndclear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.trn_frndclear)
</UL>
<P><STRONG><a name="[3b1]"></a>trn_frndpoll</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.trn_frndpoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = trn_frndpoll &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_send
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_send_handler
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_update
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_offer
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_handle_segment_ack
</UL>

<P><STRONG><a name="[90]"></a>trn_frndpoll_rsp_handler</STRONG> (Thumb, 322 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.trn_frndpoll_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = trn_frndpoll_rsp_handler &rArr; trn_frndclear &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_friendship_role
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_key_refresh_phase
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_get_from_queue
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndclear
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_send
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_iv_index
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_send_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.trn_handle_frnd_poll)
</UL>
<P><STRONG><a name="[8f]"></a>trn_frndpoll_send_handler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.trn_frndpoll_send_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = trn_frndpoll_send_handler &rArr; MS_access_cm_set_friendship_role &rArr; MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_friendship_role
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_wakeup
</UL>
<BR>[Address Reference Count : 2]<UL><LI> libethermind_mesh_core.lib(i.trn_frndrx_window_timeout_handler)
<LI> libethermind_mesh_core.lib(i.trn_handle_frnd_update)
</UL>
<P><STRONG><a name="[8d]"></a>trn_frndpoll_timeout_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.trn_frndpoll_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = trn_frndpoll_timeout_handler &rArr; MS_access_cm_set_friendship_role &rArr; MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_friendship_role
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_lpn_element
</UL>
<BR>[Address Reference Count : 3]<UL><LI> libethermind_mesh_core.lib(i.trn_frndpoll_rsp_handler)
<LI> libethermind_mesh_core.lib(i.trn_frndreq_rsp_handler)
<LI> libethermind_mesh_core.lib(i.trn_handle_frnd_subscription_list_add_remove)
</UL>
<P><STRONG><a name="[91]"></a>trn_frndreq_rsp_handler</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.trn_frndreq_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = trn_frndreq_rsp_handler &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_friend_sec_credential
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.trn_handle_frnd_req)
</UL>
<P><STRONG><a name="[8c]"></a>trn_frndrx_delay_timeout_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.trn_frndrx_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = trn_frndrx_delay_timeout_handler &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.trn_frndpoll)
</UL>
<P><STRONG><a name="[8e]"></a>trn_frndrx_window_timeout_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.trn_frndrx_window_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = trn_frndrx_window_timeout_handler &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.trn_frndrx_delay_timeout_handler)
</UL>
<P><STRONG><a name="[3b3]"></a>trn_get_from_queue</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.trn_get_from_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = trn_get_from_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_rsp_handler
</UL>

<P><STRONG><a name="[3b4]"></a>trn_handle_frnd_clear</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.trn_handle_frnd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = trn_handle_frnd_clear &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_send
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_search_lpn_element
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_lpn_element
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[3b5]"></a>trn_handle_frnd_clear_cnf</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.trn_handle_frnd_clear_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = trn_handle_frnd_clear_cnf &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_friendship_role
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[3b6]"></a>trn_handle_frnd_offer</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.trn_handle_frnd_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = trn_handle_frnd_offer &rArr; trn_frndpoll &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_friend_sec_credential
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[3b7]"></a>trn_handle_frnd_poll</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.trn_handle_frnd_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = trn_handle_frnd_poll &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_dequeue_queue_head
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[3b8]"></a>trn_handle_frnd_req</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.trn_handle_frnd_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = trn_handle_frnd_req &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_verify_request_criteria
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_alloc_lpn_element
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_get_packet_rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[3ba]"></a>trn_handle_frnd_subscription_list_add_remove</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, libethermind_mesh_core.lib(i.trn_handle_frnd_subscription_list_add_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = trn_handle_frnd_subscription_list_add_remove &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[3bb]"></a>trn_handle_frnd_subscription_list_cnf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.trn_handle_frnd_subscription_list_cnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = trn_handle_frnd_subscription_list_cnf &rArr; MS_brr_sleep
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[3bc]"></a>trn_handle_frnd_update</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.trn_handle_frnd_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = trn_handle_frnd_update &rArr; MS_access_cm_set_friendship_role &rArr; MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_key_refresh_phase
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_iv_index
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_friendship_role
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[3bd]"></a>trn_handle_heartbeat</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.trn_handle_heartbeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = trn_handle_heartbeat
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in
</UL>

<P><STRONG><a name="[83]"></a>trn_pkt_in</STRONG> (Thumb, 700 bytes, Stack size 472 bytes, libethermind_mesh_core.lib(i.trn_pkt_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = trn_pkt_in &rArr; trn_handle_frnd_offer &rArr; trn_frndpoll &rArr; trn_frnd_send &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_update
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_subscription_list_cnf
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_subscription_list_add_remove
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_req
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_poll
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_offer
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_clear_cnf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_clear
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features_field
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_heartbeat
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_decrypt_pdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_trn_init)
</UL>
<P><STRONG><a name="[3ae]"></a>trn_update_lpn_ack</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, libethermind_mesh_core.lib(i.trn_update_lpn_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = trn_update_lpn_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_add_to_queue
</UL>

<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[3be]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3bf]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3c0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3c1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3c2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3c3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b0]"></a>P256_pointmult</STRONG> (Thumb, 450 bytes, Stack size 1068 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_abs_int
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_jacobian_to_affine
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_add_j
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_double_j
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_select
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_copy32_unaligned
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_copy32
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_negate_mod_m_if
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_greater_or_equal_than
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_point_is_on_curve
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_from_montgomery
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_to_montgomery
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_load_1
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_ecdh_shared_secret
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_ecdh_keygen
</UL>

<P><STRONG><a name="[b6]"></a>P256_ecdh_keygen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = P256_ecdh_keygen &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_init
</UL>

<P><STRONG><a name="[b7]"></a>P256_ecdh_shared_secret</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = P256_ecdh_shared_secret &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_generate_secret
</UL>

<P><STRONG><a name="[20]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[b9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[ba]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[bb]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[bc]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr_start
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth_start
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_read_static_oob_auth_pl
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_read_device_oob_pubkey_pl
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_bcon_send
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Write
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_encrypt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_set_adv_scanrsp_data_pl
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_set_authval (via Veneer)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_send_pdu (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_scene_server_cb
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_model_state_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_model_state_get
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_generic_onoff_server_cb
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_generic_onoff_model_state_set
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_subkeys
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_finalize_mac
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_overwrite_handler (via Veneer)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_delete_handler (via Veneer)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler (via Veneer)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_set_handler (via Veneer)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_get_handler (via Veneer)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_bind_unbind_handler (via Veneer)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_add_update_delete_handler (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_gatt_message (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_unprovisioned_beacon (via Veneer)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_generate_authkeys (via Veneer)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm (via Veneer)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_start_handler (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_invite_handler (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_confirmation_handler (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_capabilities_handler (via Veneer)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_open (via Veneer)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k3 (via Veneer)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2 (via Veneer)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_virtual_address (via Veneer)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_update_key_refresh_phase (via Veneer)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_save_netkey_at_offset (via Veneer)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_friend_credentials_refresh (via Veneer)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_create_keys_from_netkey (via Veneer)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_appkey_refresh (via Veneer)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_update_delete_appkey (via Veneer)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_netkey (via Veneer)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_device_key (via Veneer)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey (via Veneer)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_send_pdu (via Veneer)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_identity_key (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_nodeid_adv (via Veneer)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_privacy_key (via Veneer)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_network_id (via Veneer)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_encryption_key (via Veneer)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_subnet_beacon_key (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_enqueue (via Veneer)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send (via Veneer)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_nid (via Veneer)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_network_id (via Veneer)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame (via Veneer)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_create_pecb_input (via Veneer)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_friend_sec_credential (via Veneer)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_update_lpn_ack (via Veneer)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_get_from_queue (via Veneer)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_add_to_queuelet (via Veneer)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_get_frndship_info (via Veneer)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_secure_pdu (via Veneer)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_aid (via Veneer)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_decrypt_pdu (via Veneer)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segment (via Veneer)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_send_seg_pdu (via Veneer)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ltrn_send_pdu (via Veneer)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_seg_pdu (via Veneer)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_start_proxy_adv (via Veneer)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_send_pdu (via Veneer)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_unprovisioned_beacon (via Veneer)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brr_read_data_ind (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init (via Veneer)
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_entity
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_add_bearer (via Veneer)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_send_pdu (via Veneer)
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete (via Veneer)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_lowest_bit_set
</UL>

<P><STRONG><a name="[3c4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init (via Veneer)
</UL>

<P><STRONG><a name="[3c5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth_start
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_set_adv_scanrsp_data_pl
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data (via Veneer)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_model_states_initialization
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init_dev_key_table (via Veneer)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication (via Veneer)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset (via Veneer)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_model_publication (via Veneer)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init (via Veneer)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_server_set_filter (via Veneer)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_init (via Veneer)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_create_pecb_input (via Veneer)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_trn_init (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init (via Veneer)
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_remove_bearer (via Veneer)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_setup
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_dump_bytes
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_scene_server_init (via Veneer)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_set_handler (via Veneer)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_publication_get_handler (via Veneer)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_health_server_init (via Veneer)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_gatt_message (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_unprovisioned_beacon (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_confirmation_handler (via Veneer)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_open (via Veneer)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_free_context (via Veneer)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_alloc_context (via Veneer)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_all
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_reset (via Veneer)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_init (via Veneer)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init_periodic_step_timer (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_send_handler (via Veneer)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_lpn_element (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_lpn_clear_friendship (via Veneer)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_set_heartbeat_publication (via Veneer)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_init_sar_contexts (via Veneer)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_init_replay_cache (via Veneer)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_alloc_replay_cache (via Veneer)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_trn_init (via Veneer)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_net_init (via Veneer)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_common_init_transition_timer (via Veneer)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_brr_init (via Veneer)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_init (via Veneer)
</UL>

<P><STRONG><a name="[3c7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e7]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI_process_line
</UL>

<P><STRONG><a name="[17d]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_check_app_key
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_open
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_binding_app_key
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_finalize_mac
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_uuid (via Veneer)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_findcontext_by_brr (via Veneer)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler (via Veneer)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_virtual_address_on_label (via Veneer)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_search_and_add_virtual_address (via Veneer)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_appkey_handle (via Veneer)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey (via Veneer)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey (via Veneer)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_lookup_network_id (via Veneer)
</UL>

<P><STRONG><a name="[2f0]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scene_server_cb (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_server_cb (via Veneer)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_light_hsl_server_state_update (via Veneer)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_onoff_server_cb (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_generic_onoff_server_state_update (via Veneer)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_get_fault_status (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_cb (via Veneer)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_health_server_init (via Veneer)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_register_module (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_post_event (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_common_get_transition_time_from_ms (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init (via Veneer)
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
</UL>

<P><STRONG><a name="[13a]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[3c8]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
</UL>

<P><STRONG><a name="[26b]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3c9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3ca]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[3cb]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[c1]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[ca]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[c9]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3cc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3cd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>BLE_gap_connect</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, blemesh.o(i.BLE_gap_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLE_gap_connect
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EstablishLinkReq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_scan_complete
</UL>

<P><STRONG><a name="[d9]"></a>BLE_gap_set_adv_enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, blemesh.o(i.BLE_gap_set_adv_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_gap_set_adv_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_pl
</UL>

<P><STRONG><a name="[dc]"></a>BLE_gap_set_adv_params</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, blemesh.o(i.BLE_gap_set_adv_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLE_gap_set_adv_params
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_data_pl
</UL>

<P><STRONG><a name="[df]"></a>BLE_gap_set_advscanrsp_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, blemesh.o(i.BLE_gap_set_advscanrsp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_gap_set_advscanrsp_data
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_data_pl
</UL>

<P><STRONG><a name="[e1]"></a>BLE_gap_set_scan_enable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, blemesh.o(i.BLE_gap_set_scan_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLE_gap_set_scan_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryCancel (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
</UL>

<P><STRONG><a name="[e5]"></a>BLE_gap_set_scan_params</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, blemesh.o(i.BLE_gap_set_scan_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLE_gap_set_scan_params
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SetParamValue (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_init_pl
</UL>

<P><STRONG><a name="[e6]"></a>CLI_process_line</STRONG> (Thumb, 160 bytes, Stack size 104 bytes, libethermind_utils.lib(i.CLI_process_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CLI_process_line &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[e8]"></a>DevInfo_AddService</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, devinfoservice.o(i.DevInfo_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DevInfo_AddService &rArr; GATTServApp_RegisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[ea]"></a>EM_alloc_mem</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, em_os.o(i.EM_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memory_statics
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_scene_server_cb
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message (via Veneer)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_composition_data (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_enqueue (via Veneer)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_alloc_ctx (via Veneer)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_search_and_alloc_ctx (via Veneer)
</UL>

<P><STRONG><a name="[1b9]"></a>EM_debug_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, em_debug.o(i.EM_debug_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[ee]"></a>EM_debug_printf</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, em_debug.o(i.EM_debug_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scene_server_cb (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_server_cb (via Veneer)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_light_hsl_server_state_update (via Veneer)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_onoff_server_cb (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_generic_onoff_server_state_update (via Veneer)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_get_fault_status (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_cb (via Veneer)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_health_server_init (via Veneer)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_register_module (via Veneer)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_fsm_post_event (via Veneer)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_common_get_transition_time_from_ms (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init (via Veneer)
</UL>

<P><STRONG><a name="[1ec]"></a>EM_enter_sleep_pl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, em_platform.o(i.EM_enter_sleep_pl))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_sleep
</UL>

<P><STRONG><a name="[1ed]"></a>EM_exit_sleep_pl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, em_platform.o(i.EM_exit_sleep_pl))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_wakeup
</UL>

<P><STRONG><a name="[f0]"></a>EM_free_mem</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, em_os.o(i.EM_free_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_del_entity
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_update_advdata
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_bcon_send
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_scene_server_cb
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb (via Veneer)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_pdu (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message (via Veneer)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_composition_data (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_timeout_handler (via Veneer)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx (via Veneer)
</UL>

<P><STRONG><a name="[2cf]"></a>EM_get_current_time</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, em_os.o(i.EM_get_current_time))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_iv_index (via Veneer)
</UL>

<P><STRONG><a name="[1b8]"></a>EM_os_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, em_os.o(i.EM_os_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[20e]"></a>EM_set_debug_level</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, em_debug.o(i.EM_set_debug_level))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
</UL>

<P><STRONG><a name="[20f]"></a>EM_sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, em_os.o(i.EM_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
</UL>

<P><STRONG><a name="[f2]"></a>EM_start_timer</STRONG> (Thumb, 120 bytes, Stack size 112 bytes, em_timer.o(i.EM_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimeUpdate (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_entity
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_timer_start
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_start_heartbeat_pub_timer (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_model_state_transition_timer_handler (via Veneer)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_reinit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_model_state_set
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_gatt_iface_event_pl_cb
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_generic_onoff_model_state_set
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_add_periodic_step_timer_entity (via Veneer)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_set_attention (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_attention_timeout_handler (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_start_snb_timer (via Veneer)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_restart_proc_timer (via Veneer)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_framensend_pb_adv_pdu (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_complete_handler (via Veneer)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_link_open (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_nodeid_timeout_handler (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_netid_timeout_handler (via Veneer)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_start (via Veneer)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_trigger_tx (via Veneer)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndrx_window_timeout_handler (via Veneer)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndrx_delay_timeout_handler (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndreq_rsp_handler (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_rsp_handler (via Veneer)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll (via Veneer)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndclear (via Veneer)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_set_heartbeat_subscription (via Veneer)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_update (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_subscription_list_add_remove (via Veneer)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_req (via Veneer)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_poll (via Veneer)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_transmit_segments (via Veneer)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_start_ack_timer (via Veneer)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_restart_incomplete_timer (via Veneer)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_common_start_transition_timer (via Veneer)
</UL>

<P><STRONG><a name="[f6]"></a>EM_stop_timer</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, em_timer.o(i.EM_stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStop (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_del_entity
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_stop_heartbeat_pub_timer (via Veneer)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_add_periodic_step_timer_entity (via Veneer)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_set_attention (via Veneer)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_get_set_handler (via Veneer)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_restart_proc_timer (via Veneer)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_adv_message (via Veneer)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_handle_ack (via Veneer)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_procedure_complete (via Veneer)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_stop_periodic_step_timer (via Veneer)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_start (via Veneer)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frnd_clear_lpn_element (via Veneer)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_lpn_clear_friendship (via Veneer)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_set_heartbeat_subscription (via Veneer)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_update (via Veneer)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_subscription_list_add_remove (via Veneer)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_poll (via Veneer)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_offer (via Veneer)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_handle_frnd_clear_cnf (via Veneer)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frnd_handle_segment_ack (via Veneer)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_stop_ack_timer (via Veneer)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_restart_incomplete_timer (via Veneer)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_sar_free_ctx (via Veneer)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack (via Veneer)
</UL>

<P><STRONG><a name="[f9]"></a>EM_timer_get_remaining_time</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, em_timer.o(i.EM_timer_get_remaining_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EM_timer_get_remaining_time &rArr; em_timer_get_ms_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_search_entity
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_timer_get_ms_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_add_periodic_step_timer_entity (via Veneer)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_common_get_remaining_transition_time_with_offset (via Veneer)
</UL>

<P><STRONG><a name="[fc]"></a>EM_timer_init</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, em_timer.o(i.EM_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EM_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init_entity
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[20d]"></a>EM_update_module_debug_flag</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, em_debug.o(i.EM_update_module_debug_flag))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
</UL>

<P><STRONG><a name="[fe]"></a>GAPBondMgr_LinkEst</STRONG> (Thumb, 292 bytes, Stack size 88 bytes, gapbondmgr.o(i.GAPBondMgr_LinkEst))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GAPBondMgr_LinkEst &rArr; GAPBondMgr_ResolveAddr &rArr; gapBondMgrGetPublicAddr &rArr; osal_snv_read
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_UpdateCharCfg
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Signable (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_SendSlaveSecurityRequest (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrInvertCharCfgItem
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetStateFlags
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrAuthenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
</UL>

<P><STRONG><a name="[ff]"></a>GAPBondMgr_ResolveAddr</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, gapbondmgr.o(i.GAPBondMgr_ResolveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GAPBondMgr_ResolveAddr &rArr; gapBondMgrGetPublicAddr &rArr; osal_snv_read
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_isbufset (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ResolvePrivateAddr (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrFindAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[10e]"></a>GAPRole_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripheral.o(i.GAPRole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GAPRole_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_RegisterForHCIMsgs (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[5c]"></a>GAPRole_ProcessEvent</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, peripheral.o(i.GAPRole_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GAPRole_ProcessEvent &rArr; gapRole_ProcessOSALMsg &rArr; gapRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GAPBondMgr_ResolveAddr &rArr; gapBondMgrGetPublicAddr &rArr; osal_snv_read
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadRssiCmd (via Veneer)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SendUpdateParam
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>GAPRole_SendUpdateParam</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, peripheral.o(i.GAPRole_SendUpdateParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GAPRole_SendUpdateParam &rArr; gapRole_startConnUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_startConnUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[117]"></a>GAPRole_TerminateConnection</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peripheral.o(i.GAPRole_TerminateConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GAPRole_TerminateConnection
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_TerminateLinkReq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[11a]"></a>GATTServApp_AddService</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gattservapp.o(i.GATTServApp_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GATTServApp_AddService &rArr; GATTServApp_RegisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[11b]"></a>GATTServApp_DeregisterService</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_DeregisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATTServApp_DeregisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_free (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DeregisterService (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_deinit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_deinit
</UL>

<P><STRONG><a name="[11d]"></a>GATTServApp_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GATTServApp_Init &rArr; gattServApp_SetNumPrepareWrites
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterForReq (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_SetNumPrepareWrites
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[11e]"></a>GATTServApp_InitCharCfg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_InitCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_handle_conn
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_handle_conn
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_init
</UL>

<P><STRONG><a name="[123]"></a>GATTServApp_ProcessCCCWriteReq</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_ProcessCCCWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteCharCfg
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendCCCUpdatedEvent
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_WriteAttrCB
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_write_cb
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_write_cb
</UL>

<P><STRONG><a name="[5d]"></a>GATTServApp_ProcessEvent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GATTServApp_ProcessEvent &rArr; gattServApp_ProcessMsg &rArr; gattServApp_ProcessReadByGrpTypeReq &rArr; GATTServApp_ReadAttr &rArr; GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>GATTServApp_ReadAttr</STRONG> (Thumb, 534 bytes, Stack size 64 bytes, gattservapp.o(i.GATTServApp_ReadAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GATTServApp_ReadAttr &rArr; GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_strlen (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle (via Veneer)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_CompareUUID (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
</UL>

<P><STRONG><a name="[124]"></a>GATTServApp_ReadCharCfg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gattservapp.o(i.GATTServApp_ReadCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_SendServiceChangedInd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_notify_data_out
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_notify_data_out
</UL>

<P><STRONG><a name="[1d5]"></a>GATTServApp_RegisterForMsg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gattservapp.o(i.GATTServApp_RegisterForMsg))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[e9]"></a>GATTServApp_RegisterService</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_RegisterService))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATTServApp_RegisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterService (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_AddService
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_AddService
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_AddService
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_init
</UL>

<P><STRONG><a name="[126]"></a>GATTServApp_SendCCCUpdatedEvent</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gattservapp.o(i.GATTServApp_SendCCCUpdatedEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_send (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_allocate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>

<P><STRONG><a name="[107]"></a>GATTServApp_SendServiceChangedInd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_SendServiceChangedInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GATTServApp_SendServiceChangedInd &rArr; GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_ServiceChangedInd (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[106]"></a>GATTServApp_UpdateCharCfg</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_UpdateCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GATTServApp_UpdateCharCfg &rArr; GATTServApp_WriteAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[133]"></a>GATTServApp_WriteAttr</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, gattservapp.o(i.GATTServApp_WriteAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GATTServApp_WriteAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle (via Veneer)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_UpdateCharCfg
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
</UL>

<P><STRONG><a name="[125]"></a>GATTServApp_WriteCharCfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gattservapp.o(i.GATTServApp_WriteCharCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GATTServApp_WriteCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindCharCfgItem
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>

<P><STRONG><a name="[134]"></a>GGS_AddService</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gapgattserver.o(i.GGS_AddService))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GGS_AddService &rArr; GATTServApp_RegisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[135]"></a>GGS_SetParameter</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, gapgattserver.o(i.GGS_SetParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GGS_SetParameter &rArr; ggs_SetAttrWPermit
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ggs_SetAttrWPermit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[65]"></a>HardFault_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, main.o(i.HardFault_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HardFault_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[45]"></a>LL_SetScanControl1</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, patch.o(i.LL_SetScanControl1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_SetScanControl1 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_evt_schedule (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[140]"></a>MS_vendor_example_server_init</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, appl_sample_example_phylight.o(i.MS_vendor_example_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MS_vendor_example_server_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_model (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_vendor_defined_model_server
</UL>

<P><STRONG><a name="[142]"></a>MS_vendor_example_server_state_update</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, appl_sample_example_phylight.o(i.MS_vendor_example_server_state_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800<LI>Call Chain = MS_vendor_example_server_state_update &rArr; MS_access_reply &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_reply (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_example_server_cb
</UL>

<P><STRONG><a name="[149]"></a>ProgramWord</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, flash_ext.o(i.ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spif_flash_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_spif_flash_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_internal_bus_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash
</UL>

<P><STRONG><a name="[145]"></a>ReadFlash</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, flash_ext.o(i.ReadFlash))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Read
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>UI_app_config_server_callback</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, appl_sample_example_phylight.o(i.UI_app_config_server_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = UI_app_config_server_callback &rArr; vm_subscriptiong_binding_cb &rArr; MS_access_cm_set_features_field &rArr; MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_subscriptiong_delete
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_subscriptiong_binding_cb
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_subscriptiong_add
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_transmit_state (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(i.appl_mesh_sample)
</UL>
<P><STRONG><a name="[37]"></a>UI_gatt_iface_event_pl_cb</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, appl_sample_example_phylight.o(i.UI_gatt_iface_event_pl_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = UI_gatt_iface_event_pl_cb &rArr; UI_prov_bind &rArr; MS_prov_bind &rArr; prov_link_open &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_bind
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_stop (via Veneer)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_end (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(i.appl_mesh_sample)
</UL>
<P><STRONG><a name="[159]"></a>UI_light_hsl_model_state_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_light_hsl_model_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI_light_hsl_model_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_server_cb
</UL>

<P><STRONG><a name="[15a]"></a>UI_light_hsl_model_state_set</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, appl_sample_example_phylight.o(i.UI_light_hsl_model_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UI_light_hsl_model_state_set &rArr; UI_light_hsl_set_actual &rArr; light_hsl_set_pl &rArr; Hue_2_RGB &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_set_actual
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_fetch_state (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_server_cb
</UL>

<P><STRONG><a name="[15c]"></a>UI_light_hsl_model_states_initialization</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_light_hsl_model_states_initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI_light_hsl_model_states_initialization
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[30]"></a>UI_light_hsl_server_cb</STRONG> (Thumb, 178 bytes, Stack size 88 bytes, appl_sample_example_phylight.o(i.UI_light_hsl_server_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = UI_light_hsl_server_cb &rArr; MS_light_hsl_server_state_update &rArr; MS_access_reply &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_model_state_set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_model_state_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_light_hsl_server_state_update (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(i.UI_register_light_hsl_model_server)
</UL>
<P><STRONG><a name="[15b]"></a>UI_light_hsl_set_actual</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_light_hsl_set_actual))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UI_light_hsl_set_actual &rArr; light_hsl_set_pl &rArr; Hue_2_RGB &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_dly_generic_hsl
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set_red
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set_green
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set_blue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_model_state_set
</UL>

<P><STRONG><a name="[32]"></a>UI_proxy_callback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_proxy_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UI_proxy_callback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(i.UI_register_proxy)
</UL>
<P><STRONG><a name="[16a]"></a>UI_proxy_start_adv</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, appl_sample_example_phylight.o(i.UI_proxy_start_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UI_proxy_start_adv &rArr; MS_proxy_server_adv_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_set
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_proxy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_start (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_reinit
</UL>

<P><STRONG><a name="[16e]"></a>UI_register_foundation_model_servers</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, appl_sample_example_phylight.o(i.UI_register_foundation_model_servers))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = UI_register_foundation_model_servers &rArr; MS_health_server_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_health_server_init (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_config_server_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[171]"></a>UI_register_generic_onoff_model_server</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_register_generic_onoff_model_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UI_register_generic_onoff_model_server &rArr; MS_generic_onoff_server_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_generic_onoff_server_init (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[173]"></a>UI_register_light_hsl_model_server</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_register_light_hsl_model_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UI_register_light_hsl_model_server &rArr; MS_light_hsl_server_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_light_hsl_server_init (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[16b]"></a>UI_register_proxy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_register_proxy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UI_register_proxy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_register (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_proxy_start_adv
</UL>

<P><STRONG><a name="[178]"></a>UI_register_scene_model_server</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_register_scene_model_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UI_register_scene_model_server &rArr; MS_scene_server_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_scene_server_init (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[17a]"></a>UI_register_vendor_defined_model_server</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_register_vendor_defined_model_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UI_register_vendor_defined_model_server &rArr; MS_vendor_example_server_init &rArr; MS_access_register_model &rArr; ms_access_search_and_allocate_model
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendor_example_server_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[17b]"></a>UI_sample_binding_app_key</STRONG> (Thumb, 250 bytes, Stack size 96 bytes, appl_sample_example_phylight.o(i.UI_sample_binding_app_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = UI_sample_binding_app_key &rArr; MS_access_bind_model_app &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_app_key (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_bind_model_app (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_subscriptiong_binding_cb
</UL>

<P><STRONG><a name="[17f]"></a>UI_sample_check_app_key</STRONG> (Thumb, 146 bytes, Stack size 96 bytes, appl_sample_example_phylight.o(i.UI_sample_check_app_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UI_sample_check_app_key &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_app_key (via Veneer)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_disp_key
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_reinit
</UL>

<P><STRONG><a name="[169]"></a>UI_sample_get_device_key</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, appl_sample_example_phylight.o(i.UI_sample_get_device_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UI_sample_get_device_key &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_device_key (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_disp_key
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_reinit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[181]"></a>UI_sample_get_net_key</STRONG> (Thumb, 134 bytes, Stack size 80 bytes, appl_sample_example_phylight.o(i.UI_sample_get_net_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UI_sample_get_net_key &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_netkey (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_disp_key
</UL>

<P><STRONG><a name="[183]"></a>UI_sample_reinit</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, appl_sample_example_phylight.o(i.UI_sample_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688<LI>Call Chain = UI_sample_reinit &rArr; UI_setup_prov &rArr; MS_prov_setup &rArr; cry_ecdh_init &rArr; phyplus_ecdh_init &rArr; P256_ecdh_keygen &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_get_device_key
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_check_app_key
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_set
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_primary_unicast_address (via Veneer)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_proxy_start_adv
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_setup_prov
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_features_field (via Veneer)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features_field (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_cb
</UL>

<P><STRONG><a name="[33]"></a>UI_scene_server_cb</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, appl_sample_example_phylight.o(i.UI_scene_server_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UI_scene_server_cb &rArr; light_hsl_set_pl &rArr; Hue_2_RGB &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(i.UI_register_scene_model_server)
</UL>
<P><STRONG><a name="[188]"></a>UI_set_brr_scan_rsp_data</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, appl_sample_example_phylight.o(i.UI_set_brr_scan_rsp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UI_set_brr_scan_rsp_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_set_adv_scanrsp_data_pl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[1c3]"></a>UI_vendor_defined_model_states_initialization</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appl_sample_example_phylight.o(i.UI_vendor_defined_model_states_initialization))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[18b]"></a>UI_vendor_example_model_state_set</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_vendor_example_model_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UI_vendor_example_model_state_set &rArr; UI_vendor_model_set_red &rArr; UI_light_hsl_set_actual &rArr; light_hsl_set_pl &rArr; Hue_2_RGB &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_onoff_set_pl
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set_red
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set_green
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set_blue
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_example_server_cb
</UL>

<P><STRONG><a name="[34]"></a>UI_vendor_example_server_cb</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, appl_sample_example_phylight.o(i.UI_vendor_example_server_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = UI_vendor_example_server_cb &rArr; MS_vendor_example_server_state_update &rArr; MS_access_reply &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_example_model_state_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendor_example_server_state_update
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(i.UI_register_vendor_defined_model_server)
</UL>
<P><STRONG><a name="[18e]"></a>UI_vendor_model_set_blue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, appl_sample_example_phylight.o(i.UI_vendor_model_set_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UI_vendor_model_set_blue &rArr; UI_light_hsl_set_actual &rArr; light_hsl_set_pl &rArr; Hue_2_RGB &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_set_actual
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_example_model_state_set
</UL>

<P><STRONG><a name="[18d]"></a>UI_vendor_model_set_green</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, appl_sample_example_phylight.o(i.UI_vendor_model_set_green))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UI_vendor_model_set_green &rArr; UI_light_hsl_set_actual &rArr; light_hsl_set_pl &rArr; Hue_2_RGB &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_set_actual
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_example_model_state_set
</UL>

<P><STRONG><a name="[18c]"></a>UI_vendor_model_set_red</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, appl_sample_example_phylight.o(i.UI_vendor_model_set_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UI_vendor_model_set_red &rArr; UI_light_hsl_set_actual &rArr; light_hsl_set_pl &rArr; Hue_2_RGB &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_set_actual
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_example_model_state_set
</UL>

<P><STRONG><a name="[18f]"></a>WaitRTCCount</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, common.o(i.WaitRTCCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitRTCCount
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_rtc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_tracking_check
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration
</UL>

<P><STRONG><a name="[148]"></a>WriteFlash</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash_ext.o(i.WriteFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Write
</UL>

<P><STRONG><a name="[191]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3d0]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ec]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memory_statics
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_IRQHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_get_device_key
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_check_app_key
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dumpConnectionInfo
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_internal_status
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_demo_reset
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessOSALMsg
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_data_out_ccd_cb
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_data_in_wt_cb
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_data_out_ccd_cb
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_data_in_wt_cb
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_entity
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_process_gattMsg
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_disconnection_pl
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_connection_pl
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_scan_complete
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_get_net_key
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_send
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_queue_depth_check
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_enqueue_alloc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_dequeue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_bcon_send
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advscan_timeout_handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_send
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_send_wwr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_recv_advpacket
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_setup
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_register
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register_gatt_iface_event_pl
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_init_pl
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_enable_mesh_serv_pl
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_disable_mesh_serv_pl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_pl
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_notif_config_status_cb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_notif_config_status_cb
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_dump_bytes
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetScanControl1
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_subscriptiong_binding_cb
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vm_subscriptiong_add
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vendor_example_server_cb
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set_red
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set_green
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_model_set_blue
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_example_server_cb
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_set_brr_scan_rsp_data
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_scene_server_cb
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_reinit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_binding_app_key
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_vendor_defined_model_server
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_scene_model_server
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_proxy
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_light_hsl_model_server
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_generic_onoff_model_server
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_foundation_model_servers
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_proxy_start_adv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_proxy_callback
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_server_cb
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_model_state_set
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_gatt_iface_event_pl_cb
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_app_config_server_callback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendor_example_server_state_update
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_vendor_example_server_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_setup_prov
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_prov
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_bind
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_health_server_cb
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_generic_onoff_server_cb
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_generic_onoff_model_state_set
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler (via Veneer)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode (via Veneer)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tx_enqueue (via Veneer)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_trigger_tx (via Veneer)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send (via Veneer)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_in (via Veneer)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_timeout_handler (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frndpoll_send_handler (via Veneer)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_send_control_pdu (via Veneer)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pkt_in (via Veneer)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_handle_segment_ack (via Veneer)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_is_valid_lpn_uincast_address (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_in (via Veneer)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltrn_pkt_first_process (via Veneer)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_bcast_unprovisioned_beacon (via Veneer)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_internal_verificaiton_check (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init (via Veneer)
</UL>

<P><STRONG><a name="[3d1]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3d2]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[193]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3d3]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1b1]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_dump_bytes
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback
</UL>

<P><STRONG><a name="[3d4]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3d5]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[194]"></a>__0vprintf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3d6]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[3d7]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[3d8]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[ef]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf
</UL>

<P><STRONG><a name="[d2]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3d9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3da]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3db]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[19a]"></a>aes_ccm_ad</STRONG> (Thumb, 162 bytes, Stack size 104 bytes, aes-ccm.o(i.aes_ccm_ad))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = aes_ccm_ad &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr_start
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth_start
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_decrypt
</UL>

<P><STRONG><a name="[1a2]"></a>aes_ccm_ae</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, aes-ccm.o(i.aes_ccm_ae))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr_start
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth_start
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_deinit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_ccm_encrypt
</UL>

<P><STRONG><a name="[1a4]"></a>aes_cmac</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, libethermind_utils.lib(i.aes_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_subkeys
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
</UL>

<P><STRONG><a name="[1a7]"></a>aes_cmac_128B_encrypt_pl</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, libethermind_utils.lib(i.aes_cmac_128B_encrypt_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_encrypt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_reverse_bytestream_endianness
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_subkeys
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_mac
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_finalize_mac
</UL>

<P><STRONG><a name="[219]"></a>aes_cmac_context_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, libethermind_utils.lib(i.aes_cmac_context_init))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
</UL>

<P><STRONG><a name="[19d]"></a>aes_encrypt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aes.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth_start
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth
</UL>

<P><STRONG><a name="[1a1]"></a>aes_encrypt_deinit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, aes.o(i.aes_encrypt_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aes_encrypt_deinit &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>

<P><STRONG><a name="[19b]"></a>aes_encrypt_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, aes.o(i.aes_encrypt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = aes_encrypt_init &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>

<P><STRONG><a name="[1ad]"></a>app_main</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, blemesh_main.o(i.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_main
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system (via Veneer)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_device (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>app_sleep_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.app_sleep_process))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[47]"></a>app_wakeup_process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.app_wakeup_process))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[165]"></a>appl_dump_bytes</STRONG> (Thumb, 244 bytes, Stack size 104 bytes, blebrr_pl.o(i.appl_dump_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = appl_dump_bytes &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vendor_example_server_cb
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[5]"></a>appl_mesh_prov_data_out_notif_cb</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, blebrr_pl.o(i.appl_mesh_prov_data_out_notif_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appl_mesh_prov_data_out_notif_cb &rArr; blebrr_pl_recv_gattpacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_recv_gattpacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_pl.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>appl_mesh_prov_notif_config_status_cb</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, blebrr_pl.o(i.appl_mesh_prov_notif_config_status_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680<LI>Call Chain = appl_mesh_prov_notif_config_status_cb &rArr; appl_prov_setup &rArr; MS_prov_setup &rArr; cry_ecdh_init &rArr; phyplus_ecdh_init &rArr; P256_ecdh_keygen &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_com_channel_setup_pl
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_setup
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_register
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_pl.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>appl_mesh_proxy_data_out_notif_cb</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, blebrr_pl.o(i.appl_mesh_proxy_data_out_notif_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appl_mesh_proxy_data_out_notif_cb &rArr; blebrr_pl_recv_gattpacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_recv_gattpacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_pl.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>appl_mesh_proxy_notif_config_status_cb</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, blebrr_pl.o(i.appl_mesh_proxy_notif_config_status_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = appl_mesh_proxy_notif_config_status_cb &rArr; blebrr_gatt_com_channel_setup_pl &rArr; blebrr_pl_gatt_connection &rArr; blebrr_scan_enable &rArr; blebrr_scan_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_com_channel_setup_pl
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_pl.o(.data)
</UL>
<P><STRONG><a name="[1b7]"></a>appl_mesh_sample</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, appl_sample_example_phylight.o(i.appl_mesh_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704<LI>Call Chain = appl_mesh_sample &rArr; MS_init &rArr; cry_ecdh_init &rArr; phyplus_ecdh_init &rArr; P256_ecdh_keygen &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_em_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_timer_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_os_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_platform_init_pl
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_device_bootup_ind_pl
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register_gatt_iface_event_pl
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_defined_model_states_initialization
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_set_brr_scan_rsp_data
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_vendor_defined_model_server
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_scene_model_server
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_light_hsl_model_server
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_generic_onoff_model_server
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_foundation_model_servers
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_model_states_initialization
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_register_prov
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_config_server_CB_init (via Veneer)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_register_element (via Veneer)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_create_node (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[39]"></a>appl_prov_callback</STRONG> (Thumb, 2318 bytes, Stack size 136 bytes, appl_prov.o(i.appl_prov_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = appl_prov_callback &rArr; MS_access_cm_set_prov_data &rArr; MS_access_cm_add_update_netkey &rArr; ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_refresh_all_friend_credentials &rArr; ms_access_cm_friend_credentials_refresh &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_dump_bytes
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_set_authval (via Veneer)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_send_pdu (via Veneer)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data (via Veneer)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_subnet (via Veneer)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_rtc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_prov.o(i.appl_prov_register)
</UL>
<P><STRONG><a name="[1b5]"></a>appl_prov_register</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, appl_prov.o(i.appl_prov_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = appl_prov_register &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_register (via Veneer)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_prov_devices_list (via Veneer)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_element_count (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_notif_config_status_cb
</UL>

<P><STRONG><a name="[1b6]"></a>appl_prov_setup</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, appl_prov.o(i.appl_prov_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = appl_prov_setup &rArr; MS_prov_setup &rArr; cry_ecdh_init &rArr; phyplus_ecdh_init &rArr; P256_ecdh_keygen &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_enable
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_set
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_notif_config_status_cb
</UL>

<P><STRONG><a name="[295]"></a>arry_sort</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, patch.o(i.arry_sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arry_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_tracking_check
</UL>

<P><STRONG><a name="[369]"></a>bitarray_get_bit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, libethermind_utils.lib(i.bitarray_get_bit))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_handle_rx_opcode (via Veneer)
</UL>

<P><STRONG><a name="[1ce]"></a>bitarray_get_lowest_bit_set</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, libethermind_utils.lib(i.bitarray_get_lowest_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bitarray_get_lowest_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_get_fault_status (via Veneer)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_refresh_all_friend_credentials (via Veneer)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_cm_refresh_all_appkeys (via Veneer)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_model_subscription_list (via Veneer)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_model_app_list (via Veneer)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_netkey (via Veneer)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_all_model_subscription (via Veneer)
</UL>

<P><STRONG><a name="[1cf]"></a>bitarray_reset_all</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, libethermind_utils.lib(i.bitarray_reset_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bitarray_reset_all
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_clear_fault (via Veneer)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_all_model_subscription (via Veneer)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_update_netkey (via Veneer)
</UL>

<P><STRONG><a name="[2b3]"></a>bitarray_reset_bit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libethermind_utils.lib(i.bitarray_reset_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bitarray_reset_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delete_appkey (via Veneer)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_unbind_model_app (via Veneer)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_update_delete_appkey (via Veneer)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_model_subscription (via Veneer)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_friend_sec_credential (via Veneer)
</UL>

<P><STRONG><a name="[2a4]"></a>bitarray_set_bit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libethermind_utils.lib(i.bitarray_set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bitarray_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_bind_model_app (via Veneer)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_friend_sec_credential (via Veneer)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_model_subscription (via Veneer)
</UL>

<P><STRONG><a name="[1d0]"></a>bleMesh_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, blemesh.o(i.bleMesh_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bleMesh_Init &rArr; GATTServApp_AddService &rArr; GATTServApp_RegisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterForMsg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_AddService
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInfo_AddService
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetDefaultPhyMode (via Veneer)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PeriDevMgrInit (via Veneer)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ParamsInit (via Veneer)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentDevMgrInit (via Veneer)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_CentConnRegister (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_AddService
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llInitFeatureSetDLE (via Veneer)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llInitFeatureSet2MPHY (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[5e]"></a>bleMesh_ProcessEvent</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, blemesh.o(i.bleMesh_ProcessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = bleMesh_ProcessEvent &rArr; appl_mesh_sample &rArr; MS_init &rArr; cry_ecdh_init &rArr; phyplus_ecdh_init &rArr; P256_ecdh_keygen &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_RegisterForInd (via Veneer)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_InitClient (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLI_process_line
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessOSALMsg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_porcess_evt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_evt_cfg
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_scan_complete
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>bleMesh_uart_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, blemesh.o(i.bleMesh_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bleMesh_uart_init &rArr; hal_uart_init &rArr; uart_hw_config &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ee]"></a>blebrr_advertise_data_pl</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, blebrr_pl.o(i.blebrr_advertise_data_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_advscanrsp_data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_adv_params
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_update_advdata
</UL>

<P><STRONG><a name="[1ef]"></a>blebrr_advertise_pl</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, blebrr_pl.o(i.blebrr_advertise_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blebrr_advertise_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_adv_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advscan_timeout_handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_setup
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_data_pl
</UL>

<P><STRONG><a name="[1f1]"></a>blebrr_disable_mesh_serv_pl</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, blebrr_pl.o(i.blebrr_disable_mesh_serv_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blebrr_disable_mesh_serv_pl &rArr; mesh_proxy_deinit &rArr; GATTServApp_DeregisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_deinit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_deinit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_set_gattmode_pl
</UL>

<P><STRONG><a name="[1f4]"></a>blebrr_enable_mesh_serv_pl</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, blebrr_pl.o(i.blebrr_enable_mesh_serv_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blebrr_enable_mesh_serv_pl &rArr; mesh_proxy_init &rArr; GATTServApp_RegisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_set_gattmode_pl
</UL>

<P><STRONG><a name="[151]"></a>blebrr_gatt_mode_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, blebrr_gatt.o(i.blebrr_gatt_mode_get))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_data_out_ccd_cb
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_data_out_ccd_cb
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_process_gattMsg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_bcon_send
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_send_pl
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_gatt_iface_event_pl_cb
</UL>

<P><STRONG><a name="[16c]"></a>blebrr_gatt_mode_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, blebrr_gatt.o(i.blebrr_gatt_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = blebrr_gatt_mode_set &rArr; blebrr_set_gattmode_pl &rArr; blebrr_enable_mesh_serv_pl &rArr; mesh_proxy_init &rArr; GATTServApp_RegisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_set_gattmode_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_setup
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_notif_config_status_cb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_notif_config_status_cb
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_proxy_start_adv
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_setup_prov
</UL>

<P><STRONG><a name="[1fa]"></a>blebrr_gatt_send_pl</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, blebrr_pl.o(i.blebrr_gatt_send_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = blebrr_gatt_send_pl &rArr; mesh_client_send_wwr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_proxy_notify_data_out
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_prov_notify_data_out
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_send_wwr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_send
</UL>

<P><STRONG><a name="[20c]"></a>blebrr_get_advdata_offset_pl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, blebrr_pl.o(i.blebrr_get_advdata_offset_pl))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
</UL>

<P><STRONG><a name="[209]"></a>blebrr_get_queue_depth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, blebrr.o(i.blebrr_get_queue_depth))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_queue_depth_check
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_update_advdata
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_scan_setup
</UL>

<P><STRONG><a name="[1e2]"></a>blebrr_handle_evt_adv_complete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, blebrr_pl.o(i.blebrr_handle_evt_adv_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = blebrr_handle_evt_adv_complete &rArr; blebrr_pl_advertise_setup &rArr; blebrr_timer_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
</UL>

<P><STRONG><a name="[1e3]"></a>blebrr_handle_evt_adv_report</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, blebrr_pl.o(i.blebrr_handle_evt_adv_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = blebrr_handle_evt_adv_report &rArr; blebrr_pl_recv_advpacket &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_recv_advpacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
</UL>

<P><STRONG><a name="[1e0]"></a>blebrr_handle_evt_scan_complete</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, blebrr_pl.o(i.blebrr_handle_evt_scan_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = blebrr_handle_evt_scan_complete &rArr; blebrr_pl_scan_setup &rArr; blebrr_timer_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_connect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_scan_setup
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
</UL>

<P><STRONG><a name="[1e4]"></a>blebrr_handle_le_connection_pl</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, blebrr_pl.o(i.blebrr_handle_le_connection_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blebrr_handle_le_connection_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_update_conidx
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_end
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
</UL>

<P><STRONG><a name="[1e5]"></a>blebrr_handle_le_disconnection_pl</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, blebrr_pl.o(i.blebrr_handle_le_disconnection_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blebrr_handle_le_disconnection_pl &rArr; blebrr_pl_gatt_disconnection &rArr; MS_brr_remove_bearer
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_update_conidx
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_disconnection
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
</UL>

<P><STRONG><a name="[203]"></a>blebrr_init_pl</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, blebrr_pl.o(i.blebrr_init_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blebrr_init_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_scan_params
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_ConfigDeviceAddr (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_register
</UL>

<P><STRONG><a name="[202]"></a>blebrr_pl_advertise_end</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, blebrr.o(i.blebrr_pl_advertise_end))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_connection_pl
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_connection
</UL>

<P><STRONG><a name="[1fe]"></a>blebrr_pl_advertise_setup</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_pl_advertise_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = blebrr_pl_advertise_setup &rArr; blebrr_timer_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_timer_start
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_adv_complete
</UL>

<P><STRONG><a name="[1f7]"></a>blebrr_pl_gatt_connection</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, blebrr_gatt.o(i.blebrr_pl_gatt_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = blebrr_pl_gatt_connection &rArr; blebrr_scan_enable &rArr; blebrr_scan_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_add_bearer (via Veneer)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_enable
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_end
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_com_channel_setup_pl
</UL>

<P><STRONG><a name="[1f8]"></a>blebrr_pl_gatt_disconnection</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, blebrr_gatt.o(i.blebrr_pl_gatt_disconnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blebrr_pl_gatt_disconnection &rArr; MS_brr_remove_bearer
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_remove_bearer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_com_channel_setup_pl
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_disconnection_pl
</UL>

<P><STRONG><a name="[1ff]"></a>blebrr_pl_recv_advpacket</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, blebrr.o(i.blebrr_pl_recv_advpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blebrr_pl_recv_advpacket &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_adv_report
</UL>

<P><STRONG><a name="[1b3]"></a>blebrr_pl_recv_gattpacket</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, blebrr_gatt.o(i.blebrr_pl_recv_gattpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blebrr_pl_recv_gattpacket
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_data_in_wt_cb
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_data_in_wt_cb
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_data_out_notif_cb
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_data_out_notif_cb
</UL>

<P><STRONG><a name="[200]"></a>blebrr_pl_scan_setup</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_pl_scan_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = blebrr_pl_scan_setup &rArr; blebrr_timer_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_get_queue_depth
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_update_advdata
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_timer_start
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_scan_complete
</UL>

<P><STRONG><a name="[20a]"></a>blebrr_queue_depth_check</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, blebrr.o(i.blebrr_queue_depth_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blebrr_queue_depth_check &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_get_queue_depth
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rand (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send (via Veneer)
</UL>

<P><STRONG><a name="[1bd]"></a>blebrr_register</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, blebrr.o(i.blebrr_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blebrr_register &rArr; MS_brr_add_bearer
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_sleep
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_update_module_debug_flag
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_set_debug_level
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_brr_add_bearer (via Veneer)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_init_pl
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_get_advdata_offset_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[1be]"></a>blebrr_register_gatt_iface_event_pl</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, blebrr_pl.o(i.blebrr_register_gatt_iface_event_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blebrr_register_gatt_iface_event_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[1cd]"></a>blebrr_scan_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_scan_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blebrr_scan_enable &rArr; blebrr_scan_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_connection
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_setup
</UL>

<P><STRONG><a name="[1c7]"></a>blebrr_scan_pl</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, blebrr_pl.o(i.blebrr_scan_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blebrr_scan_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_gap_set_scan_enable
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_enable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advscan_timeout_handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_wakeup
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_sleep
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_send
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_scan_setup
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_setup
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_subscription_add_handler (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_random_handler (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler (via Veneer)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_friend_sec_credential (via Veneer)
</UL>

<P><STRONG><a name="[189]"></a>blebrr_set_adv_scanrsp_data_pl</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, blebrr_pl.o(i.blebrr_set_adv_scanrsp_data_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blebrr_set_adv_scanrsp_data_pl
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_set_brr_scan_rsp_data
</UL>

<P><STRONG><a name="[1f9]"></a>blebrr_set_gattmode_pl</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, blebrr_pl.o(i.blebrr_set_gattmode_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blebrr_set_gattmode_pl &rArr; blebrr_enable_mesh_serv_pl &rArr; mesh_proxy_init &rArr; GATTServApp_RegisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_enable_mesh_serv_pl
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_disable_mesh_serv_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_set
</UL>

<P><STRONG><a name="[210]"></a>check_chip_id</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash_ext.o(i.check_chip_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = check_chip_id &rArr; read_chip_id &rArr; chip_id_one_bit_hot_convter
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chip_id
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
</UL>

<P><STRONG><a name="[212]"></a>check_chip_mAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash_ext.o(i.check_chip_mAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = check_chip_mAddr &rArr; read_chip_mAddr &rArr; chip_id_one_bit_hot_convter
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chip_mAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
</UL>

<P><STRONG><a name="[14a]"></a>check_internal_bus_busy</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, flash_ext.o(i.check_internal_bus_busy))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWord
</UL>

<P><STRONG><a name="[51]"></a>cli_demo_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, blemesh.o(i.cli_demo_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cli_demo_reset &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_reset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>cli_disp_key</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, blemesh.o(i.cli_disp_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cli_disp_key &rArr; UI_sample_check_app_key &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_get_device_key
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_check_app_key
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_get_net_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>cli_internal_status</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, blemesh.o(i.cli_internal_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cli_internal_status &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memory_statics
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dumpConnectionInfo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[257]"></a>clk_gate_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock.o(i.clk_gate_enable))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_init
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config
</UL>

<P><STRONG><a name="[29f]"></a>clk_pclk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.clk_pclk))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config
</UL>

<P><STRONG><a name="[2a0]"></a>clk_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clock.o(i.clk_reset))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config
</UL>

<P><STRONG><a name="[216]"></a>cry_aes_128_ccm_decrypt</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, cry.o(i.cry_aes_128_ccm_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cry_aes_128_ccm_decrypt &rArr; aes_ccm_ad &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler (via Veneer)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_decode_frame (via Veneer)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_decrypt_pdu (via Veneer)
</UL>

<P><STRONG><a name="[217]"></a>cry_aes_128_ccm_encrypt</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, cry.o(i.cry_aes_128_ccm_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_data_handler (via Veneer)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_pkt_send (via Veneer)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_frame_secure_pdu (via Veneer)
</UL>

<P><STRONG><a name="[218]"></a>cry_aes_128_cmac</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, cry.o(i.cry_aes_128_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_context_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_reverse_bytestream_in_place
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_reverse_bytestream_endianness
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon (via Veneer)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prov_calc_confirm (via Veneer)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_va (via Veneer)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k4 (via Veneer)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k3 (via Veneer)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k2 (via Veneer)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_k1 (via Veneer)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_handle_secure_beacon (via Veneer)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_stbx_s1 (via Veneer)
</UL>

<P><STRONG><a name="[1a9]"></a>cry_aes_128_encrypt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cry.o(i.cry_aes_128_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_128B_encrypt_pl
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_nodeid_adv (via Veneer)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_obfuscate (via Veneer)
</UL>

<P><STRONG><a name="[21c]"></a>cry_ecdh_generate_secret</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cry.o(i.cry_ecdh_generate_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = cry_ecdh_generate_secret &rArr; phyplus_ecdh_generate_secret &rArr; P256_ecdh_shared_secret &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_generate_secret
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler (via Veneer)
</UL>

<P><STRONG><a name="[21e]"></a>cry_ecdh_get_public_key</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, cry.o(i.cry_ecdh_get_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cry_ecdh_get_public_key &rArr; phyplus_ecdh_get_public_key &rArr; cry_reverse_bytestream_endianness
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_get_public_key
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup (via Veneer)
</UL>

<P><STRONG><a name="[220]"></a>cry_ecdh_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cry.o(i.cry_ecdh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = cry_ecdh_init &rArr; phyplus_ecdh_init &rArr; P256_ecdh_keygen &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init (via Veneer)
</UL>

<P><STRONG><a name="[4b]"></a>cry_generate_random_bytes</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cry.o(i.cry_generate_random_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cry_generate_random_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rand (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cry.o(i.phyplus_ecdh_init)
</UL>
<P><STRONG><a name="[222]"></a>cry_rand_generate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cry.o(i.cry_rand_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cry_rand_generate
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind (via Veneer)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_invite_handler (via Veneer)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_proxy_nodeid_adv (via Veneer)
</UL>

<P><STRONG><a name="[1a8]"></a>cry_reverse_bytestream_endianness</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cry.o(i.cry_reverse_bytestream_endianness))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cry_reverse_bytestream_endianness
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_get_public_key
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phyplus_ecdh_generate_secret
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_128B_encrypt_pl
</UL>

<P><STRONG><a name="[21a]"></a>cry_reverse_bytestream_in_place</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cry.o(i.cry_reverse_bytestream_in_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cry_reverse_bytestream_in_place
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_aes_128_cmac
</UL>

<P><STRONG><a name="[14c]"></a>disable_spif_flash_write</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flash_ext.o(i.disable_spif_flash_write))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWord
</UL>

<P><STRONG><a name="[fb]"></a>em_timer_get_ms_timestamp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, em_timer.o(i.em_timer_get_ms_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = em_timer_get_ms_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_GetSystemClock (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_add_entity
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_timer_get_remaining_time
</UL>

<P><STRONG><a name="[14b]"></a>enable_spif_flash_write</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flash_ext.o(i.enable_spif_flash_write))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramWord
</UL>

<P><STRONG><a name="[147]"></a>flash_sector_erase</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, flash_ext.o(i.flash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_sector_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spif_flash_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_spif_flash_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_internal_bus_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_reset
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Write
</UL>

<P><STRONG><a name="[35]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, em_platform.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fputc &rArr; hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[157]"></a>generic_onoff_set_pl</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, model_state_handler_pl.o(i.generic_onoff_set_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = generic_onoff_set_pl &rArr; light_ctrl &rArr; light_reflash &rArr; hal_pwm_set_count_val &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxy_dly_generic_onoff
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_vendor_example_model_state_set
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_generic_onoff_model_state_set
</UL>

<P><STRONG><a name="[251]"></a>gpio_pin0to3_pin31to34_control</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gpio.o(i.gpio_pin0to3_pin31to34_control))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>

<P><STRONG><a name="[9e]"></a>hal_GPIO_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(i.hal_GPIO_IRQHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_GPIO_IRQHandler &rArr; gpioin_event &rArr; gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioin_event
</UL>

<P><STRONG><a name="[66]"></a>hal_UART0_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart.o(i.hal_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hal_UART0_IRQHandler &rArr; irq_rx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_rx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[24d]"></a>hal_gpio_fmux</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_fmux))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>

<P><STRONG><a name="[24c]"></a>hal_gpio_fmux_set</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gpio.o(i.hal_gpio_fmux_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_open_channel
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config
</UL>

<P><STRONG><a name="[24e]"></a>hal_gpio_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gpio.o(i.hal_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_gpio_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[250]"></a>hal_gpio_pin_init</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, gpio.o(i.hal_gpio_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_gpio_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin0to3_pin31to34_control
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_init
</UL>

<P><STRONG><a name="[252]"></a>hal_gpio_pull_set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gpio.o(i.hal_gpio_pull_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_init
</UL>

<P><STRONG><a name="[243]"></a>hal_gpio_read</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gpio.o(i.hal_gpio_read))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
</UL>

<P><STRONG><a name="[244]"></a>hal_gpio_wakeup_set</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gpio.o(i.hal_gpio_wakeup_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_gpio_wakeup_set
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_handler
</UL>

<P><STRONG><a name="[246]"></a>hal_gpioin_enable</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gpio.o(i.hal_gpioin_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_gpioin_enable &rArr; hal_gpio_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_enable
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_handler
</UL>

<P><STRONG><a name="[253]"></a>hal_pwm_close_channel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pwm.o(i.hal_pwm_close_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_pwm_close_channel &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
</UL>

<P><STRONG><a name="[255]"></a>hal_pwm_destroy</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, pwm.o(i.hal_pwm_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hal_pwm_destroy &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
</UL>

<P><STRONG><a name="[256]"></a>hal_pwm_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pwm.o(i.hal_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_pwm_init &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_enable
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
</UL>

<P><STRONG><a name="[258]"></a>hal_pwm_open_channel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pwm.o(i.hal_pwm_open_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_pwm_open_channel &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
</UL>

<P><STRONG><a name="[259]"></a>hal_pwm_set_count_val</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pwm.o(i.hal_pwm_set_count_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_pwm_set_count_val &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
</UL>

<P><STRONG><a name="[25a]"></a>hal_pwm_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pwm.o(i.hal_pwm_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwm_start &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
</UL>

<P><STRONG><a name="[25b]"></a>hal_pwm_stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pwm.o(i.hal_pwm_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_pwm_stop &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
</UL>

<P><STRONG><a name="[277]"></a>hal_pwrmgr_RAM_retention</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwrmgr.o(i.hal_pwrmgr_RAM_retention))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d]"></a>hal_pwrmgr_RAM_retention_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwrmgr.o(i.hal_pwrmgr_RAM_retention_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_pwrmgr_RAM_retention_set &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_sleep_process
</UL>

<P><STRONG><a name="[25e]"></a>hal_pwrmgr_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pwrmgr.o(i.hal_pwrmgr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_pwrmgr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d9]"></a>hal_pwrmgr_lock</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, pwrmgr.o(i.hal_pwrmgr_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_start
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
</UL>

<P><STRONG><a name="[24f]"></a>hal_pwrmgr_register</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, pwrmgr.o(i.hal_pwrmgr_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_pwrmgr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[62]"></a>hal_pwrmgr_sleep_process</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_sleep_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_pwrmgr_sleep_process &rArr; hal_pwrmgr_RAM_retention_set &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[25c]"></a>hal_pwrmgr_unlock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_stop
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
</UL>

<P><STRONG><a name="[63]"></a>hal_pwrmgr_wakeup_process</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pwrmgr.o(i.hal_pwrmgr_wakeup_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_wakeup_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[262]"></a>hal_rom_code_ini</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, patch.o(i.hal_rom_code_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hal_rom_code_ini &rArr; rf_calibrate1 &rArr; rc32k_calibration_check &rArr; rc32k_tracking_check &rArr; WaitRTCCount
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init (via Veneer)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_init (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[266]"></a>hal_rtc_clock_config</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, clock.o(i.hal_rtc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_rtc_clock_config &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[267]"></a>hal_system_init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, common.o(i.hal_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_system_init &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8]"></a>hal_uart_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uart.o(i.hal_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hal_uart_init &rArr; uart_hw_config &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_uart_init
</UL>

<P><STRONG><a name="[224]"></a>hal_uart_send_buff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(i.hal_uart_send_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_uart_send_buff &rArr; txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[26a]"></a>init_config</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, patch.o(i.init_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = init_config &rArr; check_chip_mAddr &rArr; read_chip_mAddr &rArr; chip_id_one_bit_hot_convter
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_chip_mAddr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_chip_id
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>light_blink_evt_cfg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_light.o(i.light_blink_evt_cfg))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[1db]"></a>light_blink_porcess_evt</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, led_light.o(i.light_blink_porcess_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = light_blink_porcess_evt &rArr; light_ctrl &rArr; light_reflash &rArr; hal_pwm_set_count_val &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[167]"></a>light_blink_set</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, led_light.o(i.light_blink_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = light_blink_set &rArr; light_ctrl &rArr; light_reflash &rArr; hal_pwm_set_count_val &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_reinit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[160]"></a>light_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led_light.o(i.light_config))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[242]"></a>light_ctrl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, led_light.o(i.light_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = light_ctrl &rArr; light_reflash &rArr; hal_pwm_set_count_val &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_set
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_porcess_evt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_onoff_set_pl
</UL>

<P><STRONG><a name="[15e]"></a>light_hsl_set_pl</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, model_state_handler_pl.o(i.light_hsl_set_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = light_hsl_set_pl &rArr; Hue_2_RGB &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctrl
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hue_2_RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_scene_server_cb
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_set_actual
</UL>

<P><STRONG><a name="[1de]"></a>light_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, led_light.o(i.light_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = light_init &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[161]"></a>light_reflash</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, led_light.o(i.light_reflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = light_reflash &rArr; hal_pwm_set_count_val &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_stop
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_start
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_set_count_val
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_open_channel
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_destroy
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_close_channel
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_ctrl
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[46]"></a>llSetupAdv1</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, patch.o(i.llSetupAdv1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = llSetupAdv1 &rArr; rf_phy_change_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_change_cfg
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_tfifo (via Veneer)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_rfifo (via Veneer)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_ign_rfifo (via Veneer)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt (via Veneer)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupScannableAdvEvt (via Veneer)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNonConnectableAdvEvt (via Veneer)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[215]"></a>ll_dumpConnectionInfo</STRONG> (Thumb, 604 bytes, Stack size 16 bytes, blemesh.o(i.ll_dumpConnectionInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ll_dumpConnectionInfo &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_internal_status
</UL>

<P><STRONG><a name="[43]"></a>ll_hw_go1</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, patch.o(i.ll_hw_go1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ll_hw_go1 &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tr_mode (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; hal_rfphy_init &rArr; hal_rom_code_ini &rArr; rf_calibrate1 &rArr; rc32k_calibration_check &rArr; rc32k_tracking_check &rArr; WaitRTCCount
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_set_heap (via Veneer)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_system_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_uart_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1e6]"></a>mesh_client_process_gattMsg</STRONG> (Thumb, 704 bytes, Stack size 40 bytes, mesh_clients.o(i.mesh_client_process_gattMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mesh_client_process_gattMsg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_get
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllChars (via Veneer)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_DiscAllCharDescs (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessOSALMsg
</UL>

<P><STRONG><a name="[1fb]"></a>mesh_client_send_wwr</STRONG> (Thumb, 80 bytes, Stack size 264 bytes, mesh_clients.o(i.mesh_client_send_wwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mesh_client_send_wwr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_WriteNoRsp (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_send_pl
</UL>

<P><STRONG><a name="[201]"></a>mesh_client_update_conidx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mesh_clients.o(i.mesh_client_update_conidx))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_disconnection_pl
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_connection_pl
</UL>

<P><STRONG><a name="[1c0]"></a>mesh_model_device_bootup_ind_pl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, model_state_handler_pl.o(i.mesh_model_device_bootup_ind_pl))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[168]"></a>mesh_model_device_provisioned_ind_pl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, model_state_handler_pl.o(i.mesh_model_device_provisioned_ind_pl))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_prov_callback
</UL>

<P><STRONG><a name="[1bf]"></a>mesh_model_platform_init_pl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, model_state_handler_pl.o(i.mesh_model_platform_init_pl))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[1f3]"></a>mesh_prov_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mesh_services.o(i.mesh_prov_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_prov_deinit &rArr; GATTServApp_DeregisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_DeregisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_disable_mesh_serv_pl
</UL>

<P><STRONG><a name="[1f6]"></a>mesh_prov_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mesh_services.o(i.mesh_prov_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_prov_init &rArr; GATTServApp_RegisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_enable_mesh_serv_pl
</UL>

<P><STRONG><a name="[1fc]"></a>mesh_prov_notify_data_out</STRONG> (Thumb, 62 bytes, Stack size 272 bytes, mesh_services.o(i.mesh_prov_notify_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mesh_prov_notify_data_out &rArr; GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_send_pl
</UL>

<P><STRONG><a name="[1f2]"></a>mesh_proxy_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mesh_services.o(i.mesh_proxy_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_proxy_deinit &rArr; GATTServApp_DeregisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_DeregisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_disable_mesh_serv_pl
</UL>

<P><STRONG><a name="[1f5]"></a>mesh_proxy_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mesh_services.o(i.mesh_proxy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mesh_proxy_init &rArr; GATTServApp_RegisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_Register (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_RegisterService
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_enable_mesh_serv_pl
</UL>

<P><STRONG><a name="[1fd]"></a>mesh_proxy_notify_data_out</STRONG> (Thumb, 62 bytes, Stack size 272 bytes, mesh_services.o(i.mesh_proxy_notify_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mesh_proxy_notify_data_out &rArr; GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Notification (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_send_pl
</UL>

<P><STRONG><a name="[2f2]"></a>ms_init_pl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ms_common_pl.o(i.ms_init_pl))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_init (via Veneer)
</UL>

<P><STRONG><a name="[27c]"></a>nvs_close</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nvs.o(i.nvs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvs_close
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_close
</UL>

<P><STRONG><a name="[282]"></a>nvs_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nvs.o(i.nvs_init))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_init
</UL>

<P><STRONG><a name="[27e]"></a>nvs_open</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, nvs.o(i.nvs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Write
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Read
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_open
</UL>

<P><STRONG><a name="[27f]"></a>nvs_read</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nvs.o(i.nvs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvs_read &rArr; NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read
</UL>

<P><STRONG><a name="[214]"></a>nvs_reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nvs.o(i.nvs_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nvs_reset &rArr; flash_sector_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_demo_reset
</UL>

<P><STRONG><a name="[27d]"></a>nvs_seek</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nvs.o(i.nvs_seek))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_close
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_seek
</UL>

<P><STRONG><a name="[280]"></a>nvs_write</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nvs.o(i.nvs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nvs_write &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write
</UL>

<P><STRONG><a name="[281]"></a>nvsto_close</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvsto_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvsto_close &rArr; nvs_close
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_load (via Veneer)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store (via Veneer)
</UL>

<P><STRONG><a name="[1bb]"></a>nvsto_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvsto_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvsto_init
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[283]"></a>nvsto_open</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvsto_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_open
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_load (via Veneer)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store (via Veneer)
</UL>

<P><STRONG><a name="[284]"></a>nvsto_read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, libethermind_utils.lib(i.nvsto_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvsto_read &rArr; nvs_read &rArr; NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_virtual_addresses (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_tx_states_and_features (via Veneer)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_subnets (via Veneer)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_seq_number (via Veneer)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_non_virtual_addresses (via Veneer)
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_models (via Veneer)
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_elements (via Veneer)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_element_addresses (via Veneer)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_dev_key (via Veneer)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_load_appkeys (via Veneer)
</UL>

<P><STRONG><a name="[320]"></a>nvsto_register</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, libethermind_utils.lib(i.nvsto_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvsto_register
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_ps_init (via Veneer)
</UL>

<P><STRONG><a name="[285]"></a>nvsto_seek</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, libethermind_utils.lib(i.nvsto_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvsto_seek
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_load (via Veneer)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_ps_store (via Veneer)
</UL>

<P><STRONG><a name="[286]"></a>nvsto_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, libethermind_utils.lib(i.nvsto_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nvsto_write &rArr; nvs_write &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_virtual_addresses (via Veneer)
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_tx_states_and_features (via Veneer)
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_subnets (via Veneer)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_seq_number (via Veneer)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_non_virtual_addresses (via Veneer)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_models (via Veneer)
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_elements (via Veneer)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_element_addresses (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_dev_key (via Veneer)
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_store_appkeys (via Veneer)
</UL>

<P><STRONG><a name="[61]"></a>osalInitTasks</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, osal_blemesh.o(i.osalInitTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osalInitTasks &rArr; bleMesh_Init &rArr; GATTServApp_AddService &rArr; GATTServApp_RegisterService
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerInit (via Veneer)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init (via Veneer)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init (via Veneer)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Init (via Veneer)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init (via Veneer)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Init (via Veneer)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[57]"></a>osal_CbTimerProcessEvent_new</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, osal_blemesh.o(i.osal_CbTimerProcessEvent_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_CbTimerProcessEvent_new
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>osal_memory_statics</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, main.o(i.osal_memory_statics))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_internal_status
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
</UL>

<P><STRONG><a name="[102]"></a>osal_snv_read</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, osal_snv.o(i.osal_snv_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osal_snv_read
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snv_calc_addr
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetStateFlags
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrGetPublicAddr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapBondMgrBondReq
</UL>

<P><STRONG><a name="[21d]"></a>phyplus_ecdh_generate_secret</STRONG> (Thumb, 60 bytes, Stack size 112 bytes, cry.o(i.phyplus_ecdh_generate_secret))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = phyplus_ecdh_generate_secret &rArr; P256_ecdh_shared_secret &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_ecdh_shared_secret
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_reverse_bytestream_endianness
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_generate_secret
</UL>

<P><STRONG><a name="[21f]"></a>phyplus_ecdh_get_public_key</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cry.o(i.phyplus_ecdh_get_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = phyplus_ecdh_get_public_key &rArr; cry_reverse_bytestream_endianness
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_reverse_bytestream_endianness
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_get_public_key
</UL>

<P><STRONG><a name="[221]"></a>phyplus_ecdh_init</STRONG> (Thumb, 88 bytes, Stack size 112 bytes, cry.o(i.phyplus_ecdh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = phyplus_ecdh_init &rArr; P256_ecdh_keygen &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_ecdh_keygen
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cry_ecdh_init
</UL>

<P><STRONG><a name="[290]"></a>prov_read_device_oob_pubkey_pl</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, prov_pl.o(i.prov_read_device_oob_pubkey_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prov_read_device_oob_pubkey_pl
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler (via Veneer)
</UL>

<P><STRONG><a name="[291]"></a>prov_read_static_oob_auth_pl</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, prov_pl.o(i.prov_read_static_oob_auth_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prov_read_static_oob_auth_pl
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_prov_pubkey_handler (via Veneer)
</UL>

<P><STRONG><a name="[2d]"></a>proxy_dly_generic_hsl</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.proxy_dly_generic_hsl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = proxy_dly_generic_hsl &rArr; UI_light_hsl_set_actual &rArr; light_hsl_set_pl &rArr; Hue_2_RGB &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_light_hsl_set_actual
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(i.UI_light_hsl_model_state_set)
</UL>
<P><STRONG><a name="[2c]"></a>proxy_dly_generic_onoff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.proxy_dly_generic_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = proxy_dly_generic_onoff &rArr; generic_onoff_set_pl &rArr; light_ctrl &rArr; light_reflash &rArr; hal_pwm_set_count_val &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_onoff_set_pl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(i.UI_generic_onoff_model_state_set)
</UL>
<P><STRONG><a name="[292]"></a>rc32k_calibration</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, patch.o(i.rc32k_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rc32k_calibration &rArr; WaitRTCCount
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration_check
</UL>

<P><STRONG><a name="[293]"></a>rc32k_calibration_check</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, patch.o(i.rc32k_calibration_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rc32k_calibration_check &rArr; rc32k_tracking_check &rArr; WaitRTCCount
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_tracking_check
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[294]"></a>rc32k_tracking_check</STRONG> (Thumb, 104 bytes, Stack size 88 bytes, patch.o(i.rc32k_tracking_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rc32k_tracking_check &rArr; WaitRTCCount
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arry_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration_check
</UL>

<P><STRONG><a name="[211]"></a>read_chip_id</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, flash_ext.o(i.read_chip_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = read_chip_id &rArr; chip_id_one_bit_hot_convter
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_id_one_bit_hot_convter
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_chip_id
</UL>

<P><STRONG><a name="[213]"></a>read_chip_mAddr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, flash_ext.o(i.read_chip_mAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = read_chip_mAddr &rArr; chip_id_one_bit_hot_convter
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_id_one_bit_hot_convter
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_chip_mAddr
</UL>

<P><STRONG><a name="[44]"></a>rf_calibrate1</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, patch.o(i.rf_calibrate1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rf_calibrate1 &rArr; rc32k_calibration_check &rArr; rc32k_tracking_check &rArr; WaitRTCCount
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration_check
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_code_ini
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[297]"></a>rf_phy_ana_cfg</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_phy_ana_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rf_phy_ana_cfg &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[29a]"></a>rf_phy_bb_cfg</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, rf_phy_driver.o(i.rf_phy_bb_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rf_phy_bb_cfg &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[26c]"></a>rf_phy_change_cfg</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, rf_phy_driver.o(i.rf_phy_change_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rf_phy_change_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1
</UL>

<P><STRONG><a name="[64]"></a>rf_phy_ini</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rf_phy_driver.o(i.rf_phy_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rf_phy_ini &rArr; rf_phy_ana_cfg &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_set_txPower
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_bb_cfg
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_code_ini
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[29b]"></a>rf_phy_set_txPower</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rf_phy_driver.o(i.rf_phy_set_txPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rf_phy_set_txPower &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[299]"></a>rf_rxDcoc_cfg</STRONG> (Thumb, 220 bytes, Stack size 20 bytes, rf_phy_driver.o(i.rf_rxDcoc_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_rxDcoc_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[298]"></a>rf_tpCal_gen_cap_arrary</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, rf_phy_driver.o(i.rf_tpCal_gen_cap_arrary))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_tpCal_gen_cap_arrary &rArr; rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[29c]"></a>rf_tp_cal</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, rf_phy_driver.o(i.rf_tp_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
</UL>

<P><STRONG><a name="[254]"></a>subWriteReg</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, common.o(i.subWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_set_count_val
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_open_channel
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_destroy
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwm_close_channel
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_system_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_set_txPower
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_bb_cfg
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1
</UL>

<P><STRONG><a name="[2b]"></a>timeout_cb</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = timeout_cb &rArr; UI_sample_reinit &rArr; UI_setup_prov &rArr; MS_prov_setup &rArr; cry_ecdh_init &rArr; phyplus_ecdh_init &rArr; P256_ecdh_keygen &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_reinit
</UL>
<BR>[Address Reference Count : 3]<UL><LI> appl_sample_example_phylight.o(i.UI_gatt_iface_event_pl_cb)
<LI> appl_sample_example_phylight.o(i.UI_sample_reinit)
<LI> appl_sample_example_phylight.o(i.appl_mesh_sample)
</UL>
<P><STRONG><a name="[f5]"></a>timer_add_entity</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, em_timer.o(i.timer_add_entity))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer_add_entity &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_CbTimerStart (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_timer_get_ms_timestamp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
</UL>

<P><STRONG><a name="[f7]"></a>timer_del_entity</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, em_timer.o(i.timer_del_entity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init_entity
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeout_handler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer
</UL>

<P><STRONG><a name="[1ba]"></a>timer_em_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, em_timer.o(i.timer_em_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[fd]"></a>timer_init_entity</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, em_timer.o(i.timer_init_entity))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_del_entity
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_timer_init
</UL>

<P><STRONG><a name="[fa]"></a>timer_search_entity</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, em_timer.o(i.timer_search_entity))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_timer_get_remaining_time
</UL>

<P><STRONG><a name="[29e]"></a>timer_search_entity_timer_id</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, em_timer.o(i.timer_search_entity_timer_id))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeout_handler
</UL>

<P><STRONG><a name="[4c]"></a>timer_timeout_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, em_timer.o(i.timer_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_timeout_handler &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_search_entity_timer_id
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_del_entity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> em_timer.o(i.timer_add_entity)
</UL>
<P><STRONG><a name="[2a]"></a>vendor_example_server_cb</STRONG> (Thumb, 338 bytes, Stack size 80 bytes, appl_sample_example_phylight.o(i.vendor_example_server_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = vendor_example_server_cb &rArr; appl_dump_bytes &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_dump_bytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(i.MS_vendor_example_server_init)
</UL>
<P><STRONG><a name="[14d]"></a>vm_subscriptiong_add</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, appl_sample_example_phylight.o(i.vm_subscriptiong_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = vm_subscriptiong_add &rArr; MS_access_cm_add_model_subscription &rArr; ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_model_subscription (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_app_config_server_callback
</UL>

<P><STRONG><a name="[150]"></a>vm_subscriptiong_binding_cb</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.vm_subscriptiong_binding_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = vm_subscriptiong_binding_cb &rArr; MS_access_cm_set_features_field &rArr; MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_binding_app_key
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_transmit_state (via Veneer)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_features_field (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_app_config_server_callback
</UL>

<P><STRONG><a name="[14e]"></a>vm_subscriptiong_delete</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, appl_sample_example_phylight.o(i.vm_subscriptiong_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vm_subscriptiong_delete &rArr; MS_access_cm_delete_model_subscription &rArr; ms_delete_address &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_model_subscription (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_app_config_server_callback
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[263]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_wakeup_handler
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[261]"></a>hal_rfphy_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, main.o(i.hal_rfphy_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hal_rfphy_init &rArr; hal_rom_code_ini &rArr; rf_calibrate1 &rArr; rc32k_calibration_check &rArr; rc32k_tracking_check &rArr; WaitRTCCount
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_code_ini
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>rf_wakeup_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.rf_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_wakeup_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.hal_rfphy_init)
</UL>
<P><STRONG><a name="[245]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_handler
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[249]"></a>gpio_interrupt_enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(i.gpio_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioin_event
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
</UL>

<P><STRONG><a name="[40]"></a>gpio_sleep_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gpio.o(i.gpio_sleep_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_sleep_handler &rArr; hal_gpio_wakeup_set
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.hal_gpio_init)
</UL>
<P><STRONG><a name="[3f]"></a>gpio_wakeup_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gpio.o(i.gpio_wakeup_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gpio_wakeup_handler &rArr; hal_gpioin_enable &rArr; hal_gpio_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioin_event_pin
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(i.hal_gpio_init)
</UL>
<P><STRONG><a name="[248]"></a>gpioin_event</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, gpio.o(i.gpioin_event), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpioin_event &rArr; gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioin_event_pin
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_GPIO_IRQHandler
</UL>

<P><STRONG><a name="[247]"></a>gpioin_event_pin</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gpio.o(i.gpioin_event_pin))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioin_event
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_handler
</UL>

<P><STRONG><a name="[24a]"></a>irq_rx_handler</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, uart.o(i.irq_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = irq_rx_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART0_IRQHandler
</UL>

<P><STRONG><a name="[24b]"></a>irq_tx_empty_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, uart.o(i.irq_tx_empty_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_tx_empty_handler &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART0_IRQHandler
</UL>

<P><STRONG><a name="[269]"></a>txmit_buf_polling</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uart.o(i.txmit_buf_polling))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = txmit_buf_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>

<P><STRONG><a name="[268]"></a>txmit_buf_use_tx_buf</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uart.o(i.txmit_buf_use_tx_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>

<P><STRONG><a name="[42]"></a>uart_hw_config</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, uart.o(i.uart_hw_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart_hw_config &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_reset
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_pclk
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_enable
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.hal_uart_init)
</UL>
<P><STRONG><a name="[4d]"></a>devInfo_ReadAttrCB</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, devinfoservice.o(i.devInfo_ReadAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = devInfo_ReadAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devinfoservice.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>gattServApp_FindAuthorizeAttrCB</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gattservapp.o(i.gattServApp_FindAuthorizeAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattServApp_FindAuthorizeAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindServiceCBs
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
</UL>

<P><STRONG><a name="[122]"></a>gattServApp_FindCharCfgItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindCharCfgItem))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteCharCfg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadCharCfg
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>

<P><STRONG><a name="[22c]"></a>gattServApp_FindPrepareWriteQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindPrepareWriteQ))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_HandleConnStatusCB
</UL>

<P><STRONG><a name="[12a]"></a>gattServApp_FindServiceCBs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gattservapp.o(i.gattServApp_FindServiceCBs))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
</UL>

<P><STRONG><a name="[29]"></a>gattServApp_HandleConnStatusCB</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_HandleConnStatusCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattServApp_HandleConnStatusCB &rArr; GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(i.GATTServApp_Init)
</UL>
<P><STRONG><a name="[22d]"></a>gattServApp_ProcessExecuteWriteReq</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessExecuteWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattServApp_ProcessExecuteWriteReq &rArr; GATTServApp_WriteAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExecuteWriteRsp (via Veneer)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[22f]"></a>gattServApp_ProcessFindByTypeValueReq</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, gattservapp.o(i.gattServApp_ProcessFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gattServApp_ProcessFindByTypeValueReq &rArr; GATTServApp_ReadAttr &rArr; GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID (via Veneer)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_FindByTypeValueRsp (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[127]"></a>gattServApp_ProcessMsg</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gattServApp_ProcessMsg &rArr; gattServApp_ProcessReadByGrpTypeReq &rArr; GATTServApp_ReadAttr &rArr; GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle (via Veneer)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_AppCompletedMsg (via Veneer)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadRsp (via Veneer)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadBlobRsp (via Veneer)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ExchangeMTURsp (via Veneer)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ErrorRsp (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessWriteReq
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadMultiReq
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByTypeReq
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessReadByGrpTypeReq
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessPrepareWriteReq
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessFindByTypeValueReq
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessExecuteWriteReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessEvent
</UL>

<P><STRONG><a name="[239]"></a>gattServApp_ProcessPrepareWriteReq</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_ProcessPrepareWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gattServApp_ProcessPrepareWriteReq &rArr; gattServApp_FindAuthorizeAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle (via Veneer)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_PrepareWriteRsp (via Veneer)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindPrepareWriteQ
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[237]"></a>gattServApp_ProcessReadByGrpTypeReq</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, gattservapp.o(i.gattServApp_ProcessReadByGrpTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gattServApp_ProcessReadByGrpTypeReq &rArr; GATTServApp_ReadAttr &rArr; GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions (via Veneer)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindNextAttr (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID (via Veneer)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByGrpTypeRsp (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[233]"></a>gattServApp_ProcessReadByTypeReq</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, gattservapp.o(i.gattServApp_ProcessReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gattServApp_ProcessReadByTypeReq &rArr; GATTServApp_ReadAttr &rArr; GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_VerifyReadPermissions (via Veneer)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandleUUID (via Veneer)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadByTypeRsp (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[236]"></a>gattServApp_ProcessReadMultiReq</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, gattservapp.o(i.gattServApp_ProcessReadMultiReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gattServApp_ProcessReadMultiReq &rArr; GATTServApp_ReadAttr &rArr; GATTServApp_ReadCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle (via Veneer)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_ReadMultiRsp (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ReadAttr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[238]"></a>gattServApp_ProcessWriteReq</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, gattservapp.o(i.gattServApp_ProcessWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattServApp_ProcessWriteReq &rArr; GATTServApp_WriteAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_FindHandle (via Veneer)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_WriteRsp (via Veneer)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_WriteAttr
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_FindAuthorizeAttrCB
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattServApp_ProcessMsg
</UL>

<P><STRONG><a name="[11f]"></a>gattServApp_SetNumPrepareWrites</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_SetNumPrepareWrites))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattServApp_SetNumPrepareWrites
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_Init
</UL>

<P><STRONG><a name="[4e]"></a>gattServApp_WriteAttrCB</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gattservapp.o(i.gattServApp_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gattServApp_WriteAttrCB &rArr; GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattservapp.o(.constdata)
</UL>
<P><STRONG><a name="[227]"></a>gapRole_ProcessGAPMsg</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, peripheral.o(i.gapRole_ProcessGAPMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = gapRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GAPBondMgr_ResolveAddr &rArr; gapBondMgrGetPublicAddr &rArr; osal_snv_read
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_get_timeoutEx (via Veneer)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_UpdateAdvertisingData (via Veneer)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessOSALMsg
</UL>

<P><STRONG><a name="[111]"></a>gapRole_ProcessOSALMsg</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, peripheral.o(i.gapRole_ProcessOSALMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gapRole_ProcessOSALMsg &rArr; gapRole_ProcessGAPMsg &rArr; GAPBondMgr_LinkEst &rArr; GAPBondMgr_ResolveAddr &rArr; gapBondMgrGetPublicAddr &rArr; osal_snv_read
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_stop_timerEx (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_TerminateConnection
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapRole_ProcessGAPMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[115]"></a>gapRole_startConnUpdate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, peripheral.o(i.gapRole_startConnUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapRole_startConnUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_ConnParamUpdateReq (via Veneer)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_GetParamValue (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_SendUpdateParam
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPRole_ProcessEvent
</UL>

<P><STRONG><a name="[4f]"></a>ggs_ReadAttrCB</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, gapgattserver.o(i.ggs_ReadAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ggs_ReadAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_strlen (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapgattserver.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>ggs_SetAttrWPermit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gapgattserver.o(i.ggs_SetAttrWPermit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ggs_SetAttrWPermit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GGS_SetParameter
</UL>

<P><STRONG><a name="[50]"></a>ggs_WriteAttrCB</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, gapgattserver.o(i.ggs_WriteAttrCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ggs_WriteAttrCB
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_strlen (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapgattserver.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>gapBondMgrAuthenticate</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, gapbondmgr.o(i.gapBondMgrAuthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapBondMgrAuthenticate
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Authenticate (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[101]"></a>gapBondMgrBondReq</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, gapbondmgr.o(i.gapBondMgrBondReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapBondMgrBondReq &rArr; osal_snv_read
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Bond (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[10a]"></a>gapBondMgrFindAddr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gapbondmgr.o(i.gapBondMgrFindAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapBondMgrFindAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>

<P><STRONG><a name="[10d]"></a>gapBondMgrGetPublicAddr</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, gapbondmgr.o(i.gapBondMgrGetPublicAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapBondMgrGetPublicAddr &rArr; osal_snv_read
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_ResolveAddr
</UL>

<P><STRONG><a name="[100]"></a>gapBondMgrGetStateFlags</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gapbondmgr.o(i.gapBondMgrGetStateFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapBondMgrGetStateFlags &rArr; osal_snv_read
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[105]"></a>gapBondMgrInvertCharCfgItem</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapbondmgr.o(i.gapBondMgrInvertCharCfgItem))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAPBondMgr_LinkEst
</UL>

<P><STRONG><a name="[28f]"></a>print_hex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osal_snv.o(i.print_hex))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
</UL>

<P><STRONG><a name="[28e]"></a>snv_calc_addr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, osal_snv.o(i.snv_calc_addr))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_snv_read
</UL>

<P><STRONG><a name="[54]"></a>ProcessUartData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, blemesh.o(i.ProcessUartData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcessUartData
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blemesh.o(.constdata)
</UL>
<P><STRONG><a name="[1e1]"></a>bleMesh_ProcessGAPMsg</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, blemesh.o(i.bleMesh_ProcessGAPMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bleMesh_ProcessGAPMsg &rArr; blebrr_handle_evt_scan_complete &rArr; blebrr_pl_scan_setup &rArr; blebrr_timer_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_MakeDiscoverable (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_EndDiscoverable (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryRequest (via Veneer)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DeviceDiscoveryCancel (via Veneer)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_disconnection_pl
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_le_connection_pl
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_scan_complete
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_adv_report
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_handle_evt_adv_complete
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessOSALMsg
</UL>

<P><STRONG><a name="[1da]"></a>bleMesh_ProcessOSALMsg</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, blemesh.o(i.bleMesh_ProcessOSALMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = bleMesh_ProcessOSALMsg &rArr; bleMesh_ProcessGAPMsg &rArr; blebrr_handle_evt_scan_complete &rArr; blebrr_pl_scan_setup &rArr; blebrr_timer_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessGAPMsg
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_client_process_gattMsg
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bleMesh_ProcessEvent
</UL>

<P><STRONG><a name="[1a0]"></a>aes_ccm_auth</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, aes-ccm.o(i.aes_ccm_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aes_ccm_auth &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_aes_block
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>

<P><STRONG><a name="[19f]"></a>aes_ccm_auth_start</STRONG> (Thumb, 154 bytes, Stack size 88 bytes, aes-ccm.o(i.aes_ccm_auth_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_aes_block
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>

<P><STRONG><a name="[19e]"></a>aes_ccm_encr</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, aes-ccm.o(i.aes_ccm_encr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = aes_ccm_encr &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_aes_block
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>

<P><STRONG><a name="[19c]"></a>aes_ccm_encr_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, aes-ccm.o(i.aes_ccm_encr_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aes_ccm_encr_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ae
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_ad
</UL>

<P><STRONG><a name="[1a3]"></a>xor_aes_block</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes-ccm.o(i.xor_aes_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xor_aes_block
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth_start
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_auth
</UL>

<P><STRONG><a name="[1]"></a>appl_mesh_prov_data_in_wt_cb</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, blebrr_pl.o(i.appl_mesh_prov_data_in_wt_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = appl_mesh_prov_data_in_wt_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_recv_gattpacket
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_pl.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>appl_mesh_prov_data_out_ccd_cb</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, blebrr_pl.o(i.appl_mesh_prov_data_out_ccd_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = appl_mesh_prov_data_out_ccd_cb &rArr; blebrr_gatt_com_channel_setup_pl &rArr; blebrr_pl_gatt_connection &rArr; blebrr_scan_enable &rArr; blebrr_scan_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_com_channel_setup_pl
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_pl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>appl_mesh_proxy_data_in_wt_cb</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, blebrr_pl.o(i.appl_mesh_proxy_data_in_wt_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = appl_mesh_proxy_data_in_wt_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_recv_gattpacket
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_pl.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>appl_mesh_proxy_data_out_ccd_cb</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, blebrr_pl.o(i.appl_mesh_proxy_data_out_ccd_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = appl_mesh_proxy_data_out_ccd_cb &rArr; blebrr_gatt_com_channel_setup_pl &rArr; blebrr_pl_gatt_connection &rArr; blebrr_scan_enable &rArr; blebrr_scan_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_com_channel_setup_pl
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_pl.o(.data)
</UL>
<P><STRONG><a name="[1b4]"></a>blebrr_gatt_com_channel_setup_pl</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, blebrr_pl.o(i.blebrr_gatt_com_channel_setup_pl))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = blebrr_gatt_com_channel_setup_pl &rArr; blebrr_pl_gatt_connection &rArr; blebrr_scan_enable &rArr; blebrr_scan_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_disconnection
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_gatt_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_data_out_ccd_cb
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_data_out_ccd_cb
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_proxy_notif_config_status_cb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_prov_notif_config_status_cb
</UL>

<P><STRONG><a name="[144]"></a>NV_Read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nvs.o(i.NV_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_read
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_open
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Write
</UL>

<P><STRONG><a name="[146]"></a>NV_Write</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nvs.o(i.NV_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlash
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NV_Read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_write
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvs_open
</UL>

<P><STRONG><a name="[3b]"></a>blebrr_adv_send</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, blebrr.o(i.blebrr_adv_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = blebrr_adv_send &rArr; blebrr_bcon_send &rArr; blebrr_send &rArr; blebrr_update_advdata &rArr; blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_enqueue_alloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_bcon_send
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr.o(i.blebrr_register)
</UL>
<P><STRONG><a name="[3c]"></a>blebrr_adv_sleep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_adv_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blebrr_adv_sleep &rArr; blebrr_scan_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_enter_sleep_pl
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr.o(i.blebrr_register)
</UL>
<P><STRONG><a name="[3d]"></a>blebrr_adv_wakeup</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_adv_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blebrr_adv_wakeup &rArr; blebrr_scan_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_exit_sleep_pl
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr.o(i.blebrr_register)
</UL>
<P><STRONG><a name="[3e]"></a>blebrr_advscan_timeout_handler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_advscan_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blebrr_advscan_timeout_handler &rArr; blebrr_scan_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_pl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr.o(i.blebrr_timer_start)
</UL>
<P><STRONG><a name="[1e9]"></a>blebrr_bcon_send</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, blebrr.o(i.blebrr_bcon_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = blebrr_bcon_send &rArr; blebrr_send &rArr; blebrr_update_advdata &rArr; blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_get
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_send
</UL>

<P><STRONG><a name="[1f0]"></a>blebrr_dequeue</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, blebrr.o(i.blebrr_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blebrr_dequeue &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_update_advdata
</UL>

<P><STRONG><a name="[1ea]"></a>blebrr_enqueue_alloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, blebrr.o(i.blebrr_enqueue_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blebrr_enqueue_alloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_send
</UL>

<P><STRONG><a name="[1eb]"></a>blebrr_send</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, blebrr.o(i.blebrr_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = blebrr_send &rArr; blebrr_update_advdata &rArr; blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_alloc_mem
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_update_advdata
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_bcon_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_adv_send
</UL>

<P><STRONG><a name="[205]"></a>blebrr_timer_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, blebrr.o(i.blebrr_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = blebrr_timer_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_scan_setup
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_advertise_setup
</UL>

<P><STRONG><a name="[208]"></a>blebrr_update_advdata</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, blebrr.o(i.blebrr_update_advdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = blebrr_update_advdata &rArr; blebrr_advertise_data_pl &rArr; blebrr_advertise_pl &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_free_mem
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_get_queue_depth
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_dequeue
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_advertise_data_pl
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_send
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_pl_scan_setup
</UL>

<P><STRONG><a name="[3a]"></a>blebrr_gatt_send</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, blebrr_gatt.o(i.blebrr_gatt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = blebrr_gatt_send &rArr; blebrr_gatt_send_pl &rArr; mesh_client_send_wwr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_send_pl
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blebrr_gatt.o(i.blebrr_pl_gatt_connection)
</UL>
<P><STRONG><a name="[49]"></a>mesh_prov_handle_conn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mesh_services.o(i.mesh_prov_handle_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mesh_prov_handle_conn &rArr; GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_services.o(i.mesh_prov_init)
</UL>
<P><STRONG><a name="[5f]"></a>mesh_prov_write_cb</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, mesh_services.o(i.mesh_prov_write_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mesh_prov_write_cb &rArr; GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_services.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>mesh_proxy_handle_conn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mesh_services.o(i.mesh_proxy_handle_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mesh_proxy_handle_conn &rArr; GATTServApp_InitCharCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkDB_State (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_InitCharCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_services.o(i.mesh_proxy_init)
</UL>
<P><STRONG><a name="[60]"></a>mesh_proxy_write_cb</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, mesh_services.o(i.mesh_proxy_write_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mesh_proxy_write_cb &rArr; GATTServApp_ProcessCCCWriteReq &rArr; GATTServApp_SendCCCUpdatedEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATTServApp_ProcessCCCWriteReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mesh_services.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>Hue_2_RGB</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, model_state_handler_pl.o(i.Hue_2_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Hue_2_RGB &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_hsl_set_pl
</UL>

<P><STRONG><a name="[1c8]"></a>clock_time_rtc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appl_prov.o(i.clock_time_rtc))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_prov_callback
</UL>

<P><STRONG><a name="[68]"></a>ms_model_state_transition_timer_handler</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, libethermind_mesh_core.lib(i.ms_model_state_transition_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ms_model_state_transition_timer_handler &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_common_start_transition_timer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> libethermind_mesh_core.lib(i.MS_common_start_transition_timer)
<LI> libethermind_mesh_core.lib(i.ms_model_state_transition_timer_handler)
</UL>
<P><STRONG><a name="[92]"></a>trn_pub_timeout_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.trn_pub_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = trn_pub_timeout_handler &rArr; MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_start_heartbeat_pub_timer
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_trigger_heartbeat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.trn_start_heartbeat_pub_timer)
</UL>
<P><STRONG><a name="[31a]"></a>trn_start_heartbeat_pub_timer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.trn_start_heartbeat_pub_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = trn_start_heartbeat_pub_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trn_pub_timeout_handler
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_set_heartbeat_publication
</UL>

<P><STRONG><a name="[319]"></a>trn_stop_heartbeat_pub_timer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.trn_stop_heartbeat_pub_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = trn_stop_heartbeat_pub_timer &rArr; EM_stop_timer &rArr; timer_del_entity &rArr; EM_free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_set_heartbeat_publication
</UL>

<P><STRONG><a name="[74]"></a>trn_sub_timeout_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.trn_sub_timeout_handler))
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.MS_trn_set_heartbeat_subscription)
</UL>
<P><STRONG><a name="[361]"></a>ms_access_add_periodic_step_timer_entity</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.ms_access_add_periodic_step_timer_entity))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ms_access_add_periodic_step_timer_entity &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_timer_get_remaining_time (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_period_step_timer_handler
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_start_periodic_step_timer
</UL>

<P><STRONG><a name="[7a]"></a>ms_access_period_step_timer_handler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.ms_access_period_step_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ms_access_period_step_timer_handler &rArr; ms_access_add_periodic_step_timer_entity &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_access_add_periodic_step_timer_entity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.ms_access_add_periodic_step_timer_entity)
</UL>
<P><STRONG><a name="[12]"></a>ms_load_appkeys</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_appkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_load_appkeys &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[10]"></a>ms_load_dev_key</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_dev_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_load_dev_key &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[14]"></a>ms_load_element_addresses</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_element_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_load_element_addresses &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[a]"></a>ms_load_elements</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_elements))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_load_elements &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[c]"></a>ms_load_models</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_models))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_load_models &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[18]"></a>ms_load_non_virtual_addresses</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_non_virtual_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_load_non_virtual_addresses &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[1a]"></a>ms_load_seq_number</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_seq_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_load_seq_number &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read (via Veneer)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_set_seq_num_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[e]"></a>ms_load_subnets</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_subnets))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_load_subnets &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[1c]"></a>ms_load_tx_states_and_features</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_tx_states_and_features))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_load_tx_states_and_features &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[16]"></a>ms_load_virtual_addresses</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_load_virtual_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ms_load_virtual_addresses &rArr; nvsto_read &rArr; nvs_read &rArr; NV_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_read (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[11]"></a>ms_store_appkeys</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_store_appkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ms_store_appkeys &rArr; nvsto_write &rArr; nvs_write &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[f]"></a>ms_store_dev_key</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_store_dev_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ms_store_dev_key &rArr; nvsto_write &rArr; nvs_write &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[13]"></a>ms_store_element_addresses</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_store_element_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ms_store_element_addresses &rArr; nvsto_write &rArr; nvs_write &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[9]"></a>ms_store_elements</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_store_elements))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ms_store_elements &rArr; nvsto_write &rArr; nvs_write &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[b]"></a>ms_store_models</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_store_models))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ms_store_models &rArr; nvsto_write &rArr; nvs_write &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[17]"></a>ms_store_non_virtual_addresses</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_store_non_virtual_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ms_store_non_virtual_addresses &rArr; nvsto_write &rArr; nvs_write &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[19]"></a>ms_store_seq_number</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_store_seq_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ms_store_seq_number &rArr; nvsto_write &rArr; nvs_write &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write (via Veneer)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_seq_num_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[d]"></a>ms_store_subnets</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_store_subnets))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ms_store_subnets &rArr; nvsto_write &rArr; nvs_write &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[1b]"></a>ms_store_tx_states_and_features</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_store_tx_states_and_features))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ms_store_tx_states_and_features &rArr; nvsto_write &rArr; nvs_write &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[15]"></a>ms_store_virtual_addresses</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.ms_store_virtual_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ms_store_virtual_addresses &rArr; nvsto_write &rArr; nvs_write &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvsto_write (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(.data)
</UL>
<P><STRONG><a name="[321]"></a>config_appkey_add_update_delete_handler</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, libethermind_mesh_core.lib(i.config_appkey_add_update_delete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = config_appkey_add_update_delete_handler &rArr; MS_access_cm_update_delete_appkey &rArr; ms_stbx_k4 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_subnet
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_update_delete_appkey
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_appkey_handle
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_appkey
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[322]"></a>config_appkey_get_handler</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, libethermind_mesh_core.lib(i.config_appkey_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = config_appkey_get_handler &rArr; config_pack_key_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_subnet
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_pack_key_indices
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_appkey_index_list
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[325]"></a>config_beacon_get_set_handler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.config_beacon_get_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = config_beacon_get_set_handler &rArr; MS_access_cm_set_features_field &rArr; MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_start_snb_timer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_features_field
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features_field
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[327]"></a>config_gatt_proxy_get_set_handler</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.config_gatt_proxy_get_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = config_gatt_proxy_get_set_handler &rArr; MS_access_cm_set_features_field &rArr; MS_trn_trigger_heartbeat &rArr; MS_trn_send_control_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_features_field
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_start
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_fetch_state
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_stop
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_features_field
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[328]"></a>config_heartbeat_publication_get_set_handler</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.config_heartbeat_publication_get_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = config_heartbeat_publication_get_set_handler &rArr; MS_trn_set_heartbeat_publication &rArr; trn_start_heartbeat_pub_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_set_heartbeat_publication
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_get_heartbeat_publication
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[32a]"></a>config_heartbeat_subscription_get_set_handler</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.config_heartbeat_subscription_get_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = config_heartbeat_subscription_get_set_handler &rArr; MS_trn_set_heartbeat_subscription &rArr; MS_access_cm_add_model_subscription &rArr; ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_set_heartbeat_subscription
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_get_heartbeat_subscription
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[32c]"></a>config_key_refresh_phase_get_handler</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.config_key_refresh_phase_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_key_refresh_phase_get_handler &rArr; MS_access_cm_find_subnet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_subnet
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_key_refresh_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[32d]"></a>config_key_refresh_phase_set_handler</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.config_key_refresh_phase_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = config_key_refresh_phase_set_handler &rArr; MS_access_cm_set_key_refresh_phase &rArr; ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_refresh_all_friend_credentials &rArr; ms_access_cm_friend_credentials_refresh &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_subnet
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_key_refresh_phase
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[32e]"></a>config_low_power_node_polltimeout_get_handler</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.config_low_power_node_polltimeout_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = config_low_power_node_polltimeout_get_handler &rArr; MS_trn_get_lpn_polltimeout &rArr; frnd_search_lpn_element
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_trn_get_lpn_polltimeout
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[32f]"></a>config_model_app_bind_unbind_handler</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, libethermind_mesh_core.lib(i.config_model_app_bind_unbind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = config_model_app_bind_unbind_handler &rArr; MS_access_unbind_model_app &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_unbind_model_app
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_bind_model_app
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_model_handle
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_element_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[332]"></a>config_model_app_get_handler</STRONG> (Thumb, 216 bytes, Stack size 112 bytes, libethermind_mesh_core.lib(i.config_model_app_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = config_model_app_get_handler &rArr; MS_access_cm_get_model_app_list &rArr; bitarray_get_lowest_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_pack_key_indices
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_model_app_list
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_model_handle
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_element_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[333]"></a>config_model_publication_get_handler</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, libethermind_mesh_core.lib(i.config_model_publication_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = config_model_publication_get_handler &rArr; MS_access_get_model_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_model_publication
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_model_handle
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_element_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[334]"></a>config_model_publication_set_handler</STRONG> (Thumb, 412 bytes, Stack size 80 bytes, libethermind_mesh_core.lib(i.config_model_publication_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = config_model_publication_set_handler &rArr; MS_access_cm_set_model_publication &rArr; ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_model_handle
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_element_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[335]"></a>config_model_subscription_add_handler</STRONG> (Thumb, 316 bytes, Stack size 88 bytes, libethermind_mesh_core.lib(i.config_model_subscription_add_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = config_model_subscription_add_handler &rArr; MS_access_cm_add_model_subscription &rArr; ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_scan_pl (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via Veneer)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_model_handle
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_element_handle
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_model_subscription
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[336]"></a>config_model_subscription_delete_all_handler</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, libethermind_mesh_core.lib(i.config_model_subscription_delete_all_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = config_model_subscription_delete_all_handler &rArr; MS_access_cm_delete_all_model_subscription &rArr; ms_delete_address &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_all_model_subscription
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_model_handle
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_element_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[337]"></a>config_model_subscription_delete_handler</STRONG> (Thumb, 274 bytes, Stack size 88 bytes, libethermind_mesh_core.lib(i.config_model_subscription_delete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = config_model_subscription_delete_handler &rArr; MS_access_cm_delete_model_subscription &rArr; ms_delete_address &rArr; ms_access_ps_store &rArr; nvsto_open &rArr; nvs_open &rArr; NV_Write &rArr; WriteFlash &rArr; ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_model_subscription
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_model_handle
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_element_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[338]"></a>config_model_subscription_get_handler</STRONG> (Thumb, 260 bytes, Stack size 96 bytes, libethermind_mesh_core.lib(i.config_model_subscription_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = config_model_subscription_get_handler &rArr; MS_access_cm_get_model_subscription_list &rArr; bitarray_get_lowest_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_model_subscription_list
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_model_handle
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_element_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[339]"></a>config_model_subscription_overwrite_handler</STRONG> (Thumb, 286 bytes, Stack size 88 bytes, libethermind_mesh_core.lib(i.config_model_subscription_overwrite_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = config_model_subscription_overwrite_handler &rArr; MS_access_cm_add_model_subscription &rArr; ms_search_and_add_virtual_address &rArr; ms_stbx_va &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_delete_all_model_subscription
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_model_handle
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_get_element_handle
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_add_model_subscription
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[33a]"></a>config_node_identity_get_handler</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.config_node_identity_get_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = config_node_identity_get_handler &rArr; MS_access_cm_find_subnet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_subnet
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_get_node_identity
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[33b]"></a>config_node_identity_set_handler</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.config_node_identity_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = config_node_identity_set_handler &rArr; MS_proxy_server_adv_start &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_find_subnet
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_node_identity
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_start
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_fetch_state
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_server_adv_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[324]"></a>config_pack_key_indices</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, libethermind_mesh_core.lib(i.config_pack_key_indices))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = config_pack_key_indices
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_model_app_get_handler
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_appkey_get_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_server_cb
</UL>

<P><STRONG><a name="[326]"></a>config_start_snb_timer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.config_start_snb_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = config_start_snb_timer &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snb_timeout_handler
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_beacon_get_set_handler
</UL>

<P><STRONG><a name="[75]"></a>snb_timeout_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.snb_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = snb_timeout_handler &rArr; MS_net_broadcast_secure_beacon &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_net_broadcast_secure_beacon
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_start_snb_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_core.lib(i.config_start_snb_timer)
</UL>
<P><STRONG><a name="[76]"></a>health_server_attention_timeout_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, libethermind_mesh_core.lib(i.health_server_attention_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = health_server_attention_timeout_handler &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> libethermind_mesh_core.lib(i.health_server_attention_timeout_handler)
<LI> libethermind_mesh_core.lib(i.health_server_set_attention)
</UL>
<P><STRONG><a name="[342]"></a>health_server_clear_fault</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.health_server_clear_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = health_server_clear_fault &rArr; bitarray_reset_all
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_reset_all (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_cb
</UL>

<P><STRONG><a name="[347]"></a>health_server_get_attention</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.health_server_get_attention))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_cb
</UL>

<P><STRONG><a name="[344]"></a>health_server_get_fault_status</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.health_server_get_fault_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = health_server_get_fault_status &rArr; bitarray_get_lowest_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_debug_printf (via Veneer)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr (via Veneer)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitarray_get_lowest_bit_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_publish_timout_cb
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_cb
</UL>

<P><STRONG><a name="[345]"></a>health_server_get_period_divisor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, libethermind_mesh_core.lib(i.health_server_get_period_divisor))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_cb
</UL>

<P><STRONG><a name="[343]"></a>health_server_run_self_test</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, libethermind_mesh_core.lib(i.health_server_run_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = health_server_run_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_cb
</UL>

<P><STRONG><a name="[341]"></a>health_server_search_entity</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.health_server_search_entity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = health_server_search_entity
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_cb
</UL>

<P><STRONG><a name="[348]"></a>health_server_set_attention</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, libethermind_mesh_core.lib(i.health_server_set_attention))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = health_server_set_attention &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_stop_timer (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_cb
</UL>

<P><STRONG><a name="[346]"></a>health_server_set_period_divisor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, libethermind_mesh_core.lib(i.health_server_set_period_divisor))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = health_server_set_period_divisor &rArr; MS_access_cm_set_model_publication_period_divisor &rArr; ms_access_start_periodic_step_timer &rArr; ms_access_add_periodic_step_timer_entity &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_model_publication_period_divisor
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_server_cb
</UL>

<P><STRONG><a name="[3ab]"></a>ms_scene_delete</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, libethermind_mesh_models.lib(i.ms_scene_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ms_scene_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scene_server_cb
</UL>

<P><STRONG><a name="[3aa]"></a>ms_scene_frame_reg_status_response</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, libethermind_mesh_models.lib(i.ms_scene_frame_reg_status_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ms_scene_frame_reg_status_response
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scene_server_cb
</UL>

<P><STRONG><a name="[37a]"></a>ms_scene_frame_status_response</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, libethermind_mesh_models.lib(i.ms_scene_frame_status_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ms_scene_frame_status_response &rArr; MS_common_get_remaining_transition_time_with_offset &rArr; MS_common_get_transition_time_from_ms &rArr; EM_debug_printf &rArr; vprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_common_get_remaining_transition_time_with_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scene_server_cb
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_scene_transition_complete_cb
</UL>

<P><STRONG><a name="[37b]"></a>ms_scene_recall</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, libethermind_mesh_models.lib(i.ms_scene_recall))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ms_scene_recall &rArr; MS_common_start_transition_timer &rArr; ms_model_state_transition_timer_handler &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_generic_default_transition_time_server_get_time
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_common_start_transition_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scene_server_cb
</UL>

<P><STRONG><a name="[82]"></a>ms_scene_transition_complete_cb</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, libethermind_mesh_models.lib(i.ms_scene_transition_complete_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = ms_scene_transition_complete_cb &rArr; MS_access_publish &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_scene_frame_status_response
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_publish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_models.lib(i.ms_scene_recall)
</UL>
<P><STRONG><a name="[81]"></a>ms_scene_transition_start_cb</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, libethermind_mesh_models.lib(i.ms_scene_transition_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ms_scene_transition_start_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libethermind_mesh_models.lib(i.ms_scene_recall)
</UL>
<P><STRONG><a name="[1ac]"></a>aes_cmac_1bit_leftshift_16octet_stream</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, libethermind_utils.lib(i.aes_cmac_1bit_leftshift_16octet_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aes_cmac_1bit_leftshift_16octet_stream
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_subkeys
</UL>

<P><STRONG><a name="[1aa]"></a>aes_cmac_finalize_mac</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, libethermind_utils.lib(i.aes_cmac_finalize_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_128B_encrypt_pl
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_xor_16octet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_mac
</UL>

<P><STRONG><a name="[1a6]"></a>aes_cmac_generate_mac</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, libethermind_utils.lib(i.aes_cmac_generate_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_128B_encrypt_pl
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_xor_16octet
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_finalize_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac
</UL>

<P><STRONG><a name="[1a5]"></a>aes_cmac_generate_subkeys</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, libethermind_utils.lib(i.aes_cmac_generate_subkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aes_cmac_generate_subkeys &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_128B_encrypt_pl
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_xor_16octet
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_1bit_leftshift_16octet_stream
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac
</UL>

<P><STRONG><a name="[1ab]"></a>aes_cmac_xor_16octet</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, libethermind_utils.lib(i.aes_cmac_xor_16octet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aes_cmac_xor_16octet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_subkeys
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_generate_mac
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cmac_finalize_mac
</UL>

<P><STRONG><a name="[155]"></a>UI_generic_onoff_model_state_set</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, appl_sample_example_phylight.o(i.UI_generic_onoff_model_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = UI_generic_onoff_model_state_set &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_start_timer
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_onoff_set_pl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_proxy_fetch_state (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_generic_onoff_server_cb
</UL>

<P><STRONG><a name="[2f]"></a>UI_generic_onoff_server_cb</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, appl_sample_example_phylight.o(i.UI_generic_onoff_server_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880<LI>Call Chain = UI_generic_onoff_server_cb &rArr; MS_generic_onoff_server_state_update &rArr; MS_access_reply &rArr; ms_access_publish_ex &rArr; MS_access_send_pdu &rArr; MS_trn_send_access_pdu &rArr; MS_ltrn_send_pdu &rArr; ltrn_send_seg_pdu &rArr; ltrn_sar_transmit_segments &rArr; ltrn_sar_transmit_segment &rArr; MS_net_send_pdu &rArr; net_pkt_send &rArr; cry_aes_128_ccm_encrypt &rArr; aes_ccm_ae &rArr; aes_ccm_auth_start &rArr; aes_encrypt &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_generic_onoff_model_state_set
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_generic_onoff_server_state_update (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(i.UI_register_generic_onoff_model_server)
</UL>
<P><STRONG><a name="[1d]"></a>UI_health_self_test_00</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appl_sample_example_phylight.o(i.UI_health_self_test_00))
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>UI_health_self_test_01</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appl_sample_example_phylight.o(i.UI_health_self_test_01))
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>UI_health_self_test_FF</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, appl_sample_example_phylight.o(i.UI_health_self_test_FF))
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>UI_health_server_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_health_server_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UI_health_server_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(i.UI_register_foundation_model_servers)
</UL>
<P><STRONG><a name="[154]"></a>UI_prov_bind</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_prov_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = UI_prov_bind &rArr; MS_prov_bind &rArr; prov_link_open &rArr; EM_start_timer &rArr; EM_alloc_mem &rArr; osal_memory_statics &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_bind (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_gatt_iface_event_pl_cb
</UL>

<P><STRONG><a name="[31]"></a>UI_prov_callback</STRONG> (Thumb, 704 bytes, Stack size 48 bytes, appl_sample_example_phylight.o(i.UI_prov_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = UI_prov_callback &rArr; MS_access_cm_set_prov_data &rArr; MS_access_cm_add_update_netkey &rArr; ms_access_cm_update_key_refresh_phase &rArr; ms_access_cm_refresh_all_friend_credentials &rArr; ms_access_cm_friend_credentials_refresh &rArr; ms_stbx_k2 &rArr; ms_stbx_s1 &rArr; cry_aes_128_cmac &rArr; aes_cmac &rArr; aes_cmac_generate_mac &rArr; aes_cmac_finalize_mac &rArr; aes_cmac_128B_encrypt_pl &rArr; cry_aes_128_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_get_device_key
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_blink_set
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_reflash
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;light_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mesh_model_device_provisioned_ind_pl
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_dump_bytes
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_set_authval (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_access_cm_set_prov_data (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_sample_example_phylight.o(i.UI_register_prov)
</UL>
<P><STRONG><a name="[175]"></a>UI_register_prov</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, appl_sample_example_phylight.o(i.UI_register_prov))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UI_register_prov &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_register (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appl_mesh_sample
</UL>

<P><STRONG><a name="[186]"></a>UI_setup_prov</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, appl_sample_example_phylight.o(i.UI_setup_prov))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = UI_setup_prov &rArr; MS_prov_setup &rArr; cry_ecdh_init &rArr; phyplus_ecdh_init &rArr; P256_ecdh_keygen &rArr; P256_pointmult &rArr; P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blebrr_gatt_mode_set
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_prov_setup (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_sample_reinit
</UL>

<P><STRONG><a name="[a2]"></a>P256_mul64</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_mul128
</UL>

<P><STRONG><a name="[a1]"></a>P256_mul128</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_mul64
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_mulmod
</UL>

<P><STRONG><a name="[22]"></a>P256_mulmod</STRONG> (Thumb, 570 bytes, Stack size 104 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_mul128
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_jacobian_to_affine
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_modinv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_sqrmod_many_and_mulmod
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_from_montgomery
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_to_montgomery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p256-cortex-m0-ecdh-keil.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>P256_sqr64</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_sqr128
</UL>

<P><STRONG><a name="[a3]"></a>P256_sqr128</STRONG> (Thumb, 124 bytes, Stack size 4 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = P256_sqr128
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_sqr64
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_sqrmod
</UL>

<P><STRONG><a name="[23]"></a>P256_sqrmod</STRONG> (Thumb, 244 bytes, Stack size 108 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = P256_sqrmod &rArr; P256_sqr128
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_sqr128
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_jacobian_to_affine
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_modinv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_sqrmod_many_and_mulmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p256-cortex-m0-ecdh-keil.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>P256_addmod</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P256_addmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p256-cortex-m0-ecdh-keil.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>P256_submod</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P256_submod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p256-cortex-m0-ecdh-keil.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>P256_load_1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>

<P><STRONG><a name="[a5]"></a>P256_to_montgomery</STRONG> (Thumb, 10 bytes, Stack size 20 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = P256_to_montgomery &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_mulmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>

<P><STRONG><a name="[a6]"></a>P256_from_montgomery</STRONG> (Thumb, 26 bytes, Stack size 52 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = P256_from_montgomery &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_mulmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>

<P><STRONG><a name="[a7]"></a>P256_point_is_on_curve</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = P256_point_is_on_curve &rArr; P256_interpreter
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_interpreter
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_greater_or_equal_than
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>

<P><STRONG><a name="[a9]"></a>P256_greater_or_equal_than</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = P256_greater_or_equal_than
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_point_is_on_curve
</UL>

<P><STRONG><a name="[b3]"></a>P256_negate_mod_m_if</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = P256_negate_mod_m_if
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>

<P><STRONG><a name="[ae]"></a>P256_copy32</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = P256_copy32
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_modinv
</UL>

<P><STRONG><a name="[b1]"></a>P256_copy32_unaligned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>

<P><STRONG><a name="[b5]"></a>P256_select</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = P256_select
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>

<P><STRONG><a name="[aa]"></a>P256_double_j</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = P256_double_j &rArr; P256_interpreter
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_interpreter
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>

<P><STRONG><a name="[ab]"></a>P256_add_j</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = P256_add_j &rArr; P256_interpreter
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_interpreter
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>

<P><STRONG><a name="[26]"></a>P256_div2mod</STRONG> (Thumb, 102 bytes, Stack size 76 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = P256_div2mod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> p256-cortex-m0-ecdh-keil.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>P256_interpreter</STRONG> (Thumb, 78 bytes, Stack size 156 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = P256_interpreter
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_add_j
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_double_j
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_point_is_on_curve
</UL>

<P><STRONG><a name="[ac]"></a>P256_sqrmod_many_and_mulmod</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_sqrmod
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_mulmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_modinv
</UL>

<P><STRONG><a name="[ad]"></a>P256_modinv</STRONG> (Thumb, 114 bytes, Stack size 208 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_sqrmod_many_and_mulmod
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_copy32
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_sqrmod
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_mulmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_jacobian_to_affine
</UL>

<P><STRONG><a name="[af]"></a>P256_jacobian_to_affine</STRONG> (Thumb, 60 bytes, Stack size 88 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = P256_jacobian_to_affine &rArr; P256_modinv &rArr; P256_sqrmod_many_and_mulmod &rArr; P256_mulmod &rArr; P256_mul128
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_modinv
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_sqrmod
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_mulmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>

<P><STRONG><a name="[b4]"></a>P256_abs_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, p256-cortex-m0-ecdh-keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P256_pointmult
</UL>

<P><STRONG><a name="[296]"></a>chip_id_one_bit_hot_convter</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, flash_ext.o(i.chip_id_one_bit_hot_convter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chip_id_one_bit_hot_convter
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chip_mAddr
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chip_id
</UL>

<P><STRONG><a name="[195]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[192]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[198]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[197]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[36]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
