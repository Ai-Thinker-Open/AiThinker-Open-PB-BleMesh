<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\voicedemo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\voicedemo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Nov 20 16:39:16 2018
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
voice_ProcessEvent &rArr; voiceStopTask &rArr; phy_printf &rArr; print &rArr; printi &rArr; prints
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">HardFault_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[12]">LL_ENC_Decrypt0</a> from patch.o(i.LL_ENC_Decrypt0) referenced from patch.o(i.init_config)
 <LI><a href="#[11]">LL_ENC_Encrypt0</a> from patch.o(i.LL_ENC_Encrypt0) referenced from patch.o(i.init_config)
 <LI><a href="#[f]">LL_IRQHandler1</a> from patch.o(i.LL_IRQHandler1) referenced from patch.o(i.init_config)
 <LI><a href="#[25]">LL_ProcessEvent</a> from rom1Sym.txt(ABSOLUTE) referenced from osal_voice.o(.constdata)
 <LI><a href="#[14]">LL_SetAdvParam1</a> from patch.o(i.LL_SetAdvParam1) referenced from patch.o(i.init_config)
 <LI><a href="#[17]">LL_set_default_conn_params1</a> from patch.o(i.LL_set_default_conn_params1) referenced from patch.o(i.init_config)
 <LI><a href="#[1c]">LL_slave_conn_event1</a> from patch.o(i.LL_slave_conn_event1) referenced from patch.o(i.init_config)
 <LI><a href="#[1]">NMI_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[c]">SystemInit</a> from system_armcm0.o(.text) referenced from startup_armcm0.o(.text)
 <LI><a href="#[2c]">TIM0_IRQHandler1</a> from patch.o(i.TIM0_IRQHandler1) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_armcm0.o(.text)
 <LI><a href="#[1f]">boot_init1</a> from patch.o(i.boot_init1) referenced from patch.o(i.init_config)
 <LI><a href="#[20]">config_RTC1</a> from patch.o(i.config_RTC1) referenced from patch.o(i.init_config)
 <LI><a href="#[1a]">enterSleepProcess1</a> from patch.o(i.enterSleepProcess1) referenced from patch.o(i.init_config)
 <LI><a href="#[a]">gpio_sleep_handler</a> from gpio.o(.text) referenced from gpio.o(.text)
 <LI><a href="#[9]">gpio_wakeup_handler</a> from gpio.o(.text) referenced from gpio.o(.text)
 <LI><a href="#[2f]">hal_ADC_IRQHandler</a> from voice.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[2e]">hal_GPIO_IRQHandler</a> from gpio.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[2d]">hal_UART0_IRQHandler</a> from uart.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[28]">hal_pwrmgr_sleep_process</a> from pwrmgr.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[29]">hal_pwrmgr_wakeup_process</a> from pwrmgr.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[2b]">hard_fault</a> from jump_table.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[16]">llProcessRxData1</a> from patch.o(i.llProcessRxData1) referenced from patch.o(i.init_config)
 <LI><a href="#[24]">llProcessSlaveControlPacket1</a> from patch.o(i.llProcessSlaveControlPacket1) referenced from patch.o(i.init_config)
 <LI><a href="#[13]">llProcessSlaveControlProcedures0</a> from patch.o(i.llProcessSlaveControlProcedures0) referenced from patch.o(i.init_config)
 <LI><a href="#[21]">llSetupAdv1</a> from patch.o(i.llSetupAdv1) referenced from patch.o(i.init_config)
 <LI><a href="#[15]">llSetupDirectedAdvEvt1</a> from patch.o(i.llSetupDirectedAdvEvt1) referenced from patch.o(i.init_config)
 <LI><a href="#[23]">llSetupNextSlaveEvent1</a> from patch.o(i.llSetupNextSlaveEvent1) referenced from patch.o(i.init_config)
 <LI><a href="#[1d]">llSetupUndirectedAdvEvt1</a> from patch.o(i.llSetupUndirectedAdvEvt1) referenced from patch.o(i.init_config)
 <LI><a href="#[22]">llSlaveEvt_TaskEndOk1</a> from patch.o(i.llSlaveEvt_TaskEndOk1) referenced from patch.o(i.init_config)
 <LI><a href="#[e]">ll_hw_go1</a> from patch.o(i.ll_hw_go1) referenced from patch.o(i.init_config)
 <LI><a href="#[6]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1b]">move_to_slave_function1</a> from patch.o(i.move_to_slave_function1) referenced from patch.o(i.init_config)
 <LI><a href="#[27]">osalInitTasks</a> from osal_voice.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[19]">osal_pwrmgr_powerconserve1</a> from patch.o(i.osal_pwrmgr_powerconserve1) referenced from patch.o(i.init_config)
 <LI><a href="#[10]">rf_calibrate1</a> from patch.o(i.rf_calibrate1) referenced from patch.o(i.init_config)
 <LI><a href="#[2a]">rf_phy_ini</a> from rf_phy_driver.o(i.rf_phy_ini) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[7]">rf_wakeup_handler</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[b]">uart_hw_config</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[26]">voice_ProcessEvent</a> from voice_demo.o(.text) referenced from osal_voice.o(.constdata)
 <LI><a href="#[8]">voice_evt_handler_adpcm</a> from voice_demo.o(.text) referenced from voice_demo.o(.text)
 <LI><a href="#[18]">wakeupProcess1</a> from patch.o(i.wakeupProcess1) referenced from patch.o(i.init_config)
 <LI><a href="#[1e]">wakeup_init1</a> from patch.o(i.wakeup_init1) referenced from patch.o(i.init_config)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ms_intv (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMs (via Veneer)
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi (via Veneer)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_system_init (via Veneer)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set (via Veneer)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[96]"></a>strlen</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_printf (via Veneer)
</UL>

<P><STRONG><a name="[116]"></a>LL_ConnParamUpdateCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextSlaveEvent1 (via Veneer)
</UL>

<P><STRONG><a name="[f9]"></a>LL_ENC_AES128_Encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[e8]"></a>LL_ENC_Decrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData1 (via Veneer)
</UL>

<P><STRONG><a name="[111]"></a>LL_ENC_Encrypt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUnknownRsp1 (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupTermInd1 (via Veneer)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupFeatureSetRsp1 (via Veneer)
</UL>

<P><STRONG><a name="[f2]"></a>LL_ENC_GenDeviceIV</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlPacket1 (via Veneer)
</UL>

<P><STRONG><a name="[f1]"></a>LL_ENC_GenDeviceSKD</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlPacket1 (via Veneer)
</UL>

<P><STRONG><a name="[b0]"></a>LL_ENC_GenerateNonce</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt0 (via Veneer)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt0 (via Veneer)
</UL>

<P><STRONG><a name="[f3]"></a>LL_ENC_GenerateTrueRandNum</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlPacket1 (via Veneer)
</UL>

<P><STRONG><a name="[af]"></a>LL_ENC_LoadKey</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt0 (via Veneer)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt0 (via Veneer)
</UL>

<P><STRONG><a name="[f0]"></a>LL_ENC_ReverseBytes</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupEncRsp0 (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlPacket1 (via Veneer)
</UL>

<P><STRONG><a name="[fd]"></a>LL_EncChangeCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[fe]"></a>LL_EncKeyRefreshCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[f8]"></a>LL_EncLtkReqCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[8e]"></a>LL_Init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[25]"></a>LL_ProcessEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> osal_voice.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>LL_RX_bm_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData1 (via Veneer)
</UL>

<P><STRONG><a name="[102]"></a>LL_ReadRemoteUsedFeaturesCompleteCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[105]"></a>LL_ReadRemoteVersionInfoCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[10c]"></a>LL_Reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
</UL>

<P><STRONG><a name="[e9]"></a>LL_RxDataCompleteCback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData1 (via Veneer)
</UL>

<P><STRONG><a name="[db]"></a>LL_evt_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[122]"></a>LL_set_default_conn_params</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1 (via Veneer)
</UL>

<P><STRONG><a name="[a3]"></a>__ARM_common_switch8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_convert_char_to_hex (via Veneer)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_convert_hex_to_char_wo_x (via Veneer)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_convert_hex_to_char (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_code_ini (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlPacket1 (via Veneer)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvParam1 (via Veneer)
</UL>

<P><STRONG><a name="[137]"></a>app_wakeup_process</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[e3]"></a>boot_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_code_ini (via Veneer)
</UL>

<P><STRONG><a name="[d9]"></a>clearTimerInt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[da]"></a>clear_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[e0]"></a>config_RTC</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterSleepProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[9a]"></a>disableSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
</UL>

<P><STRONG><a name="[9b]"></a>enableSleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock (via Veneer)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init (via Veneer)
</UL>

<P><STRONG><a name="[12a]"></a>enterSleepProcess</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve1 (via Veneer)
</UL>

<P><STRONG><a name="[e2]"></a>enter_sleep_off_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterSleepProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[e5]"></a>getRxBufferSize</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveEvt_TaskEndOk1 (via Veneer)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData1 (via Veneer)
</UL>

<P><STRONG><a name="[129]"></a>getSleepMode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve1 (via Veneer)
</UL>

<P><STRONG><a name="[10f]"></a>getTxBufferSize</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextSlaveEvent1 (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupEncRsp0 (via Veneer)
</UL>

<P><STRONG><a name="[e6]"></a>get_rx_read_ptr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData1 (via Veneer)
</UL>

<P><STRONG><a name="[11b]"></a>get_timer3_count</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
</UL>

<P><STRONG><a name="[126]"></a>isSleepAllow</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve1 (via Veneer)
</UL>

<P><STRONG><a name="[119]"></a>llCalcTimerDrift</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1 (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextSlaveEvent1 (via Veneer)
</UL>

<P><STRONG><a name="[112]"></a>llCheckForLstoDuringSL</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextSlaveEvent1 (via Veneer)
</UL>

<P><STRONG><a name="[eb]"></a>llConnTerminate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveEvt_TaskEndOk1 (via Veneer)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlPacket1 (via Veneer)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData1 (via Veneer)
</UL>

<P><STRONG><a name="[118]"></a>llConvertCtrlProcTimeoutToEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1 (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextSlaveEvent1 (via Veneer)
</UL>

<P><STRONG><a name="[114]"></a>llConvertLstoToEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1 (via Veneer)
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextSlaveEvent1 (via Veneer)
</UL>

<P><STRONG><a name="[f7]"></a>llDequeueCtrlPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[f4]"></a>llEnqueueCtrlPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlPacket1 (via Veneer)
</UL>

<P><STRONG><a name="[115]"></a>llEventDelta</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextSlaveEvent1 (via Veneer)
</UL>

<P><STRONG><a name="[113]"></a>llEventInRange</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextSlaveEvent1 (via Veneer)
</UL>

<P><STRONG><a name="[10b]"></a>llGetNextAdvChn</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
</UL>

<P><STRONG><a name="[125]"></a>llGetNextDataChan</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1 (via Veneer)
</UL>

<P><STRONG><a name="[110]"></a>llMemCopyDst</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupFeatureSetRsp1 (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupEncRsp0 (via Veneer)
</UL>

<P><STRONG><a name="[ef]"></a>llMemCopySrc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1 (via Veneer)
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlPacket1 (via Veneer)
</UL>

<P><STRONG><a name="[124]"></a>llProcessChanMap</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1 (via Veneer)
</UL>

<P><STRONG><a name="[ed]"></a>llProcessMasterControlPacket</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData1 (via Veneer)
</UL>

<P><STRONG><a name="[11d]"></a>llProcessRxData</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[ee]"></a>llProcessSlaveControlPacket</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData1 (via Veneer)
</UL>

<P><STRONG><a name="[11e]"></a>llProcessSlaveControlProcedures</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[11f]"></a>llProcessTxData</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[fa]"></a>llReplaceCtrlPkt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[ce]"></a>llResetRfCounters</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
</UL>

<P><STRONG><a name="[11a]"></a>llSetNextDataChan</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextSlaveEvent1 (via Veneer)
</UL>

<P><STRONG><a name="[107]"></a>llSetupDirectedAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
</UL>

<P><STRONG><a name="[101]"></a>llSetupFeatureSetReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[120]"></a>llSetupNextSlaveEvent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveEvt_TaskEndOk1 (via Veneer)
</UL>

<P><STRONG><a name="[109]"></a>llSetupNonConnectableAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
</UL>

<P><STRONG><a name="[ff]"></a>llSetupPauseEncRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[10a]"></a>llSetupScannableAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
</UL>

<P><STRONG><a name="[fb]"></a>llSetupStartEncReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[fc]"></a>llSetupStartEncRsp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[108]"></a>llSetupUndirectedAdvEvt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
</UL>

<P><STRONG><a name="[104]"></a>llSetupVersionIndReq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0 (via Veneer)
</UL>

<P><STRONG><a name="[cc]"></a>llSlaveEvt_TaskEndOk</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[b3]"></a>ll_debug_output</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1 (via Veneer)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterSleepProcess1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvParam1 (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[d7]"></a>ll_generateTxBuffer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
</UL>

<P><STRONG><a name="[b6]"></a>ll_hw_clr_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[d8]"></a>ll_hw_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
</UL>

<P><STRONG><a name="[c2]"></a>ll_hw_get_anchor</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[b4]"></a>ll_hw_get_irq_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[c1]"></a>ll_hw_get_loop_cycle</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[c7]"></a>ll_hw_get_nAck</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[c8]"></a>ll_hw_get_rxPkt_stats</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[b5]"></a>ll_hw_get_tr_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[c5]"></a>ll_hw_get_txAck</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[ba]"></a>ll_hw_go</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[d6]"></a>ll_hw_ign_rfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
</UL>

<P><STRONG><a name="[c9]"></a>ll_hw_process_RTO</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[b7]"></a>ll_hw_read_rfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[ca]"></a>ll_hw_read_tfifo_rtlp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[bb]"></a>ll_hw_rst_rfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[bc]"></a>ll_hw_rst_tfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[139]"></a>ll_hw_set_empty_head</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[d5]"></a>ll_hw_set_loop_nack_num</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
</UL>

<P><STRONG><a name="[d4]"></a>ll_hw_set_loop_timeout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
</UL>

<P><STRONG><a name="[13a]"></a>ll_hw_set_rx_timeout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[d3]"></a>ll_hw_set_rx_timeout_1st</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
</UL>

<P><STRONG><a name="[132]"></a>ll_hw_set_rx_tx_interval</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[b8]"></a>ll_hw_set_stx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[13b]"></a>ll_hw_set_timing</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[10e]"></a>ll_hw_set_trx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
</UL>

<P><STRONG><a name="[b9]"></a>ll_hw_set_trx_settle</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[133]"></a>ll_hw_set_tx_rx_interval</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[c6]"></a>ll_hw_update</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[bd]"></a>ll_hw_write_tfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[cb]"></a>ll_read_rxfifo</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[c0]"></a>ll_schedule_next_event</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1 (via Veneer)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveEvt_TaskEndOk1 (via Veneer)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[bf]"></a>move_to_slave_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[135]"></a>osalTimeUpdate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[ec]"></a>osal_bm_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData1 (via Veneer)
</UL>

<P><STRONG><a name="[88]"></a>osal_init_system</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[8c]"></a>osal_mem_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
</UL>

<P><STRONG><a name="[be]"></a>osal_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAdvParam1 (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[8d]"></a>osal_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
</UL>

<P><STRONG><a name="[86]"></a>osal_msg_deallocate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[85]"></a>osal_msg_receive</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_ProcessEvent (via Veneer)
</UL>

<P><STRONG><a name="[127]"></a>osal_next_timeout</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve1 (via Veneer)
</UL>

<P><STRONG><a name="[89]"></a>osal_pwrmgr_device</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
</UL>

<P><STRONG><a name="[cd]"></a>osal_set_event</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdv1 (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[8b]"></a>osal_start_system</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main (via Veneer)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[83]"></a>osal_start_timerEx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceCaptureTask (via Veneer)
</UL>

<P><STRONG><a name="[128]"></a>read_LL_remainder_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve1 (via Veneer)
</UL>

<P><STRONG><a name="[b2]"></a>read_current_fine_time</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1 (via Veneer)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveEvt_TaskEndOk1 (via Veneer)
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1 (via Veneer)
</UL>

<P><STRONG><a name="[123]"></a>reset_conn_buf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1 (via Veneer)
</UL>

<P><STRONG><a name="[134]"></a>rf_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[d0]"></a>set_access_address</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
</UL>

<P><STRONG><a name="[d1]"></a>set_channel</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
</UL>

<P><STRONG><a name="[cf]"></a>set_crc_seed</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
</UL>

<P><STRONG><a name="[10d]"></a>set_max_length</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
</UL>

<P><STRONG><a name="[e1]"></a>set_sleep_flag</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterSleepProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[138]"></a>set_timer</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1 (via Veneer)
</UL>

<P><STRONG><a name="[136]"></a>set_timer1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[d2]"></a>set_whiten_seed</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1 (via Veneer)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt1 (via Veneer)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_slave_conn_event1 (via Veneer)
</UL>

<P><STRONG><a name="[ea]"></a>update_rx_read_ptr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData1 (via Veneer)
</UL>

<P><STRONG><a name="[e4]"></a>wakeup_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom1Sym.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_code_ini (via Veneer)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1 (via Veneer)
</UL>

<P><STRONG><a name="[d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[74]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ae]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[13d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[13e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[13f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[140]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[141]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[77]"></a>hal_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hal_init &rArr; phy_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_printf_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_printf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_system_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>main</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; hal_init &rArr; phy_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_printf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2b]"></a>hard_fault</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, jump_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hard_fault &rArr; phy_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[84]"></a>voice_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, voice_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = voice_Init &rArr; voiceCaptureTask &rArr; phy_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceCaptureTask
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalInitTasks
</UL>

<P><STRONG><a name="[26]"></a>voice_ProcessEvent</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, voice_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = voice_ProcessEvent &rArr; voiceStopTask &rArr; phy_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_receive (via Veneer)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_msg_deallocate (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceStopTask
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceCaptureTask
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> osal_voice.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>app_main</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, voice_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_main
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_device (via Veneer)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_init_system (via Veneer)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>osalInitTasks</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, osal_voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osalInitTasks &rArr; voice_Init &rArr; voiceCaptureTask &rArr; phy_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_mem_alloc (via Veneer)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init (via Veneer)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[35]"></a>hal_gpio_read</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_on_handler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_handler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_handler
</UL>

<P><STRONG><a name="[36]"></a>hal_gpio_wakeup_set</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_gpio_wakeup_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_poweroff
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_handler
</UL>

<P><STRONG><a name="[37]"></a>hal_gpio_fmux</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>

<P><STRONG><a name="[38]"></a>gpio_pin0to3_pin31to34_control</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>

<P><STRONG><a name="[39]"></a>hal_gpio_pin_init</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_gpio_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin0to3_pin31to34_control
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_disable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_toggle
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_write
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
</UL>

<P><STRONG><a name="[3a]"></a>hal_gpioin_enable</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_gpioin_enable &rArr; hal_gpio_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_register
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_handler
</UL>

<P><STRONG><a name="[2e]"></a>hal_GPIO_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_GPIO_IRQHandler &rArr; gpioin_event &rArr; gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioin_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3b]"></a>hal_gpio_write</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_gpio_write &rArr; hal_gpio_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>

<P><STRONG><a name="[3c]"></a>hal_gpio_toggle</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_gpio_toggle &rArr; hal_gpio_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>

<P><STRONG><a name="[3d]"></a>hal_gpio_pull_set</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_on_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_cfg_analog_io
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[3e]"></a>hal_gpio_cfg_analog_io</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_gpio_cfg_analog_io &rArr; hal_gpio_pull_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
</UL>

<P><STRONG><a name="[3f]"></a>hal_gpio_DS_control</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[40]"></a>hal_gpio_fmux_set</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_dmic_open
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config
</UL>

<P><STRONG><a name="[41]"></a>hal_gpioin_disable</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_gpioin_disable &rArr; hal_gpio_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_clear
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_unregister
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_register
</UL>

<P><STRONG><a name="[42]"></a>hal_gpioin_register</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hal_gpioin_register &rArr; hal_gpioin_enable &rArr; hal_gpio_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_disable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
</UL>

<P><STRONG><a name="[43]"></a>hal_gpioin_unregister</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hal_gpioin_unregister &rArr; hal_gpioin_disable &rArr; hal_gpio_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_disable
</UL>

<P><STRONG><a name="[44]"></a>hal_gpio_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_gpio_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[45]"></a>hal_gpio_p00_to_hclk_div8_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[46]"></a>hal_gpio_p00_to_hclk_div8_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[47]"></a>hal_gpio_p01_to_pclk_div4_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[48]"></a>hal_gpio_p01_to_pclk_div4_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[49]"></a>hal_gpio_p24_to_rc32k_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[4a]"></a>hal_gpio_p24_to_rc32k_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[4b]"></a>hal_gpio_p25_to_xtal_clk32k_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[4c]"></a>hal_gpio_p25_to_xtal_clk32k_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[7b]"></a>phy_printf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, my_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = phy_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_ProcessEvent
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceStopTask
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceCaptureTask
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[7a]"></a>phy_printf_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, my_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = phy_printf_init &rArr; hal_uart_init &rArr; uart_hw_config &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[2d]"></a>hal_UART0_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_UART0_IRQHandler &rArr; irq_rx_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_rx_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[51]"></a>hal_uart_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hal_uart_init &rArr; uart_hw_config &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_printf_init
</UL>

<P><STRONG><a name="[52]"></a>hal_uart_set_tx_buf</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uart.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_uart_set_tx_buf
</UL>

<P><STRONG><a name="[53]"></a>hal_uart_get_tx_ready</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceStopTask
</UL>

<P><STRONG><a name="[54]"></a>hal_uart_send_buff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_uart_send_buff &rArr; txmit_buf_polling
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_polling
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_printf
</UL>

<P><STRONG><a name="[55]"></a>hal_uart_send_byte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_uart_send_byte
</UL>

<P><STRONG><a name="[56]"></a>hal_pwrmgr_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pwrmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_pwrmgr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>hal_pwrmgr_is_lock</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pwrmgr.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_pwrmgr_is_lock
</UL>

<P><STRONG><a name="[58]"></a>hal_pwrmgr_lock</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, pwrmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_start
</UL>

<P><STRONG><a name="[59]"></a>hal_pwrmgr_unlock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, pwrmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleep (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleep (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_clear
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_tx_empty_handler
</UL>

<P><STRONG><a name="[5a]"></a>hal_pwrmgr_register</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pwrmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[5b]"></a>hal_pwrmgr_unregister</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, pwrmgr.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_pwrmgr_unregister
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[29]"></a>hal_pwrmgr_wakeup_process</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pwrmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_pwrmgr_wakeup_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[5c]"></a>hal_pwrmgr_RAM_retention_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwrmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_pwrmgr_RAM_retention_set &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_sleep_process
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterSleepProcess1
</UL>

<P><STRONG><a name="[28]"></a>hal_pwrmgr_sleep_process</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pwrmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_pwrmgr_sleep_process &rArr; hal_pwrmgr_RAM_retention_set &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterSleepProcess1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[5d]"></a>hal_pwrmgr_RAM_retention</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwrmgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[5e]"></a>hal_pwrmgr_RAM_retention_clr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pwrmgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_pwrmgr_RAM_retention_clr &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1
</UL>

<P><STRONG><a name="[5f]"></a>hal_pwrmgr_LowCurrentLdo_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwrmgr.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_pwrmgr_LowCurrentLdo_enable &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>

<P><STRONG><a name="[60]"></a>hal_pwrmgr_LowCurrentLdo_disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwrmgr.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_pwrmgr_LowCurrentLdo_disable &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>

<P><STRONG><a name="[61]"></a>hal_pwrmgr_poweroff</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pwrmgr.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_pwrmgr_poweroff &rArr; hal_gpio_wakeup_set
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_on_handler
</UL>

<P><STRONG><a name="[62]"></a>system_on_handler</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, pwrmgr.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = system_on_handler &rArr; hal_rtc_clock_config &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_rtc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMs
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_poweroff
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
</UL>

<P><STRONG><a name="[8a]"></a>clk_gate_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_disable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_enable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_start
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[142]"></a>clk_gate_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>clk_reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config
</UL>

<P><STRONG><a name="[143]"></a>clk_hclk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>clk_pclk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_hw_config
</UL>

<P><STRONG><a name="[79]"></a>hal_rtc_clock_config</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_rtc_clock_config &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_on_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[144]"></a>hal_systick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>hal_ms_intv</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>

<P><STRONG><a name="[145]"></a>hal_setMem</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>hal_cpyMem</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_copy_bin_from_flash_to_sram
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData1
</UL>

<P><STRONG><a name="[146]"></a>hal_cpyMem32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>hal_my_strcmp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>char_array_cmp</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>hal_copy_bin_from_flash_to_sram</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cpyMem
</UL>

<P><STRONG><a name="[a6]"></a>hal_my_sizeof</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_convert_char_to_hex
</UL>

<P><STRONG><a name="[149]"></a>hal_my_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>hal_is_an_valid_number</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_convert_char_to_hex
</UL>

<P><STRONG><a name="[a2]"></a>hal_convert_hex_to_char</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>

<P><STRONG><a name="[a4]"></a>hal_convert_hex_to_char_wo_x</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>

<P><STRONG><a name="[a5]"></a>hal_convert_char_to_hex</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_is_an_valid_number
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_my_sizeof
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>

<P><STRONG><a name="[14a]"></a>hal_convert_char_to_dec</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>WaitRTCCount</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WaitRTCCount
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_rtc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitMs
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[9d]"></a>WaitMs</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, common.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WaitMs &rArr; WaitRTCCount
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_on_handler
</UL>

<P><STRONG><a name="[80]"></a>subWriteReg</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_amute_off
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_amute_on
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_rate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_encode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_gain
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_amic_gain
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_amic_mode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_dmic_mode
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_disable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_enable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voice_amute_cfg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_poweroff
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_LowCurrentLdo_disable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_LowCurrentLdo_enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_clr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_system_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_set_txPower
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go1
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterSleepProcess1
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_init1
</UL>

<P><STRONG><a name="[78]"></a>hal_system_init</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hal_system_init &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</UL>

<P><STRONG><a name="[aa]"></a>hal_read_current_time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitUs
</UL>

<P><STRONG><a name="[a9]"></a>WaitUs</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_current_time
</UL>

<P><STRONG><a name="[14b]"></a>hal_system_soft_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>hal_voice_enable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_voice_enable &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_enable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_start
</UL>

<P><STRONG><a name="[65]"></a>hal_voice_disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, voice.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_voice_disable &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_enable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>

<P><STRONG><a name="[66]"></a>hal_voice_dmic_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_voice_dmic_mode &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
</UL>

<P><STRONG><a name="[67]"></a>hal_voice_amic_mode</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_voice_amic_mode &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
</UL>

<P><STRONG><a name="[68]"></a>hal_voice_dmic_open</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hal_voice_dmic_open &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
</UL>

<P><STRONG><a name="[69]"></a>hal_voice_amic_gain</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hal_voice_amic_gain &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
</UL>

<P><STRONG><a name="[6a]"></a>hal_voice_gain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_voice_gain &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
</UL>

<P><STRONG><a name="[6b]"></a>hal_voice_encode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_voice_encode &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
</UL>

<P><STRONG><a name="[6c]"></a>hal_voice_rate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_voice_rate &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
</UL>

<P><STRONG><a name="[6d]"></a>hal_voice_amute_on</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_voice_amute_on &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
</UL>

<P><STRONG><a name="[6e]"></a>hal_voice_amute_off</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hal_voice_amute_off &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
</UL>

<P><STRONG><a name="[2f]"></a>hal_ADC_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[6f]"></a>hal_voice_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_voice_init &rArr; hal_pwrmgr_register
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_init
</UL>

<P><STRONG><a name="[70]"></a>hal_voice_config</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = hal_voice_config &rArr; set_voice_amute_cfg &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_amute_off
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_amute_on
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_rate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_encode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_gain
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_amic_gain
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_dmic_open
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_amic_mode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_dmic_mode
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_voice_amute_cfg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_enable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceCaptureTask
</UL>

<P><STRONG><a name="[71]"></a>hal_voice_start</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hal_voice_start &rArr; hal_voice_enable &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_enable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceCaptureTask
</UL>

<P><STRONG><a name="[72]"></a>hal_voice_stop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, voice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voiceStopTask
</UL>

<P><STRONG><a name="[73]"></a>hal_voice_clear</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, voice.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_voice_clear &rArr; hal_gpioin_disable &rArr; hal_gpio_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_disable
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>AACI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AACI_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>CHLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>CLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>CPU_CLCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>FLEXRAY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>LIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>MCIA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>MCIB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>TIM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>USBDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>USBHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txmit_buf_use_tx_buf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unregister
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[164]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_printf
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt0
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt0
</UL>

<P><STRONG><a name="[167]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[169]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>LL_ENC_Decrypt0</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, patch.o(i.LL_ENC_Decrypt0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ENC_Decrypt0
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_LoadKey (via Veneer)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenerateNonce (via Veneer)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[11]"></a>LL_ENC_Encrypt0</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, patch.o(i.LL_ENC_Encrypt0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_ENC_Encrypt0
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_LoadKey (via Veneer)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenerateNonce (via Veneer)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[f]"></a>LL_IRQHandler1</STRONG> (Thumb, 1484 bytes, Stack size 56 bytes, patch.o(i.LL_IRQHandler1))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LL_IRQHandler1 &rArr; ll_adptive_smart_window
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_schedule_next_event (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_read_rxfifo (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_write_tfifo (via Veneer)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_update (via Veneer)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_trx_settle (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_stx (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_tfifo (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_rfifo (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_read_tfifo_rtlp (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_read_rfifo (via Veneer)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_process_RTO (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go (via Veneer)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_txAck (via Veneer)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_tr_mode (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_rxPkt_stats (via Veneer)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_nAck (via Veneer)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_loop_cycle (via Veneer)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_irq_status (via Veneer)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_get_anchor (via Veneer)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_clr_irq (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveEvt_TaskEndOk (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_get_pktFoot
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_adptive_smart_window
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[14]"></a>LL_SetAdvParam1</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, patch.o(i.LL_SetAdvParam1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_SetAdvParam1
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[17]"></a>LL_set_default_conn_params1</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, patch.o(i.LL_set_default_conn_params1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_set_default_conn_params1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[1c]"></a>LL_slave_conn_event1</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, patch.o(i.LL_slave_conn_event1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_slave_conn_event1
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_whiten_seed (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_crc_seed (via Veneer)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_access_address (via Veneer)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_trx_settle (via Veneer)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout_1st (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_loop_timeout (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_loop_nack_num (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_tfifo (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_rfifo (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_ign_rfifo (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_config (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_generateTxBuffer (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llResetRfCounters (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[2c]"></a>TIM0_IRQHandler1</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, patch.o(i.TIM0_IRQHandler1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM0_IRQHandler1
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_timer (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearTimerInt (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_evt_schedule (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[16c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[16d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[16e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1f]"></a>boot_init1</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, patch.o(i.boot_init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = boot_init1 &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[dc]"></a>check_chip_id</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash_ext.o(i.check_chip_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = check_chip_id &rArr; read_chip_id &rArr; chip_id_one_bit_hot_convter
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chip_id
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
</UL>

<P><STRONG><a name="[de]"></a>check_chip_mAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flash_ext.o(i.check_chip_mAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = check_chip_mAddr &rArr; read_chip_mAddr &rArr; chip_id_one_bit_hot_convter
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chip_mAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
</UL>

<P><STRONG><a name="[9e]"></a>clock_time_rtc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, patch.o(i.clock_time_rtc))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_on_handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeupProcess1
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_pwrmgr_powerconserve1
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_RTC1
</UL>

<P><STRONG><a name="[20]"></a>config_RTC1</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, patch.o(i.config_RTC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = config_RTC1
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_rtc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[1a]"></a>enterSleepProcess1</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, patch.o(i.enterSleepProcess1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = enterSleepProcess1 &rArr; hal_pwrmgr_sleep_process &rArr; hal_pwrmgr_RAM_retention_set &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_sleep_process
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sleep_flag (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_sleep_off_mode (via Veneer)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_RTC (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[11c]"></a>getPN23RandNumber</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, patch.o(i.getPN23RandNumber))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt1
</UL>

<P><STRONG><a name="[7f]"></a>hal_rom_code_ini</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, patch.o(i.hal_rom_code_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = hal_rom_code_ini &rArr; rf_calibrate1 &rArr; rf_phy_ana_cfg &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init (via Veneer)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_init (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</UL>

<P><STRONG><a name="[7c]"></a>init_config</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, patch.o(i.init_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = init_config &rArr; check_chip_mAddr &rArr; read_chip_mAddr &rArr; chip_id_one_bit_hot_convter
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_chip_mAddr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_chip_id
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>llAdjSlaveLatencyValue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, patch.o(i.llAdjSlaveLatencyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llAdjSlaveLatencyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextSlaveEvent1
</UL>

<P><STRONG><a name="[16]"></a>llProcessRxData1</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, patch.o(i.llProcessRxData1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llProcessRxData1
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cpyMem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rx_read_ptr (via Veneer)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_bm_free (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlPacket (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessMasterControlPacket (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate (via Veneer)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rx_read_ptr (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxBufferSize (via Veneer)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxDataCompleteCback (via Veneer)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RX_bm_alloc (via Veneer)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Decrypt (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[24]"></a>llProcessSlaveControlPacket1</STRONG> (Thumb, 536 bytes, Stack size 24 bytes, patch.o(i.llProcessSlaveControlPacket1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llProcessSlaveControlPacket1
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMemCopySrc (via Veneer)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEnqueueCtrlPkt (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_ReverseBytes (via Veneer)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenerateTrueRandNum (via Veneer)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenDeviceSKD (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenDeviceIV (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[13]"></a>llProcessSlaveControlProcedures0</STRONG> (Thumb, 638 bytes, Stack size 64 bytes, patch.o(i.llProcessSlaveControlProcedures0))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = llProcessSlaveControlProcedures0 &rArr; llSetupTermInd1
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupVersionIndReq (via Veneer)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupStartEncRsp (via Veneer)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupStartEncReq (via Veneer)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupPauseEncRsp (via Veneer)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupFeatureSetReq (via Veneer)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llReplaceCtrlPkt (via Veneer)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llDequeueCtrlPkt (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadRemoteVersionInfoCback (via Veneer)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadRemoteUsedFeaturesCompleteCback (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncLtkReqCback (via Veneer)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncKeyRefreshCback (via Veneer)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EncChangeCback (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_AES128_Encrypt (via Veneer)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUnknownRsp1
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupTermInd1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupRejectInd1
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupFeatureSetRsp1
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupEncRsp0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[21]"></a>llSetupAdv1</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, patch.o(i.llSetupAdv1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llSetupAdv1
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_tfifo (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_rfifo (via Veneer)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupUndirectedAdvEvt (via Veneer)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupScannableAdvEvt (via Veneer)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNonConnectableAdvEvt (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupDirectedAdvEvt (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[15]"></a>llSetupDirectedAdvEvt1</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, patch.o(i.llSetupDirectedAdvEvt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llSetupDirectedAdvEvt1
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memset (via Veneer)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_whiten_seed (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_crc_seed (via Veneer)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_access_address (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_memcpy (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_schedule_next_event (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_write_tfifo (via Veneer)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_trx_settle (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_trx (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_tfifo (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_rfifo (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_ign_rfifo (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llGetNextAdvChn (via Veneer)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Reset (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[f6]"></a>llSetupEncRsp0</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, patch.o(i.llSetupEncRsp0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llSetupEncRsp0
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMemCopyDst (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTxBufferSize (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_ReverseBytes (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0
</UL>

<P><STRONG><a name="[103]"></a>llSetupFeatureSetRsp1</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, patch.o(i.llSetupFeatureSetRsp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llSetupFeatureSetRsp1
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMemCopyDst (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0
</UL>

<P><STRONG><a name="[23]"></a>llSetupNextSlaveEvent1</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, patch.o(i.llSetupNextSlaveEvent1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = llSetupNextSlaveEvent1 &rArr; llAdjSlaveLatencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetNextDataChan (via Veneer)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEventInRange (via Veneer)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEventDelta (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConvertLstoToEvent (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConvertCtrlProcTimeoutToEvent (via Veneer)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llCheckForLstoDuringSL (via Veneer)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llCalcTimerDrift (via Veneer)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTxBufferSize (via Veneer)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConnParamUpdateCback (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdjSlaveLatencyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[100]"></a>llSetupRejectInd1</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, patch.o(i.llSetupRejectInd1))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0
</UL>

<P><STRONG><a name="[f5]"></a>llSetupTermInd1</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, patch.o(i.llSetupTermInd1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llSetupTermInd1
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0
</UL>

<P><STRONG><a name="[1d]"></a>llSetupUndirectedAdvEvt1</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, patch.o(i.llSetupUndirectedAdvEvt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llSetupUndirectedAdvEvt1
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_whiten_seed (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_crc_seed (via Veneer)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_channel (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_access_address (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_schedule_next_event (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_write_tfifo (via Veneer)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_trx_settle (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_trx (via Veneer)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_tfifo (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_rst_rfifo (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_ign_rfifo (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_go (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llGetNextAdvChn (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer3_count (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPN23RandNumber
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[106]"></a>llSetupUnknownRsp1</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, patch.o(i.llSetupUnknownRsp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llSetupUnknownRsp1
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_Encrypt (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures0
</UL>

<P><STRONG><a name="[22]"></a>llSlaveEvt_TaskEndOk1</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, patch.o(i.llSlaveEvt_TaskEndOk1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llSlaveEvt_TaskEndOk1 &rArr; ll_adptive_adj_next_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_schedule_next_event (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupNextSlaveEvent (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessTxData (via Veneer)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessSlaveControlProcedures (via Veneer)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessRxData (via Veneer)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConnTerminate (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRxBufferSize (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_adptive_adj_next_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[121]"></a>ll_adptive_adj_next_time</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, patch.o(i.ll_adptive_adj_next_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ll_adptive_adj_next_time
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSlaveEvt_TaskEndOk1
</UL>

<P><STRONG><a name="[c4]"></a>ll_adptive_smart_window</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, patch.o(i.ll_adptive_smart_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ll_adptive_smart_window
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[e]"></a>ll_hw_go1</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, patch.o(i.ll_hw_go1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ll_hw_go1 &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[1b]"></a>move_to_slave_function1</STRONG> (Thumb, 508 bytes, Stack size 24 bytes, patch.o(i.move_to_slave_function1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = move_to_slave_function1 &rArr; llAdjSlaveLatencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_conn_buf (via Veneer)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_schedule_next_event (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llProcessChanMap (via Veneer)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llMemCopySrc (via Veneer)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llGetNextDataChan (via Veneer)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConvertLstoToEvent (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llConvertCtrlProcTimeoutToEvent (via Veneer)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llCalcTimerDrift (via Veneer)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_set_default_conn_params (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llAdjSlaveLatencyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[19]"></a>osal_pwrmgr_powerconserve1</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, patch.o(i.osal_pwrmgr_powerconserve1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osal_pwrmgr_powerconserve1
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_rtc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time (via Veneer)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_next_timeout (via Veneer)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSleepAllow (via Veneer)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSleepMode (via Veneer)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterSleepProcess (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[dd]"></a>read_chip_id</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, flash_ext.o(i.read_chip_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = read_chip_id &rArr; chip_id_one_bit_hot_convter
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_id_one_bit_hot_convter
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_chip_id
</UL>

<P><STRONG><a name="[df]"></a>read_chip_mAddr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, flash_ext.o(i.read_chip_mAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = read_chip_mAddr &rArr; chip_id_one_bit_hot_convter
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_id_one_bit_hot_convter
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_chip_mAddr
</UL>

<P><STRONG><a name="[10]"></a>rf_calibrate1</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, patch.o(i.rf_calibrate1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rf_calibrate1 &rArr; rf_phy_ana_cfg &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_code_ini
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[12c]"></a>rf_phy_ana_cfg</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, rf_phy_driver.o(i.rf_phy_ana_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rf_phy_ana_cfg &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[130]"></a>rf_phy_bb_cfg</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, rf_phy_driver.o(i.rf_phy_bb_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_phy_bb_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[c3]"></a>rf_phy_get_pktFoot</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rf_phy_driver.o(i.rf_phy_get_pktFoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_phy_get_pktFoot
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler1
</UL>

<P><STRONG><a name="[2a]"></a>rf_phy_ini</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rf_phy_driver.o(i.rf_phy_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rf_phy_ini &rArr; rf_phy_ana_cfg &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_set_txPower
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_bb_cfg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_code_ini
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[12f]"></a>rf_phy_set_txPower</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rf_phy_driver.o(i.rf_phy_set_txPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rf_phy_set_txPower &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</UL>

<P><STRONG><a name="[12e]"></a>rf_rxDcoc_cfg</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, rf_phy_driver.o(i.rf_rxDcoc_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rf_rxDcoc_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[12d]"></a>rf_tpCal_gen_cap_arrary</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, rf_phy_driver.o(i.rf_tpCal_gen_cap_arrary))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_tpCal_gen_cap_arrary &rArr; rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</UL>

<P><STRONG><a name="[131]"></a>rf_tp_cal</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, rf_phy_driver.o(i.rf_tp_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rf_tp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
</UL>

<P><STRONG><a name="[18]"></a>wakeupProcess1</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, patch.o(i.wakeupProcess1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = wakeupProcess1 &rArr; hal_pwrmgr_RAM_retention_clr &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time_rtc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_clr
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_system (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer1 (via Veneer)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sleep_flag (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init (via Veneer)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_current_fine_time (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osalTimeUpdate (via Veneer)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_tx_rx_interval (via Veneer)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_tx_interval (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_debug_output (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_wakeup_process (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL>
<P><STRONG><a name="[1e]"></a>wakeup_init1</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, patch.o(i.wakeup_init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = wakeup_init1 &rArr; hal_system_init &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRTCCount
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_system_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timer (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_length (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_timing (via Veneer)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout_1st (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_rx_timeout (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_loop_timeout (via Veneer)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_set_empty_head (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_ign_rfifo (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> patch.o(i.init_config)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[76]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_wakeup_handler
</UL>

<P><STRONG><a name="[7]"></a>rf_wakeup_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_wakeup_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>hal_rfphy_init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = hal_rfphy_init &rArr; hal_rom_code_ini &rArr; rf_calibrate1 &rArr; rf_phy_ana_cfg &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rom_code_ini
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_register
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_pull_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>voice_adpcm_encoder</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, voice_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = voice_adpcm_encoder
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_evt_handler_adpcm
</UL>

<P><STRONG><a name="[8]"></a>voice_evt_handler_adpcm</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, voice_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = voice_evt_handler_adpcm &rArr; voice_adpcm_encoder
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_adpcm_encoder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> voice_demo.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>voiceCaptureTask</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, voice_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = voiceCaptureTask &rArr; phy_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_start_timerEx (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_start
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_ProcessEvent
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_Init
</UL>

<P><STRONG><a name="[87]"></a>voiceStopTask</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, voice_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = voiceStopTask &rArr; phy_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_stop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_get_tx_ready
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice_ProcessEvent
</UL>

<P><STRONG><a name="[30]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[31]"></a>gpio_interrupt_enable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioin_event
</UL>

<P><STRONG><a name="[32]"></a>gpioin_event_pin</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioin_event
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_handler
</UL>

<P><STRONG><a name="[a]"></a>gpio_sleep_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpio_sleep_handler &rArr; hal_gpio_wakeup_set
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_wakeup_set
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>gpio_wakeup_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gpio_wakeup_handler &rArr; hal_gpioin_enable &rArr; hal_gpio_pin_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpioin_enable
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_read
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioin_event_pin
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init
</UL>

<P><STRONG><a name="[34]"></a>gpioin_event</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gpioin_event &rArr; gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioin_event_pin
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_GPIO_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>printchar</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, my_printf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
</UL>

<P><STRONG><a name="[91]"></a>prints</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, my_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prints
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
</UL>

<P><STRONG><a name="[93]"></a>printi</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, my_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[94]"></a>print</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, my_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_printf
</UL>

<P><STRONG><a name="[4d]"></a>irq_rx_handler</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = irq_rx_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART0_IRQHandler
</UL>

<P><STRONG><a name="[b]"></a>uart_hw_config</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart_hw_config &rArr; hal_gpio_fmux_set
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_reset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_pclk
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_fmux_set
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clk_gate_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>txmit_buf_use_tx_buf</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = txmit_buf_use_tx_buf &rArr; hal_pwrmgr_lock
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_lock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>

<P><STRONG><a name="[4f]"></a>txmit_buf_polling</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = txmit_buf_polling
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_buff
</UL>

<P><STRONG><a name="[50]"></a>irq_tx_empty_handler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_tx_empty_handler &rArr; hal_pwrmgr_unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_UART0_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>set_voice_amute_cfg</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = set_voice_amute_cfg &rArr; subWriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_voice_config
</UL>

<P><STRONG><a name="[12b]"></a>chip_id_one_bit_hot_convter</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, flash_ext.o(i.chip_id_one_bit_hot_convter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chip_id_one_bit_hot_convter
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chip_mAddr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_chip_id
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
